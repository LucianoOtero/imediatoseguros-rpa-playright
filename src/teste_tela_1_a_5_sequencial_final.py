#!/usr/bin/env python3
"""
================================================================================
RPA T√î SEGURADO - MIGRA√á√ÉO SELENIUM ‚Üí PLAYWRIGHT
================================================================================

DESCRI√á√ÉO:
    Script principal para execu√ß√£o sequencial das Telas 1-5 do RPA T√¥ Segurado,
    implementado em Playwright para resolver problemas de detec√ß√£o de elementos
    din√¢micos e StaleElementReferenceException do Selenium original.

FUNCIONALIDADES:
    - Navega√ß√£o sequencial das Telas 1-5
    - Captura estruturada de dados da Tela 5 (Estimativa Inicial)
    - Parse de valores monet√°rios "De R$ X at√© R$ Y"
    - Estrutura√ß√£o JSON alinhada com padr√£o esperado
    - Logs detalhados de execu√ß√£o

AUTOR: Luciano Otero
DATA: 2025-09-02
VERS√ÉO: 2.11.0
STATUS: Telas 1-5 funcionando perfeitamente
================================================================================
"""
import json
import sys
import time
import re
import os
from datetime import datetime
from playwright.sync_api import sync_playwright


def exibir_mensagem(mensagem):
    """
    ================================================================================
    FUN√á√ÉO: exibir_mensagem()
    ================================================================================
    
    DESCRI√á√ÉO:
        Exibe mensagens formatadas com timestamp para facilitar o debugging
        e acompanhamento da execu√ß√£o do RPA.
    
    PAR√ÇMETROS:
        mensagem (str): Texto da mensagem a ser exibida
    
    RETORNO:
        None (apenas exibe no console)
    
    EXEMPLO:
        exibir_mensagem("üì± TELA 1: Selecionando Carro...")
        # Sa√≠da: [14:30:25] üì± TELA 1: Selecionando Carro...
    ================================================================================
    """
    print(f"[{time.strftime('%H:%M:%S')}] {mensagem}")


def navegar_tela_1_playwright(page):
    """
    ================================================================================
    FUN√á√ÉO: navegar_tela_1_playwright()
    ================================================================================
    
    DESCRI√á√ÉO:
        Implementa a navega√ß√£o da Tela 1 - Sele√ß√£o do tipo de seguro.
        Esta √© a primeira tela do fluxo, onde o usu√°rio escolhe o tipo
        de seguro (Carro, Moto, etc.). No nosso caso, sempre selecionamos "Carro".
    
    ELEMENTOS IDENTIFICADOS:
        - Seletor: "button.group"
        - HTML: <button class="group">Carro</button>
        - A√ß√£o: Click no bot√£o "Carro"
    
    ESTRAT√âGIA DE IMPLEMENTA√á√ÉO:
        1. Aguardar 3 segundos para carregamento da p√°gina
        2. Localizar o bot√£o usando seletor CSS "button.group"
        3. Verificar se o elemento est√° vis√≠vel
        4. Clicar no bot√£o se vis√≠vel
        5. Aguardar 3 segundos para transi√ß√£o
        6. Retornar True/False baseado no sucesso
    
    PAR√ÇMETROS:
        page (Page): Objeto page do Playwright
    
    RETORNO:
        bool: True se navega√ß√£o bem-sucedida, False caso contr√°rio
    
    LOGS:
        - "üì± TELA 1: Selecionando Carro..."
        - "‚úÖ Bot√£o 'Carro' clicado com sucesso"
        - "‚ùå Bot√£o 'Carro' n√£o est√° vis√≠vel"
        - "‚ùå ERRO na Tela 1: {erro}"
    ================================================================================
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 1
        exibir_mensagem("üì± TELA 1: Selecionando Carro...")
        
        # PASSO 2: Aguardar carregamento inicial da p√°gina
        # Este delay √© necess√°rio para garantir que a p√°gina carregou completamente
        # e os elementos est√£o dispon√≠veis para intera√ß√£o
        time.sleep(3)
        
        # PASSO 3: Localizar o bot√£o "Carro" usando seletor CSS
        # O seletor "button.group" foi identificado atrav√©s de inspe√ß√£o visual
        # e grava√ß√µes Selenium como refer√™ncia
        botao_carro = page.locator("button.group").first
        
        # PASSO 4: Verificar se o bot√£o est√° vis√≠vel antes de clicar
        # Esta verifica√ß√£o previne erros de elemento n√£o encontrado
        if botao_carro.is_visible():
            # PASSO 5: Clicar no bot√£o "Carro"
            # Esta a√ß√£o navega para a pr√≥xima tela (Tela 2)
            botao_carro.click()
            
            # PASSO 6: Confirmar sucesso da a√ß√£o
            exibir_mensagem("‚úÖ Bot√£o 'Carro' clicado com sucesso")
            
            # PASSO 7: Aguardar transi√ß√£o para pr√≥xima tela
            # Este delay permite que a p√°gina carregue completamente
            time.sleep(3)
            
            # PASSO 8: Retornar sucesso
            return True
        else:
            # PASSO 9: Tratar caso onde bot√£o n√£o est√° vis√≠vel
            exibir_mensagem("‚ùå Bot√£o 'Carro' n√£o est√° vis√≠vel")
            return False
            
    except Exception as e:
        # PASSO 10: Tratar exce√ß√µes durante a execu√ß√£o
        exibir_mensagem(f"‚ùå ERRO na Tela 1: {str(e)}")
        return False


def navegar_tela_2_playwright(page, placa):
    """
    ================================================================================
    FUN√á√ÉO: navegar_tela_2_playwright()
    ================================================================================
    
    DESCRI√á√ÉO:
        Implementa a navega√ß√£o da Tela 2 - Inser√ß√£o da placa do ve√≠culo.
        Esta tela permite ao usu√°rio inserir a placa do ve√≠culo para
        que o sistema busque as informa√ß√µes do carro no banco de dados.
    
    ELEMENTOS IDENTIFICADOS:
        - Campo placa: "#placaTelaDadosPlaca"
        - Bot√£o continuar: "#gtm-telaDadosAutoCotarComPlacaContinuar"
        - HTML: <input id="placaTelaDadosPlaca" />
        - HTML: <button id="gtm-telaDadosAutoCotarComPlacaContinuar">Continuar</button>
    
    ESTRAT√âGIA DE IMPLEMENTA√á√ÉO:
        1. Aguardar 3 segundos para carregamento
        2. Localizar campo de placa
        3. Clicar no campo para focar
        4. Preencher com a placa fornecida
        5. Localizar bot√£o "Continuar"
        6. Clicar no bot√£o para prosseguir
        7. Aguardar transi√ß√£o
        8. Retornar status
    
    PAR√ÇMETROS:
        page (Page): Objeto page do Playwright
        placa (str): Placa do ve√≠culo (ex: "EED-3D56")
    
    RETORNO:
        bool: True se navega√ß√£o bem-sucedida, False caso contr√°rio
    
    LOGS:
        - "üì± TELA 2: Inserindo placa {placa}..."
        - "‚úÖ Placa {placa} inserida com sucesso"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Campo de placa n√£o est√° vis√≠vel"
        - "‚ùå Bot√£o 'Continuar' n√£o est√° vis√≠vel"
        - "‚ùå ERRO na Tela 2: {erro}"
    ================================================================================
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 2
        exibir_mensagem(f"üì± TELA 2: Inserindo placa {placa}...")
        
        # PASSO 2: Aguardar carregamento inicial da p√°gina
        # Este delay garante que a p√°gina carregou ap√≥s a Tela 1
        time.sleep(3)
        
        # PASSO 3: Localizar o campo de inser√ß√£o da placa
        # O seletor "#placaTelaDadosPlaca" foi identificado atrav√©s de
        # inspe√ß√£o visual e grava√ß√µes Selenium
        campo_placa = page.locator("#placaTelaDadosPlaca").first
        
        # PASSO 4: Verificar se o campo est√° vis√≠vel
        if campo_placa.is_visible():
            # PASSO 5: Clicar no campo para focar
            # Isso garante que o campo est√° ativo para receber input
            campo_placa.click()
            
            # PASSO 6: Preencher o campo com a placa fornecida
            # O m√©todo fill() do Playwright √© mais robusto que send_keys()
            campo_placa.fill(placa)
            
            # PASSO 7: Confirmar preenchimento da placa
            exibir_mensagem(f"‚úÖ Placa {placa} inserida com sucesso")
            
            # PASSO 8: Localizar o bot√£o "Continuar"
            # Este bot√£o confirma a inser√ß√£o da placa e navega para Tela 3
            botao_continuar = page.locator("#gtm-telaDadosAutoCotarComPlacaContinuar").first
            
            # PASSO 9: Verificar se o bot√£o est√° vis√≠vel
            if botao_continuar.is_visible():
                # PASSO 10: Clicar no bot√£o "Continuar"
                botao_continuar.click()
                
                # PASSO 11: Confirmar sucesso da navega√ß√£o
                exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
                
                # PASSO 12: Aguardar transi√ß√£o para pr√≥xima tela
                time.sleep(3)
                
                # PASSO 13: Retornar sucesso
                return True
            else:
                # PASSO 14: Tratar caso onde bot√£o n√£o est√° vis√≠vel
                exibir_mensagem("‚ùå Bot√£o 'Continuar' n√£o est√° vis√≠vel")
                return False
        else:
            # PASSO 15: Tratar caso onde campo n√£o est√° vis√≠vel
            exibir_mensagem("‚ùå Campo de placa n√£o est√° vis√≠vel")
            return False
            
    except Exception as e:
        # PASSO 16: Tratar exce√ß√µes durante a execu√ß√£o
        exibir_mensagem(f"‚ùå ERRO na Tela 2: {str(e)}")
        return False


def navegar_tela_3_playwright(page):
    """
    ================================================================================
    FUN√á√ÉO: navegar_tela_3_playwright()
    ================================================================================
    
    DESCRI√á√ÉO:
        Implementa a navega√ß√£o da Tela 3 - Confirma√ß√£o das informa√ß√µes do ve√≠culo.
        Esta tela exibe os dados do ve√≠culo encontrados pela placa inserida
        e solicita confirma√ß√£o do usu√°rio para prosseguir.
    
    ELEMENTOS IDENTIFICADOS:
        - Bot√£o continuar: "#gtm-telaInfosAutoContinuar"
        - HTML: <button id="gtm-telaInfosAutoContinuar">Continuar</button>
    
    ESTRAT√âGIA DE IMPLEMENTA√á√ÉO:
        1. Aguardar 3 segundos para carregamento
        2. Localizar bot√£o "Continuar"
        3. Verificar se est√° vis√≠vel
        4. Clicar no bot√£o
        5. Aguardar transi√ß√£o
        6. Retornar status
    
    PAR√ÇMETROS:
        page (Page): Objeto page do Playwright
    
    RETORNO:
        bool: True se navega√ß√£o bem-sucedida, False caso contr√°rio
    
    LOGS:
        - "üì± TELA 3: Confirmando ve√≠culo..."
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Bot√£o 'Continuar' n√£o est√° vis√≠vel"
        - "‚ùå ERRO na Tela 3: {erro}"
    ================================================================================
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 3
        exibir_mensagem("üì± TELA 3: Confirmando ve√≠culo...")
        
        # PASSO 2: Aguardar carregamento inicial da p√°gina
        # Este delay garante que a p√°gina carregou ap√≥s a Tela 2
        time.sleep(3)
        
        # PASSO 3: Localizar o bot√£o "Continuar"
        # Este bot√£o confirma as informa√ß√µes do ve√≠culo e navega para Tela 4
        botao_continuar = page.locator("#gtm-telaInfosAutoContinuar").first
        
        # PASSO 4: Verificar se o bot√£o est√° vis√≠vel
        if botao_continuar.is_visible():
            # PASSO 5: Clicar no bot√£o "Continuar"
            # Esta a√ß√£o confirma as informa√ß√µes do ve√≠culo
            botao_continuar.click()
            
            # PASSO 6: Confirmar sucesso da a√ß√£o
            exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            
            # PASSO 7: Aguardar transi√ß√£o para pr√≥xima tela
            time.sleep(3)
            
            # PASSO 8: Retornar sucesso
            return True
        else:
            # PASSO 9: Tratar caso onde bot√£o n√£o est√° vis√≠vel
            exibir_mensagem("‚ùå Bot√£o 'Continuar' n√£o est√° vis√≠vel")
            return False
            
    except Exception as e:
        # PASSO 10: Tratar exce√ß√µes durante a execu√ß√£o
        exibir_mensagem(f"‚ùå ERRO na Tela 3: {str(e)}")
        return False


def navegar_tela_4_playwright(page, veiculo_segurado):
    """
    ================================================================================
    FUN√á√ÉO: navegar_tela_4_playwright()
    ================================================================================
    
    DESCRI√á√ÉO:
        Implementa a navega√ß√£o da Tela 4 - Verifica√ß√£o se o ve√≠culo j√° est√° segurado.
        Esta tela pergunta se o ve√≠culo j√° possui seguro ativo, para determinar
        se √© uma renova√ß√£o ou nova contrata√ß√£o.
    
    ELEMENTOS IDENTIFICADOS:
        - Bot√£o "N√£o": "#gtm-telaRenovacaoVeiculoContinuar"
        - HTML: <button id="gtm-telaRenovacaoVeiculoContinuar">N√£o</button>
    
    ESTRAT√âGIA DE IMPLEMENTA√á√ÉO:
        1. Aguardar 3 segundos para carregamento
        2. Verificar par√¢metro veiculo_segurado
        3. Se "N√£o": localizar e clicar no bot√£o "N√£o"
        4. Se "Sim": implementar l√≥gica espec√≠fica (n√£o implementada)
        5. Aguardar transi√ß√£o
        6. Retornar status
    
    PAR√ÇMETROS:
        page (Page): Objeto page do Playwright
        veiculo_segurado (str): "Sim" ou "N√£o"
    
    RETORNO:
        bool: True se navega√ß√£o bem-sucedida, False caso contr√°rio
    
    LOGS:
        - "üì± TELA 4: Ve√≠culo j√° segurado ({veiculo_segurado})..."
        - "‚úÖ 'N√£o' selecionado com sucesso"
        - "‚ùå Bot√£o 'N√£o' n√£o est√° vis√≠vel"
        - "‚ö†Ô∏è L√≥gica para 'Sim' n√£o implementada"
        - "‚ùå ERRO na Tela 4: {erro}"
    ================================================================================
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 4
        exibir_mensagem(f"üì± TELA 4: Ve√≠culo j√° segurado ({veiculo_segurado})...")
        
        # PASSO 2: Aguardar carregamento inicial da p√°gina
        # Este delay garante que a p√°gina carregou ap√≥s a Tela 3
        time.sleep(3)
        
        # PASSO 3: Verificar o par√¢metro veiculo_segurado
        # Este par√¢metro determina qual op√ß√£o selecionar
        if veiculo_segurado == "N√£o":
            # PASSO 4: Localizar o bot√£o "N√£o"
            # Este bot√£o indica que o ve√≠culo n√£o est√° segurado
            botao_nao = page.locator("#gtm-telaRenovacaoVeiculoContinuar").first
            
            # PASSO 5: Verificar se o bot√£o est√° vis√≠vel
            if botao_nao.is_visible():
                # PASSO 6: Clicar no bot√£o "N√£o"
                # Esta a√ß√£o indica que √© uma nova contrata√ß√£o
                botao_nao.click()
                
                # PASSO 7: Confirmar sucesso da a√ß√£o
                exibir_mensagem("‚úÖ 'N√£o' selecionado com sucesso")
                
                # PASSO 8: Aguardar transi√ß√£o para pr√≥xima tela
                time.sleep(3)
                
                # PASSO 9: Retornar sucesso
                return True
            else:
                # PASSO 10: Tratar caso onde bot√£o n√£o est√° vis√≠vel
                exibir_mensagem("‚ùå Bot√£o 'N√£o' n√£o est√° vis√≠vel")
                return False
        else:
            # PASSO 11: Tratar caso "Sim" (n√£o implementado)
            # Para ve√≠culos j√° segurados, seria necess√°rio implementar
            # l√≥gica espec√≠fica de renova√ß√£o
            exibir_mensagem("‚ö†Ô∏è L√≥gica para 'Sim' n√£o implementada")
            return False
            
    except Exception as e:
        # PASSO 12: Tratar exce√ß√µes durante a execu√ß√£o
        exibir_mensagem(f"‚ùå ERRO na Tela 4: {str(e)}")
        return False


def navegar_tela_5_playwright(page):
    """
    ================================================================================
    FUN√á√ÉO: navegar_tela_5_playwright()
    ================================================================================
    
    DESCRI√á√ÉO:
        Implementa a navega√ß√£o da Tela 5 - Estimativa Inicial com captura de dados.
        Esta √© a tela mais complexa do fluxo, onde o sistema calcula estimativas
        de pre√ßo para diferentes tipos de cobertura e exibe os resultados em cards.
        Al√©m da navega√ß√£o, esta fun√ß√£o captura dados estruturados dos cards.
    
    ELEMENTOS IDENTIFICADOS:
        - Cards de cobertura: "div.bg-primary"
        - Valores monet√°rios: "p.text-primary.underline"
        - Benef√≠cios: "div.gap-3.flex.flex-col.pl-4.mt-3"
        - Bot√£o continuar: "#gtm-telaEstimativaContinuarParaCotacaoFinal"
    
    ESTRAT√âGIA DE IMPLEMENTA√á√ÉO:
        1. Aguardar carregamento inicial (5 segundos)
        2. Loop de tentativas para aguardar elementos din√¢micos (30 tentativas)
        3. Verificar m√∫ltiplos indicadores de carregamento
        4. Capturar dados estruturados dos cards
        5. Clicar no bot√£o "Continuar" para prosseguir
        6. Retornar status da opera√ß√£o
    
    DESAFIOS SUPERADOS:
        - Elementos din√¢micos que demoram a carregar
        - Captura precisa de valores monet√°rios
        - Estrutura√ß√£o de dados complexa
        - Timeout configur√°vel para estabilidade
    
    PAR√ÇMETROS:
        page (Page): Objeto page do Playwright
    
    RETORNO:
        bool: True se navega√ß√£o e captura bem-sucedidas, False caso contr√°rio
    
    LOGS:
        - "üì± TELA 5: Estimativa Inicial - Aguardando c√°lculo da estimativa..."
        - "üîÑ Tentativa {X}/{30} - Aguardando cards de cobertura..."
        - "‚úÖ Elemento de estimativa encontrado: {X} cards"
        - "üìä Dados capturados: {X} coberturas"
        - "üí∞ Valores encontrados: {X}"
        - "‚úÖ Navega√ß√£o da Tela 5 conclu√≠da"
        - "‚ùå Timeout: Elementos da Tela 5 n√£o apareceram"
        - "‚ùå ERRO na Tela 5: {erro}"
    ================================================================================
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 5
        exibir_mensagem("üì± TELA 5: Estimativa Inicial - Aguardando c√°lculo da estimativa...")
        
        # PASSO 2: Aguardar carregamento inicial da p√°gina
        # Este delay √© maior que as outras telas porque a Tela 5
        # precisa calcular estimativas em tempo real
        time.sleep(5)
        
        # PASSO 3: Configurar loop de tentativas para elementos din√¢micos
        # A Tela 5 tem elementos que demoram a carregar devido ao c√°lculo
        # de estimativas em tempo real
        max_tentativas = 30
        tentativa = 0
        
        # PASSO 4: Loop principal para aguardar carregamento dos elementos
        while tentativa < max_tentativas:
            # PASSO 4.1: Exibir progresso das tentativas
            exibir_mensagem(f"üîÑ Tentativa {tentativa + 1}/{max_tentativas} - Aguardando cards de cobertura...")
            
            # PASSO 4.2: Verificar se os cards de cobertura apareceram
            # O seletor "div.bg-primary" foi identificado como o container
            # principal dos cards de estimativa
            elemento_estimativa = page.locator("div.bg-primary")
            if elemento_estimativa.count() > 0:
                exibir_mensagem(f"‚úÖ Elemento de estimativa encontrado: {elemento_estimativa.count()} cards")
                break
            
            # PASSO 4.3: Verificar se h√° elementos com pre√ßos (fallback)
            # Se os cards n√£o apareceram, verificar se h√° valores monet√°rios
            elementos_preco = page.locator("text=R$")
            if elementos_preco.count() > 0:
                exibir_mensagem(f"‚úÖ Elementos com pre√ßos encontrados: {elementos_preco.count()}")
                break
            
            # PASSO 4.4: Verificar se o bot√£o "Continuar" apareceu (fallback)
            # √öltimo indicador de que a p√°gina carregou
            botao_continuar = page.locator("#gtm-telaEstimativaContinuarParaCotacaoFinal")
            if botao_continuar.count() > 0:
                exibir_mensagem("‚úÖ Bot√£o 'Continuar' encontrado")
                break
            
            # PASSO 4.5: Aguardar 1 segundo antes da pr√≥xima tentativa
            time.sleep(1)
            tentativa += 1
        
        # PASSO 5: Verificar se o timeout foi atingido
        if tentativa >= max_tentativas:
            exibir_mensagem("‚ùå Timeout: Elementos da Tela 5 n√£o apareceram")
            return False
        
        # PASSO 6: Capturar dados estruturados dos cards de cobertura
        # Esta √© a funcionalidade principal da Tela 5
        dados_capturados = capturar_dados_carrossel_estimativas_playwright(page)
        
        # PASSO 7: Exibir resumo dos dados capturados
        if dados_capturados:
            exibir_mensagem(f"üìä Dados capturados: {len(dados_capturados.get('coberturas_detalhadas', []))} coberturas")
            exibir_mensagem(f"üí∞ Valores encontrados: {dados_capturados.get('valores_encontrados', 0)}")
        
        # PASSO 8: Navegar para a pr√≥xima tela clicando no bot√£o "Continuar"
        try:
            # PASSO 8.1: Localizar o bot√£o "Continuar"
            botao_continuar = page.locator("#gtm-telaEstimativaContinuarParaCotacaoFinal")
            
            # PASSO 8.2: Verificar se o bot√£o est√° dispon√≠vel
            if botao_continuar.count() > 0:
                # PASSO 8.3: Exibir mensagem de navega√ß√£o
                exibir_mensagem("üîÑ Clicando no bot√£o 'Continuar' da Tela 5")
                
                # PASSO 8.4: Clicar no bot√£o para prosseguir
                botao_continuar.click()
                
                # PASSO 8.5: Aguardar transi√ß√£o para pr√≥xima tela
                time.sleep(3)
                
                # PASSO 8.6: Confirmar sucesso da navega√ß√£o
                exibir_mensagem("‚úÖ Navega√ß√£o da Tela 5 conclu√≠da")
                
                # PASSO 8.7: Retornar sucesso
                return True
            else:
                # PASSO 8.8: Tratar caso onde bot√£o n√£o est√° dispon√≠vel
                exibir_mensagem("‚ùå Bot√£o 'Continuar' n√£o encontrado na Tela 5")
                return False
                
        except Exception as e:
            # PASSO 8.9: Tratar exce√ß√µes durante o clique no bot√£o
            exibir_mensagem(f"‚ùå ERRO ao clicar no bot√£o 'Continuar': {str(e)}")
            return False
            
    except Exception as e:
        # PASSO 9: Tratar exce√ß√µes gerais durante a execu√ß√£o
        exibir_mensagem(f"‚ùå ERRO na Tela 5: {str(e)}")
        return False


def capturar_dados_carrossel_estimativas_playwright(page):
    """
    ================================================================================
    FUN√á√ÉO: capturar_dados_carrossel_estimativas_playwright()
    ================================================================================
    
    DESCRI√á√ÉO:
        Captura dados estruturados do carrossel de estimativas da Tela 5.
        Esta fun√ß√£o √© o cora√ß√£o da captura de dados, extraindo informa√ß√µes
        detalhadas de cada card de cobertura, incluindo valores monet√°rios,
        benef√≠cios e metadados.
    
    ELEMENTOS CAPTURADOS:
        - Nome da cobertura: "button p.text-white"
        - Valores monet√°rios: "p.text-primary.underline"
        - Benef√≠cios: "div.gap-3.flex.flex-col.pl-4.mt-3"
        - Texto completo: Conte√∫do total do card
    
    ESTRAT√âGIA DE CAPTURA:
        1. Localizar todos os cards de cobertura
        2. Para cada card:
           a. Extrair nome da cobertura
           b. Parsear valores "De R$ X at√© R$ Y"
           c. Capturar lista de benef√≠cios
           d. Estruturar dados em JSON
        3. Salvar dados em arquivo tempor√°rio
        4. Retornar estrutura completa
    
    T√âCNICAS UTILIZADAS:
        - Regex patterns para parsing de valores monet√°rios
        - Seletores CSS espec√≠ficos para cada elemento
        - Estrutura√ß√£o hier√°rquica de dados
        - Fallbacks para casos de erro
    
    PAR√ÇMETROS:
        page (Page): Objeto page do Playwright
    
    RETORNO:
        dict: Estrutura JSON com dados capturados ou None se erro
    
    ESTRUTURA DE RETORNO:
        {
            "timestamp": "2025-09-02T03:45:30.523994",
            "tela": 5,
            "nome_tela": "Estimativa Inicial",
            "coberturas_detalhadas": [
                {
                    "indice": 1,
                    "cobertura": "Cobertura Compreensiva",
                    "valores": {"de": "R$ 1.600,00", "ate": "R$ 2.200,00"},
                    "beneficios": [{"nome": "Colis√£o e Acidentes", "status": "incluido"}]
                }
            ],
            "valores_encontrados": 6,
            "beneficios_gerais": [...],
            "seguradoras": [...],
            "elementos_detectados": [...]
        }
    
    LOGS:
        - "üîç Encontrados {X} cards de cobertura (bg-primary)"
        - "üìã Card {X}: {cobertura} - De {valor} at√© {valor}"
        - "üíæ DADOS SALVOS: {caminho_arquivo}"
        - "üìä RESUMO: {X} coberturas detalhadas, {X} benef√≠cios gerais"
        - "‚ùå ERRO na captura de dados: {erro}"
    ================================================================================
    """
    try:
        # PASSO 1: Inicializar estrutura de dados do carrossel
        # Esta estrutura segue o padr√£o definido no exemplo_json_retorno.json
        dados_carrossel = {
            "timestamp": datetime.now().isoformat(),  # Timestamp ISO para rastreamento
            "tela": 5,                                # N√∫mero da tela atual
            "nome_tela": "Estimativa Inicial",        # Nome descritivo da tela
            "url": str(page.url),                     # URL atual da p√°gina
            "titulo": str(page.title),                # T√≠tulo da p√°gina
            "coberturas_detalhadas": [],              # Lista de coberturas capturadas
            "beneficios_gerais": [],                  # Benef√≠cios encontrados na p√°gina
            "valores_encontrados": 0,                 # Contador de valores monet√°rios
            "seguradoras": [],                        # Seguradoras detectadas
            "elementos_detectados": []                # Elementos especiais detectados
        }
        
        # Captura os cards de cobertura usando o seletor espec√≠fico identificado
        cards_cobertura = page.locator("div.bg-primary")
        
        if cards_cobertura.count() > 0:
            exibir_mensagem(f"üîç Encontrados {cards_cobertura.count()} cards de cobertura (bg-primary)")
            
            for i in range(cards_cobertura.count()):
                try:
                    card = cards_cobertura.nth(i)
                    
                    # Captura o texto completo do card
                    card_text = card.text_content().strip() if card.text_content() else ""
                    
                    if not card_text or len(card_text) < 10:
                        continue
                    
                    cobertura_info = {
                        "indice": i + 1,
                        "nome_cobertura": "",
                        "valores": {
                            "de": "",
                            "ate": ""
                        },
                        "beneficios": [],
                        "texto_completo": card_text
                    }
                    
                    # Extrair nome da cobertura (texto dentro do button)
                    nome_cobertura = ""
                    try:
                        nome_elemento = card.locator("button p.text-white")
                        if nome_elemento.count() > 0:
                            nome_cobertura = nome_elemento.first.text_content().strip()
                            cobertura_info["nome_cobertura"] = nome_cobertura
                    except:
                        pass
                    
                    # Se n√£o encontrou pelo seletor espec√≠fico, tentar por regex
                    if not nome_cobertura:
                        cobertura_patterns = [
                            r"Cobertura\s+([A-Za-z√Ä-√ø\s]+?)(?:\s|$)",
                            r"([A-Za-z√Ä-√ø\s]+?)\s+Cobertura",
                            r"([A-Za-z√Ä-√ø\s]+?)\s+Compreensiva",
                            r"([A-Za-z√Ä-√ø\s]+?)\s+Roubo",
                            r"([A-Za-z√Ä-√ø\s]+?)\s+RCF"
                        ]
                        
                        for pattern in cobertura_patterns:
                            match = re.search(pattern, card_text, re.IGNORECASE)
                            if match:
                                cobertura_info["nome_cobertura"] = match.group(1).strip()
                                break
                    
                    # Buscar valores usando o seletor espec√≠fico identificado
                    try:
                        # Procurar por elementos com valores usando o seletor correto
                        elementos_preco = page.locator("p.text-primary.underline")
                        if elementos_preco.count() > i:
                            preco_text = elementos_preco.nth(i).text_content().strip()
                            
                            # Extrair valores "de" e "at√©" usando regex
                            valor_patterns = [
                                r"De\s*R\$\s*([0-9.,]+)\s*at√©\s*R\$\s*([0-9.,]+)",
                                r"R\$\s*([0-9.,]+)\s*at√©\s*R\$\s*([0-9.,]+)",
                                r"([0-9.,]+)\s*at√©\s*([0-9.,]+)"
                            ]
                            
                            for pattern in valor_patterns:
                                match = re.search(pattern, preco_text, re.IGNORECASE)
                                if match:
                                    cobertura_info["valores"]["de"] = f"R$ {match.group(1)}"
                                    cobertura_info["valores"]["ate"] = f"R$ {match.group(2)}"
                                    break
                    except:
                        pass
                    
                    # Se n√£o encontrou valores espec√≠ficos, tentar no texto do card
                    if not cobertura_info["valores"]["de"]:
                        valor_patterns = [
                            r"De\s*R\$\s*([0-9.,]+)\s*at√©\s*R\$\s*([0-9.,]+)",
                            r"R\$\s*([0-9.,]+)\s*at√©\s*R\$\s*([0-9.,]+)",
                            r"([0-9.,]+)\s*at√©\s*([0-9.,]+)"
                        ]
                        
                        for pattern in valor_patterns:
                            match = re.search(pattern, card_text, re.IGNORECASE)
                            if match:
                                cobertura_info["valores"]["de"] = f"R$ {match.group(1)}"
                                cobertura_info["valores"]["ate"] = f"R$ {match.group(2)}"
                                break
                    
                    # Extrair benef√≠cios usando o seletor espec√≠fico identificado
                    try:
                        # Procurar por elementos de benef√≠cios pr√≥ximos ao card
                        elementos_beneficios = page.locator("div.gap-3.flex.flex-col.pl-4.mt-3")
                        if elementos_beneficios.count() > i:
                            container_beneficios = elementos_beneficios.nth(i)
                            beneficios_texto = container_beneficios.locator("p.text-sm.text-gray-100.font-normal")
                            
                            for j in range(beneficios_texto.count()):
                                beneficio_texto = beneficios_texto.nth(j).text_content().strip()
                                if beneficio_texto:
                                    cobertura_info["beneficios"].append({
                                        "nome": beneficio_texto,
                                        "status": "incluido"
                                    })
                    except:
                        pass
                    
                    # Fallback: procurar por benef√≠cios conhecidos no texto do card
                    if not cobertura_info["beneficios"]:
                        beneficios_conhecidos = [
                            "Colis√£o e Acidentes", "Roubo e Furto", "Inc√™ndio", "Danos a terceiros",
                            "Assist√™ncia 24h", "Carro Reserva", "Vidros", "Roubo", "Furto",
                            "Danos parciais em tentativas de roubo", "Danos materiais a terceiros",
                            "Danos corporais a terceiro", "Assist√™ncia", "Carro reserva",
                            "Vidros", "Acidentes", "Colis√£o", "Terceiros", "Materiais", "Corporais"
                        ]
                        
                        for beneficio in beneficios_conhecidos:
                            if beneficio.lower() in card_text.lower():
                                cobertura_info["beneficios"].append({
                                    "nome": beneficio,
                                    "status": "incluido"
                                })
                    
                    # Se encontrou dados v√°lidos, adicionar √† lista
                    if cobertura_info["nome_cobertura"] or cobertura_info["valores"]["de"]:
                        dados_carrossel["coberturas_detalhadas"].append(cobertura_info)
                        
                        # Conta valores encontrados
                        if cobertura_info["valores"]["de"]:
                            dados_carrossel["valores_encontrados"] += 1
                        
                        exibir_mensagem(f"üìã Card {i + 1}: {cobertura_info['nome_cobertura']} - De {cobertura_info['valores']['de']} at√© {cobertura_info['valores']['ate']}")
                        
                except Exception as e:
                    exibir_mensagem(f"‚ö†Ô∏è Erro ao processar card {i + 1}: {str(e)}")
                    continue
        
        # Procurar por valores monet√°rios gerais (fallback)
        valores_monetarios = page.locator("text=R$")
        dados_carrossel["valores_encontrados"] = max(dados_carrossel["valores_encontrados"], valores_monetarios.count())
        
        # Procurar por benef√≠cios gerais na p√°gina
        beneficios_gerais = [
            "Colis√£o e Acidentes", "Roubo e Furto", "Inc√™ndio", "Danos a terceiros",
            "Assist√™ncia 24h", "Carro Reserva", "Vidros", "Roubo", "Furto",
            "Danos parciais em tentativas de roubo", "Danos materiais a terceiros",
            "Danos corporais a terceiro"
        ]
        
        for beneficio in beneficios_gerais:
            elementos = page.locator(f"text={beneficio}")
            if elementos.count() > 0:
                dados_carrossel["beneficios_gerais"].append({
                    "nome": beneficio,
                    "encontrado": True,
                    "quantidade_elementos": elementos.count()
                })
        
        # Procurar por seguradoras
        seguradoras_texto = [
            "Seguradora", "seguradora", "Seguro", "seguro",
            "Allianz", "allianz", "Porto", "porto", "SulAm√©rica", "sulamerica",
            "Bradesco", "bradesco", "Ita√∫", "itau", "Santander", "santander"
        ]
        
        for seguradora in seguradoras_texto:
            elementos = page.locator(f"text={seguradora}")
            if elementos.count() > 0:
                for j in range(min(elementos.count(), 3)):  # Limitar a 3 elementos
                    texto = elementos.nth(j).text_content().strip()
                    if texto and len(texto) > 2:
                        dados_carrossel["seguradoras"].append({
                            "nome": texto,
                            "seletor": "texto_contido"
                        })
        
        # Procurar por elementos espec√≠ficos do carrossel
        elementos_carrossel = page.locator("[class*='carousel'], [class*='slider'], [class*='swiper']")
        if elementos_carrossel.count() > 0:
            dados_carrossel["elementos_detectados"].append("carrossel_detectado")
        
        # Capturar texto completo da p√°gina para an√°lise
        page_content = page.content()
        page_text = page_content.lower() if page_content else ""
        
        # Verificar presen√ßa de palavras-chave
        palavras_chave = ["estimativa", "carrossel", "cobertura", "pre√ßo", "valor", "plano"]
        for palavra in palavras_chave:
            if palavra in page_text:
                dados_carrossel["elementos_detectados"].append(f"palavra_chave: {palavra}")
        
        # Salvar dados em arquivo tempor√°rio
        temp_dir = "temp/captura_carrossel"
        os.makedirs(temp_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        json_path = f"{temp_dir}/carrossel_estimativas_{timestamp}.json"
        
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(dados_carrossel, f, indent=2, ensure_ascii=False)
        
        exibir_mensagem(f"üíæ DADOS SALVOS: {json_path}")
        exibir_mensagem(f"üìä RESUMO: {len(dados_carrossel['coberturas_detalhadas'])} coberturas detalhadas, {len(dados_carrossel['beneficios_gerais'])} benef√≠cios gerais")
        
        return dados_carrossel
        
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na captura de dados: {str(e)}")
        return None


def main():
    """Fun√ß√£o principal"""
    try:
        # Carregar par√¢metros
        with open('parametros.json', 'r', encoding='utf-8') as f:
            parametros = json.load(f)
        
        exibir_mensagem("üöÄ INICIANDO TESTE TELAS 1 A 5 SEQUENCIAL FINAL")
        exibir_mensagem("=" * 60)
        
        with sync_playwright() as playwright:
            # Configurar browser
            browser = playwright.chromium.launch(headless=False)
            context = browser.new_context(
                viewport={'width': 1139, 'height': 1378},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            )
            page = context.new_page()
            
            # Navegar para a p√°gina inicial
            exibir_mensagem("üåê Navegando para a p√°gina inicial...")
            page.goto("https://www.app.tosegurado.com.br/imediatoseguros")
            time.sleep(3)
            
            # TELA 1: Sele√ß√£o Carro
            if not navegar_tela_1_playwright(page):
                exibir_mensagem("‚ùå FALHA NA TELA 1")
                return False
            
            # TELA 2: Inser√ß√£o Placa
            if not navegar_tela_2_playwright(page, parametros['placa']):
                exibir_mensagem("‚ùå FALHA NA TELA 2")
                return False
            
            # TELA 3: Confirma√ß√£o Ve√≠culo
            if not navegar_tela_3_playwright(page):
                exibir_mensagem("‚ùå FALHA NA TELA 3")
                return False
            
            # TELA 4: Ve√≠culo Segurado
            if not navegar_tela_4_playwright(page, parametros['veiculo_segurado']):
                exibir_mensagem("‚ùå FALHA NA TELA 4")
                return False
            
            # TELA 5: Estimativa Inicial
            if not navegar_tela_5_playwright(page):
                exibir_mensagem("‚ùå FALHA NA TELA 5")
                return False
            
            exibir_mensagem("\n" + "=" * 60)
            exibir_mensagem("üèÅ TESTE TELAS 1 A 5 CONCLU√çDO COM SUCESSO!")
            exibir_mensagem("=" * 60)
            
            # Aguardar um pouco para visualizar o resultado
            time.sleep(5)
            
            browser.close()
            return True
            
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO GERAL: {str(e)}")
        return False


if __name__ == "__main__":
    sucesso = main()
    if sucesso:
        exibir_mensagem("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
        sys.exit(0)
    else:
        exibir_mensagem("‚ùå TESTE FALHOU!")
        sys.exit(1)
