#!/usr/bin/env python3
"""
Teste para analisar o que est√° acontecendo na Tela 6
"""

import time
import json
import os
import tempfile
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def configurar_driver():
    """Configura o driver do Chrome"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    try:
        chromedriver_path = os.path.join(os.getcwd(), "chromedriver", "chromedriver-win64", "chromedriver.exe")
        
        if os.path.exists(chromedriver_path):
            print("‚úÖ Usando ChromeDriver local...")
            service = Service(chromedriver_path)
        else:
            print("‚ùå ChromeDriver local n√£o encontrado")
            return None, None
        
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("‚úÖ Driver configurado com sucesso")
        return driver, temp_dir
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar driver: {e}")
        return None, None

def aguardar_estabilizacao(driver, segundos=15):
    """Aguarda a estabiliza√ß√£o da p√°gina"""
    print(f"‚è≥ Aguardando estabiliza√ß√£o da p√°gina ({segundos}s)...")
    time.sleep(segundos)

def clicar_com_delay_extremo(driver, by, value, descricao="elemento", timeout=30):
    """Clica em um elemento com delay extremo"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        aguardar_estabilizacao(driver, 15)
        
        driver.execute_script("arguments[0].scrollIntoView(true);", elemento)
        time.sleep(2)
        elemento.click()
        print(f"‚úÖ {descricao} clicado com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao clicar em {descricao}: {e}")
        return False

def clicar_radio_via_javascript(driver, texto_radio, descricao="radio", timeout=30):
    """Clica em um radio button via JavaScript"""
    try:
        print(f"‚è≥ Aguardando radio {descricao} aparecer...")
        aguardar_estabilizacao(driver, 15)
        
        script = f"""
        var elementos = document.querySelectorAll('input[type="radio"], label, span, div');
        var radioEncontrado = null;
        
        for (var i = 0; i < elementos.length; i++) {{
            var elemento = elementos[i];
            if (elemento.textContent && elemento.textContent.includes('{texto_radio}')) {{
                radioEncontrado = elemento;
                break;
            }}
        }}
        
        if (radioEncontrado) {{
            if (radioEncontrado.tagName === 'LABEL') {{
                var inputId = radioEncontrado.getAttribute('for');
                if (inputId) {{
                    var input = document.getElementById(inputId);
                    if (input) {{
                        input.click();
                        return 'Radio clicado via label: ' + inputId;
                    }}
                }}
            }}
            
            radioEncontrado.click();
            return 'Radio clicado diretamente: ' + radioEncontrado.outerHTML.substring(0, 100);
        }} else {{
            return 'Radio n√£o encontrado';
        }}
        """
        
        resultado = driver.execute_script(script)
        print(f"üéØ {resultado}")
        
        if "Radio clicado" in resultado:
            print(f"‚úÖ Radio {descricao} clicado via JavaScript")
            return True
        else:
            print(f"‚ùå Radio {descricao} n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao clicar radio {descricao}: {e}")
        return False

def carregar_parametros():
    """Carrega par√¢metros do JSON"""
    try:
        with open("parametros.json", "r", encoding="utf-8") as f:
            parametros = json.load(f)
            return parametros
    except:
        return None

def navegar_ate_tela5(driver):
    """Navega at√© a Tela 5"""
    print("üöÄ **NAVEGANDO AT√â TELA 5**")
    
    try:
        # TELA 1: Sele√ß√£o do tipo de seguro
        print("\nüì± TELA 1: Selecionando Carro...")
        driver.get("https://www.app.tosegurado.com.br/cotacao")
        time.sleep(5)
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//*[contains(text(), 'Carro')]", "bot√£o Carro"):
            return False
        
        time.sleep(10)
        aguardar_estabilizacao(driver, 20)
        
        # TELA 2: Inser√ß√£o da placa
        print("\nüì± TELA 2: Inserindo placa KVA-1791...")
        aguardar_estabilizacao(driver, 15)
        
        campo_placa = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        campo_placa.clear()
        campo_placa.send_keys("KVA-1791")
        print("‚úÖ Placa preenchida: KVA-1791")
        
        aguardar_estabilizacao(driver, 15)
        
        # TELA 3: Clicar em Continuar
        print("\nüì± TELA 3: Clicando Continuar...")
        if not clicar_com_delay_extremo(driver, By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar", "bot√£o Continuar Tela 3"):
            return False
        
        time.sleep(15)
        aguardar_estabilizacao(driver, 20)
        
        # TELA 3: Confirma√ß√£o do ve√≠culo ECOSPORT
        print("\nüì± TELA 3: Confirmando ve√≠culo ECOSPORT...")
        try:
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'ECOSPORT')]"))
            )
            print("‚úÖ Confirma√ß√£o do ve√≠culo detectada!")
        except:
            print("‚ö†Ô∏è Confirma√ß√£o do ve√≠culo n√£o detectada")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Continuar')]", "bot√£o Continuar"):
            return False
        
        time.sleep(15)
        aguardar_estabilizacao(driver, 20)
        
        # TELA 4: Ve√≠culo j√° est√° segurado?
        print("\nüì± TELA 4: Ve√≠culo j√° est√° segurado?")
        try:
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'segurado') or contains(text(), 'Segurado')]"))
            )
            print("‚úÖ Tela 4 carregada!")
        except:
            print("‚ùå Tela 4 n√£o carregou")
            return False
        
        if not clicar_radio_via_javascript(driver, "N√£o", "N√£o para ve√≠culo segurado"):
            print("‚ö†Ô∏è Radio 'N√£o' n√£o encontrado")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Continuar')]", "bot√£o Continuar Tela 4"):
            return False
        
        time.sleep(15)
        aguardar_estabilizacao(driver, 20)
        
        # TELA 5: Estimativa inicial
        print("\nüì± TELA 5: Estimativa inicial...")
        try:
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'estimativa') or contains(text(), 'inicial') or contains(text(), 'carrossel') or contains(text(), 'cobertura')]"))
            )
            print("‚úÖ Tela 5 carregada!")
        except:
            print("‚ö†Ô∏è Tela 5 n√£o detectada")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 5"):
            return False
        
        time.sleep(15)
        aguardar_estabilizacao(driver, 20)
        
        print("‚úÖ **NAVEGA√á√ÉO AT√â TELA 5 CONCLU√çDA!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao navegar at√© Tela 5: {e}")
        return False

def analisar_tela6(driver):
    """Analisa o que est√° na Tela 6"""
    print("\nüîç **ANALISANDO TELA 6**")
    
    try:
        # Aguardar estabiliza√ß√£o
        aguardar_estabilizacao(driver, 10)
        
        # Verificar URL atual
        print(f"üåê URL atual: {driver.current_url}")
        print(f"üìÑ T√≠tulo da p√°gina: {driver.title}")
        
        # Verificar se h√° elementos de combust√≠vel
        print("\nüîç Procurando elementos relacionados a combust√≠vel...")
        
        # Estrat√©gia 1: Procurar por texto "combust√≠vel"
        try:
            elementos_combustivel = driver.find_elements(By.XPATH, "//*[contains(text(), 'combust√≠vel') or contains(text(), 'Combust√≠vel')]")
            print(f"‚úÖ Elementos com 'combust√≠vel' encontrados: {len(elementos_combustivel)}")
            for i, elem in enumerate(elementos_combustivel[:3]):
                print(f"   {i+1}: {elem.text[:100]}")
        except:
            print("‚ùå Nenhum elemento com 'combust√≠vel' encontrado")
        
        # Estrat√©gia 2: Procurar por "Flex" ou "Gasolina"
        try:
            elementos_flex = driver.find_elements(By.XPATH, "//*[contains(text(), 'Flex') or contains(text(), 'Gasolina')]")
            print(f"‚úÖ Elementos com 'Flex' ou 'Gasolina' encontrados: {len(elementos_flex)}")
            for i, elem in enumerate(elementos_flex[:3]):
                print(f"   {i+1}: {elem.text[:100]}")
        except:
            print("‚ùå Nenhum elemento com 'Flex' ou 'Gasolina' encontrado")
        
        # Estrat√©gia 3: Procurar por bot√µes
        try:
            botoes = driver.find_elements(By.TAG_NAME, "button")
            print(f"‚úÖ Bot√µes encontrados: {len(botoes)}")
            for i, botao in enumerate(botoes[:5]):
                print(f"   {i+1}: {botao.text[:50]}")
        except:
            print("‚ùå Nenhum bot√£o encontrado")
        
        # Estrat√©gia 4: Procurar por inputs
        try:
            inputs = driver.find_elements(By.TAG_NAME, "input")
            print(f"‚úÖ Inputs encontrados: {len(inputs)}")
            for i, inp in enumerate(inputs[:5]):
                print(f"   {i+1}: type={inp.get_attribute('type')}, placeholder={inp.get_attribute('placeholder')}, id={inp.get_attribute('id')}")
        except:
            print("‚ùå Nenhum input encontrado")
        
        # Estrat√©gia 5: Verificar se h√° elementos de estimativa
        try:
            elementos_estimativa = driver.find_elements(By.XPATH, "//*[contains(text(), 'estimativa') or contains(text(), 'inicial') or contains(text(), 'carrossel')]")
            print(f"‚úÖ Elementos de estimativa ainda presentes: {len(elementos_estimativa)}")
            for i, elem in enumerate(elementos_estimativa[:3]):
                print(f"   {i+1}: {elem.text[:100]}")
        except:
            print("‚ùå Nenhum elemento de estimativa encontrado")
        
        # Salvar HTML da p√°gina para an√°lise
        with open("tela6_analise_detalhada.html", "w", encoding="utf-8") as f:
            f.write(driver.page_source)
        print("üíæ HTML da p√°gina salvo em 'tela6_analise_detalhada.html'")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao analisar Tela 6: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîç **AN√ÅLISE DETALHADA DA TELA 6**")
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar driver
        driver, temp_dir = configurar_driver()
        if not driver:
            return
        
        # Carregar par√¢metros
        parametros = carregar_parametros()
        if not parametros:
            print("‚ùå Falha ao carregar par√¢metros")
            return
        
        # Navegar at√© Tela 5
        if not navegar_ate_tela5(driver):
            print("‚ùå Falha ao navegar at√© Tela 5")
            return
        
        # Analisar Tela 6
        analisar_tela6(driver)
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        
    finally:
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            import shutil
            shutil.rmtree(temp_dir)

if __name__ == "__main__":
    main()
