#!/usr/bin/env python3
"""
EXECUTAR RPA IMEDIATO PLAYWRIGHT - VERS√ÉO v3.7.0.2
Implementa√ß√£o completa do RPA usando Playwright com Sistema de Exception Handler

DESCRI√á√ÉO:
- Migra√ß√£o completa do Selenium para Playwright
- Sistema de Exception Handler robusto
- Telas 1-15 implementadas e testadas
- Captura de dados dos planos de seguro
- Estrutura de retorno padronizada

üéØ IMPLEMENTA√á√ÉO SELETOR ESPEC√çFICO CARDS ESTIMATIVA (09/09/2025):
- Substitui√ß√£o div.bg-primary por div[role="group"][aria-roledescription="slide"]
- Sistema de fallback robusto com m√∫ltiplas estrat√©gias
- Estrat√©gia h√≠brida: espec√≠fico + fallbacks de compatibilidade
- Fun√ß√µes auxiliares: aguardar_cards_estimativa_playwright() e localizar_cards_estimativa_playwright()
- Melhoria de estabilidade regional (Brasil + Portugal)
- Documenta√ß√£o completa da implementa√ß√£o

üîÑ IMPLEMENTA√á√ÉO SELETOR ESPEC√çFICO BOT√ÉO CARRO (09/09/2025):
- Substitui√ß√£o button.group por button:has(img[alt="Icone car"])
- Sistema de fallback robusto com m√∫ltiplas estrat√©gias
- Estrat√©gia h√≠brida: espec√≠fico + fallbacks de compatibilidade
- Teste completo bem-sucedido (dados gerados √†s 14:20)
- Documenta√ß√£o completa da implementa√ß√£o

üîÑ ATUALIZA√á√ÉO DE COMPATIBILIDADE REGIONAL (08/09/2025):
- Substitui√ß√£o de seletores gen√©ricos por espec√≠ficos na Tela 13
- Resolu√ß√£o de problema de falha em Portugal
- Melhoria de estabilidade regional (Brasil + Portugal)
- Documenta√ß√£o completa das mudan√ßas realizadas

AUTOR: Luciano Otero
DATA: 2025-09-09
VERS√ÉO: v3.7.0.2 (Seletor Espec√≠fico Cards Estimativa)
STATUS: Implementa√ß√£o completa com Exception Handler + Compatibilidade Regional + Seletores Espec√≠ficos
"""

import json
import time
import re
import os
import sys
import traceback
import argparse
from datetime import datetime
from typing import Dict, Any, Optional, Union
from playwright.sync_api import sync_playwright, Page, Browser, BrowserContext

# Importar Sistema de Retorno Estruturado
from utils.retorno_estruturado import (
    RetornoEstruturado,
    criar_retorno_sucesso,
    criar_retorno_erro,
    criar_retorno_warning,
    validar_retorno_estruturado
)

# Importar Sistema de Progresso em Tempo Real
from utils.progress_realtime import ProgressTracker

# Importar Sistema de Timeout Inteligente (opcional)
try:
    from utils.smart_timeout import SmartTimeout
    TIMEOUT_SYSTEM_AVAILABLE = True
except ImportError:
    TIMEOUT_SYSTEM_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de timeout n√£o dispon√≠vel - usando timeouts padr√£o")

# Importar Sistema de Logger Avan√ßado (opcional)
try:
    from utils.logger_rpa import RPALogger, setup_logger, log_info, log_error, log_success
    LOGGER_SYSTEM_AVAILABLE = True
except ImportError:
    LOGGER_SYSTEM_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de logger n√£o dispon√≠vel - usando logs padr√£o")

# Importar Sistema de Comunica√ß√£o Bidirecional (opcional)
try:
    from utils.bidirectional_integration_wrapper import execute_rpa_with_bidirectional_control
    BIDIRECTIONAL_SYSTEM_AVAILABLE = True
except ImportError:
    BIDIRECTIONAL_SYSTEM_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de comunica√ß√£o bidirecional n√£o dispon√≠vel - executando sem controle remoto")

# Importar Sistema de Valida√ß√£o de Par√¢metros Avan√ßado (opcional)
try:
    from utils.validacao_parametros import ValidadorParametros, ValidacaoParametrosError
    VALIDATION_SYSTEM_AVAILABLE = True
except ImportError:
    VALIDATION_SYSTEM_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de valida√ß√£o avan√ßado n√£o dispon√≠vel - usando valida√ß√£o b√°sica")

# Importar Sistema de Health Check Ultra-Conservador (opcional)
try:
    from utils.health_check_conservative import ConservativeHealthChecker
    HEALTH_CHECK_AVAILABLE = True
except ImportError:
    HEALTH_CHECK_AVAILABLE = False
    print("‚ö†Ô∏è Sistema de health check n√£o dispon√≠vel - continuando sem verifica√ß√£o")


# ========================================
# SISTEMA DE ARGUMENTOS DE LINHA DE COMANDO
# ========================================

def processar_argumentos():
    """
    Processa argumentos de linha de comando de forma segura
    """
    parser = argparse.ArgumentParser(
        description="EXECUTAR RPA IMEDIATO PLAYWRIGHT - VERS√ÉO PRODU√á√ÉO",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
EXEMPLOS DE USO:
  python executar_rpa_imediato_playwright.py
  python executar_rpa_imediato_playwright.py --help
  python executar_rpa_imediato_playwright.py --version
  python executar_rpa_imediato_playwright.py --docs completa
  python executar_rpa_imediato_playwright.py --docs json
  python executar_rpa_imediato_playwright.py --docs php
  python executar_rpa_imediato_playwright.py --docs params

DOCUMENTA√á√ÉO:
  --docs completa: Documenta√ß√£o completa do sistema
  --docs json: Documenta√ß√£o dos JSONs de sa√≠da
  --docs php: Guia espec√≠fico para desenvolvedores PHP
  --docs params: Descri√ß√£o dos par√¢metros JSON

SISTEMA BIDIRECIONAL:
  Controle remoto via HTTP dispon√≠vel na porta 8080
  Endpoints: /status (GET) e /command (POST)
  Comandos: PAUSE, RESUME, CANCEL
  Fallback autom√°tico se sistema n√£o dispon√≠vel

SISTEMA DE HEALTH CHECK:
  Verifica√ß√£o autom√°tica de sa√∫de do sistema antes da execu√ß√£o
  Valida√ß√£o de arquivos essenciais, Python, recursos e configura√ß√£o
  Detec√ß√£o autom√°tica de ambiente (Windows/Linux)
  Execu√ß√£o n√£o-bloqueante com fallback garantido
  Documenta√ß√£o completa: docs/HEALTH_CHECK_IMPLEMENTATION_REPORT.md

VALIDA√á√ÉO RIGOROSA DE PAR√ÇMETROS:
  ‚ö†Ô∏è EXECU√á√ÉO INTERROMPIDA se par√¢metros inv√°lidos detectados
  Valida√ß√£o de campos obrigat√≥rios, tipos de dados e formatos
  Valida√ß√£o de CPF, CEP, email, celular (11 d√≠gitos), placa
  Valida√ß√£o de valores permitidos (combust√≠vel, sexo, etc.)
  Retorna erro detalhado com par√¢metros inv√°lidos identificados
  N√£o h√° fallback - execu√ß√£o √© interrompida imediatamente

ARQUIVOS GERADOS:
  - temp/progress_status.json: Progresso em tempo real
  - dados_planos_seguro_YYYYMMDD_HHMMSS.json: Dados finais
  - temp/json_compreensivo_tela_5_*.json: Dados intermedi√°rios
  - temp/retorno_intermediario_carrossel_*.json: Dados brutos Tela 5
  - temp/dados_tela_5_*.json: Metadados da captura
  - logs/bidirectional.log: Logs do sistema bidirecional

STATUS CODES:
  - 9001: Sucesso completo
  - 9002-9999: C√≥digos de erro espec√≠ficos por tela
        """
    )
    
    parser.add_argument(
        '--version', 
        action='version', 
        version='%(prog)s v3.1.6'
    )
    
    parser.add_argument(
        '--config', 
        type=str, 
        default='parametros.json',
        help='Arquivo de configura√ß√£o (padr√£o: parametros.json)'
    )
    
    parser.add_argument(
        '--docs',
        type=str,
        choices=['completa', 'json', 'php', 'params'],
        help='Exibe documenta√ß√£o espec√≠fica (completa/json/php/params)'
    )
    
    return parser.parse_args()


# ========================================
# SISTEMA DE DOCUMENTA√á√ÉO
# ========================================

def exibir_documentacao(tipo: str = "completa"):
    """
    Exibe documenta√ß√£o baseada no tipo solicitado
    """
    if tipo == "completa":
        print("""
üöÄ DOCUMENTA√á√ÉO COMPLETA - SISTEMA RPA IMEDIATO SEGUROS
=======================================================

üìã VIS√ÉO GERAL DO SISTEMA
=========================

O Sistema RPA Imediato Seguros √© uma automa√ß√£o completa para cota√ß√£o de seguros
automotivos no sistema T√¥ Segurado. Executa 15 telas sequencialmente, capturando
dados em tempo real e gerando JSONs estruturados para integra√ß√£o com PHP.

‚úÖ FUNCIONALIDADES PRINCIPAIS
=============================

‚Ä¢ AUTOMA√á√ÉO COMPLETA: Navega√ß√£o em 15 telas, preenchimento autom√°tico
‚Ä¢ PROGRESSO EM TEMPO REAL: Monitoramento via temp/progress_status.json
‚Ä¢ DADOS ESTRUTURADOS: JSONs padronizados para integra√ß√£o
‚Ä¢ SISTEMA DE RETORNO: C√≥digos 9001-9999, estrutura consistente
‚Ä¢ INTEGRA√á√ÉO COM PHP: Arquivos prontos para consumo
‚Ä¢ HEALTH CHECK: Verifica√ß√£o autom√°tica de sa√∫de do sistema

üìä ARQUIVOS GERADOS
==================

1. temp/progress_status.json - Monitoramento em tempo real
2. dados_planos_seguro_*.json - Dados finais da cota√ß√£o
3. temp/json_compreensivo_tela_5_*.json - Dados intermedi√°rios
4. temp/retorno_intermediario_carrossel_*.json - Dados brutos
5. temp/dados_tela_5_*.json - Metadados

üõ°Ô∏è SISTEMA DE HEALTH CHECK
==========================

O sistema inclui verifica√ß√£o autom√°tica de sa√∫de antes da execu√ß√£o:

‚Ä¢ VERIFICA√á√ÉO DE ARQUIVOS: Valida√ß√£o de arquivos essenciais
‚Ä¢ VERIFICA√á√ÉO PYTHON: Vers√£o m√≠nima 3.8 e m√≥dulos necess√°rios
‚Ä¢ VERIFICA√á√ÉO RECURSOS: Espa√ßo em disco e permiss√µes de escrita
‚Ä¢ VERIFICA√á√ÉO CONFIGURA√á√ÉO: Valida√ß√£o do parametros.json
‚Ä¢ DETEC√á√ÉO AMBIENTE: Identifica√ß√£o autom√°tica Windows/Linux
‚Ä¢ EXECU√á√ÉO N√ÉO-BLOQUEANTE: Fallback garantido se problemas detectados

üìñ DOCUMENTA√á√ÉO COMPLETA:
  docs/HEALTH_CHECK_IMPLEMENTATION_REPORT.md

üéØ STATUS CODES: 9001 (sucesso) - 9002-9999 (erros espec√≠ficos)

üìù EXEMPLOS DE USO:
  python executar_rpa_imediato_playwright.py
  python executar_rpa_imediato_playwright.py --docs json
  python executar_rpa_imediato_playwright.py --docs php
  python executar_rpa_imediato_playwright.py --docs params
        """)
    
    elif tipo == "json":
        print("""
üìä DOCUMENTA√á√ÉO DOS JSONS DE SA√çDA
==================================

üéØ VIS√ÉO GERAL DOS JSONS
=======================

O sistema gera 5 tipos de arquivos JSON para integra√ß√£o com PHP:

1. temp/progress_status.json - PROGRESSO EM TEMPO REAL
   Estrutura: timestamp, etapa_atual, percentual, status, tempo_decorrido

2. dados_planos_seguro_*.json - DADOS FINAIS
   Estrutura: plano_recomendado, plano_alternativo com valores e coberturas

3. temp/json_compreensivo_tela_5_*.json - DADOS INTERMEDI√ÅRIOS
   Estrutura: metadata, resumo_executivo, coberturas_detalhadas

4. temp/retorno_intermediario_carrossel_*.json - DADOS BRUTOS
   Estrutura: dados_brutos, metadados_captura

5. temp/dados_tela_5_*.json - METADADOS
   Estrutura: timestamp, tela, metadados

üîß EXEMPLO PHP B√ÅSICO:
```php
$progress = json_decode(file_get_contents('temp/progress_status.json'), true);
$planos = json_decode(file_get_contents('dados_planos_seguro_*.json'), true);
```
        """)
    
    elif tipo == "php":
        print("""
ÔøΩÔøΩ GUIA DE INTEGRA√á√ÉO PHP
=========================

üéØ VIS√ÉO GERAL PARA DESENVOLVEDORES PHP
=======================================

O sistema gera JSONs estruturados que podem ser consumidos diretamente
por fun√ß√µes PHP nativas (json_decode).

üìã ARQUIVOS PRINCIPAIS PARA PHP
===============================

1. temp/progress_status.json - Monitoramento em tempo real
2. dados_planos_seguro_*.json - Dados finais da cota√ß√£o
3. temp/json_compreensivo_tela_5_*.json - Dados intermedi√°rios

üîÑ EXEMPLOS PR√ÅTICOS PHP
=======================

MONITORAMENTO:
```php
$progress = json_decode(file_get_contents('temp/progress_status.json'), true);
echo "Etapa: {$progress['etapa_atual']}/15 ({$progress['percentual']}%)";
```

CAPTURA DE PLANOS:
```php
$planos = json_decode(file_get_contents('dados_planos_seguro_*.json'), true);
$valor_recomendado = $planos['plano_recomendado']['valor'];
```

VERIFICA√á√ÉO DE STATUS:
```php
if ($progress['etapa_atual'] == 15 && $progress['percentual'] == 100.0) {
    echo "RPA conclu√≠do com sucesso!";
}
```

üîß TRATAMENTO DE ERROS:
```php
$dados = json_decode($conteudo, true);
if (json_last_error() !== JSON_ERROR_NONE) {
    throw new Exception('JSON inv√°lido: ' . json_last_error_msg());
}
```
        """)
    
    elif tipo == "params":
        print("""
üìã DESCRI√á√ÉO DOS PAR√ÇMETROS JSON
================================

O arquivo parametros.json cont√©m todas as configura√ß√µes necess√°rias:

üîß SE√á√ÉO: CONFIGURA√á√ÉO
---------------------
‚Ä¢ log (boolean): Ativa/desativa logs
‚Ä¢ display (boolean): Exibe mensagens
‚Ä¢ tempo_estabilizacao (integer): Tempo de espera
‚Ä¢ tempo_carregamento (integer): Tempo de carregamento

üîê SE√á√ÉO: AUTENTICA√á√ÉO
---------------------
‚Ä¢ email_login (string): Email de acesso
‚Ä¢ senha_login (string): Senha de acesso

üöó SE√á√ÉO: DADOS DO VE√çCULO
-------------------------
‚Ä¢ placa (string): Placa do ve√≠culo
‚Ä¢ marca (string): Marca do ve√≠culo
‚Ä¢ modelo (string): Modelo do ve√≠culo
‚Ä¢ ano (string): Ano de fabrica√ß√£o

üë§ SE√á√ÉO: DADOS PESSOAIS
-----------------------
‚Ä¢ nome (string): Nome completo
‚Ä¢ cpf (string): CPF do segurado
‚Ä¢ email (string): Email de contato
‚Ä¢ celular (string): N√∫mero de celular

üè† SE√á√ÉO: RESID√äNCIA
-------------------
‚Ä¢ cep (string): CEP do endere√ßo
‚Ä¢ garagem_residencia (boolean): Garagem na resid√™ncia
‚Ä¢ portao_eletronico (string): Tipo de port√£o

üìù EXEMPLO DE USO:
  python executar_rpa_imediato_playwright.py --config meu_parametros.json
        """)


# ========================================
# SISTEMA DE EXCEPTION HANDLER
# ========================================

class RPAException(Exception):
    """
    Exce√ß√£o customizada para o RPA
    """
    def __init__(self, message: str, tela: str = None, erro_original: Exception = None):
        self.message = message
        self.tela = tela
        self.erro_original = erro_original
        super().__init__(self.message)

class ExceptionHandler:
    """
    Sistema robusto de tratamento de exce√ß√µes para o RPA
    """
    
    def __init__(self):
        self.erros_capturados = []
        self.warnings_capturados = []
        self.tela_atual = None
    
    def capturar_excecao(self, erro: Exception, tela: str = None, contexto: str = None) -> Dict[str, Any]:
        """
        Captura e formata uma exce√ß√£o de forma estruturada
        
        PAR√ÇMETROS:
            erro: Exception - Exce√ß√£o capturada
            tela: str - Nome da tela onde ocorreu o erro
            contexto: str - Contexto adicional do erro
            
        RETORNO:
            dict: Dicion√°rio estruturado com informa√ß√µes do erro
        """
        timestamp = datetime.now().isoformat()
        
        # Extrair informa√ß√µes detalhadas do erro
        tipo_erro = type(erro).__name__
        mensagem_erro = str(erro)
        traceback_completo = traceback.format_exc()
        
        # Determinar severidade do erro
        severidade = self._determinar_severidade(erro)
        
        # Criar estrutura de erro
        erro_estruturado = {
            "timestamp": timestamp,
            "tipo": tipo_erro,
            "mensagem": mensagem_erro,
            "tela": tela or self.tela_atual,
            "contexto": contexto,
            "severidade": severidade,
            "traceback": traceback_completo,
            "recomendacao": self._gerar_recomendacao(erro, tela)
        }
        
        # Adicionar √† lista de erros
        self.erros_capturados.append(erro_estruturado)
        
        # Log do erro
        self._log_erro(erro_estruturado)
        
        return erro_estruturado
    
    def _determinar_severidade(self, erro: Exception) -> str:
        """
        Determina a severidade do erro baseado no tipo
        """
        if isinstance(erro, (TimeoutError, ConnectionError)):
            return "CR√çTICO"
        elif isinstance(erro, (ValueError, TypeError)):
            return "ALTO"
        elif isinstance(erro, (FileNotFoundError, PermissionError)):
            return "M√âDIO"
        else:
            return "BAIXO"
    
    def _gerar_recomendacao(self, erro: Exception, tela: str = None) -> str:
        """
        Gera recomenda√ß√£o baseada no tipo de erro
        """
        if isinstance(erro, TimeoutError):
            return f"Verificar conectividade e tentar novamente. Tela: {tela}"
        elif isinstance(erro, ValueError):
            return f"Verificar par√¢metros de entrada. Tela: {tela}"
        elif "element not found" in str(erro).lower():
            return f"Elemento n√£o encontrado. Verificar seletor. Tela: {tela}"
        elif "timeout" in str(erro).lower():
            return f"Timeout detectado. Aumentar tempo de espera. Tela: {tela}"
        else:
            return f"Erro gen√©rico. Verificar logs detalhados. Tela: {tela}"
    
    def _log_erro(self, erro_estruturado: Dict[str, Any]):
        """
        Faz log do erro de forma formatada
        """
        timestamp = erro_estruturado["timestamp"]
        tela = erro_estruturado["tela"]
        tipo = erro_estruturado["tipo"]
        mensagem = erro_estruturado["mensagem"]
        severidade = erro_estruturado["severidade"]
        
        print(f"\n{'='*80}")
        print(f"üö® ERRO CAPTURADO - {severidade}")
        print(f"{'='*80}")
        print(f"‚è∞ Timestamp: {timestamp}")
        print(f"üì± Tela: {tela}")
        print(f"üîç Tipo: {tipo}")
        print(f"üí¨ Mensagem: {mensagem}")
        print(f"üí° Recomenda√ß√£o: {erro_estruturado['recomendacao']}")
        print(f"{'='*80}")
    
    def capturar_warning(self, mensagem: str, tela: str = None, contexto: str = None):
        """
        Captura um warning (n√£o √© erro cr√≠tico)
        """
        timestamp = datetime.now().isoformat()
        
        warning = {
            "timestamp": timestamp,
            "mensagem": mensagem,
            "tela": tela or self.tela_atual,
            "contexto": contexto,
            "tipo": "WARNING"
        }
        
        self.warnings_capturados.append(warning)
        
        print(f"‚ö†Ô∏è WARNING - {tela}: {mensagem}")
    
    def definir_tela_atual(self, tela: str):
        """
        Define a tela atual para contexto de erros
        """
        self.tela_atual = tela
    
    def obter_resumo_erros(self) -> Dict[str, Any]:
        """
        Retorna resumo dos erros capturados
        """
        return {
            "total_erros": len(self.erros_capturados),
            "total_warnings": len(self.warnings_capturados),
            "erros_criticos": len([e for e in self.erros_capturados if e["severidade"] == "CR√çTICO"]),
            "erros_altos": len([e for e in self.erros_capturados if e["severidade"] == "ALTO"]),
            "erros_medios": len([e for e in self.erros_capturados if e["severidade"] == "M√âDIO"]),
            "erros_baixos": len([e for e in self.erros_capturados if e["severidade"] == "BAIXO"]),
            "ultimo_erro": self.erros_capturados[-1] if self.erros_capturados else None
        }
    
    def limpar_erros(self):
        """
        Limpa a lista de erros capturados
        """
        self.erros_capturados = []
        self.warnings_capturados = []

# Inst√¢ncia global do Exception Handler
exception_handler = ExceptionHandler()

# ========================================
# VARI√ÅVEIS GLOBAIS
# ========================================

# Flag para controlar se a Tela 15 foi detectada diretamente da Tela 13
tela_15_detectada = False

# ========================================
# FUN√á√ïES AUXILIARES
# ========================================

def exibir_mensagem(mensagem: str):
    """
    Exibe mensagem formatada com timestamp
    
    PAR√ÇMETROS:
        mensagem (str): Mensagem a ser exibida
    
    COMPORTAMENTO:
        1. Formata mensagem com timestamp
        2. Exibe no terminal
        3. Formato: [HH:MM:SS] mensagem
    """
    timestamp = time.strftime('%H:%M:%S')
    print(f"[{timestamp}] {mensagem}")

def carregar_parametros(arquivo_config: str = "parametros.json") -> Dict[str, Any]:
    """
    Carrega par√¢metros do arquivo JSON
    
    PAR√ÇMETROS:
        arquivo_config: str - Caminho para o arquivo de configura√ß√£o
        
    RETORNO:
        dict: Par√¢metros carregados
        
    EXCE√á√ïES:
        RPAException: Se n√£o conseguir carregar os par√¢metros
    """
    try:
        exception_handler.definir_tela_atual("CARREGAMENTO_PARAMETROS")
        
        if not os.path.exists(arquivo_config):
            raise RPAException(f"Arquivo de configura√ß√£o n√£o encontrado: {arquivo_config}")
        
        with open(arquivo_config, 'r', encoding='utf-8') as f:
            parametros = json.load(f)
        
        exibir_mensagem("‚úÖ Par√¢metros carregados com sucesso!")
        return parametros
        
    except json.JSONDecodeError as e:
        erro = exception_handler.capturar_excecao(e, "CARREGAMENTO_PARAMETROS", "JSON inv√°lido")
        raise RPAException("Erro ao decodificar JSON dos par√¢metros", "CARREGAMENTO_PARAMETROS", e)
        
    except Exception as e:
        erro = exception_handler.capturar_excecao(e, "CARREGAMENTO_PARAMETROS", "Erro gen√©rico")
        raise RPAException("Erro ao carregar par√¢metros", "CARREGAMENTO_PARAMETROS", e)

def obter_parametros_tempo(parametros: Dict[str, Any]) -> Dict[str, int]:
    """
    Extrai par√¢metros de tempo do arquivo de configura√ß√£o
    
    PAR√ÇMETROS:
        parametros: dict - Par√¢metros carregados
        
    RETORNO:
        dict: Dicion√°rio com par√¢metros de tempo
    """
    configuracao = parametros.get('configuracao', {})
    
    tempo_estabilizacao = configuracao.get('tempo_estabilizacao', 1)
    tempo_carregamento = configuracao.get('tempo_carregamento', 10)
    tempo_estabilizacao_tela5 = configuracao.get('tempo_estabilizacao_tela5', 2)
    tempo_carregamento_tela5 = configuracao.get('tempo_carregamento_tela5', 5)
    
    exibir_mensagem(f"‚öôÔ∏è Par√¢metros de tempo carregados:")
    exibir_mensagem(f"   - Estabiliza√ß√£o: {tempo_estabilizacao}s")
    exibir_mensagem(f"   - Carregamento: {tempo_carregamento}s")
    exibir_mensagem(f"   - Estabiliza√ß√£o Tela 5: {tempo_estabilizacao_tela5}s")
    exibir_mensagem(f"   - Carregamento Tela 5: {tempo_carregamento_tela5}s")
    
    return {
        'tempo_estabilizacao': tempo_estabilizacao,
        'tempo_carregamento': tempo_carregamento,
        'tempo_estabilizacao_tela5': tempo_estabilizacao_tela5,
        'tempo_carregamento_tela5': tempo_carregamento_tela5
    }

def validar_parametros_obrigatorios(parametros: Dict[str, Any]) -> bool:
    """
    Valida se todos os par√¢metros obrigat√≥rios est√£o presentes
    
    PAR√ÇMETROS:
        parametros: dict - Par√¢metros a serem validados
        
    RETORNO:
        bool: True se v√°lido, False caso contr√°rio
        
    EXCE√á√ïES:
        RPAException: Se par√¢metros obrigat√≥rios estiverem faltando
    """
    try:
        exception_handler.definir_tela_atual("VALIDACAO_PARAMETROS")
        
        parametros_obrigatorios = [
            "url", "placa", "marca", "modelo", "ano", "combustivel", 
            "cep", "uso_veiculo", "veiculo_segurado", "nome", "cpf", 
            "email", "celular", "autenticacao"
        ]
        
        parametros_faltando = []
        
        for param in parametros_obrigatorios:
            if param not in parametros:
                parametros_faltando.append(param)
            elif not parametros[param]:
                parametros_faltando.append(f"{param} (vazio)")
        
        if parametros_faltando:
            erro_msg = f"Par√¢metros obrigat√≥rios faltando: {', '.join(parametros_faltando)}"
            exception_handler.capturar_warning(erro_msg, "VALIDACAO_PARAMETROS")
            return False
        
        # Validar subcampos de autentica√ß√£o
        if "autenticacao" in parametros:
            auth = parametros["autenticacao"]
            if "email_login" not in auth or "senha_login" not in auth:
                exception_handler.capturar_warning("Campos de autentica√ß√£o incompletos", "VALIDACAO_PARAMETROS")
                return False
        
        exibir_mensagem("‚úÖ Todos os par√¢metros obrigat√≥rios est√£o presentes!")
        return True
        
    except Exception as e:
        erro = exception_handler.capturar_excecao(e, "VALIDACAO_PARAMETROS", "Erro na valida√ß√£o")
        raise RPAException("Erro ao validar par√¢metros", "VALIDACAO_PARAMETROS", e)

def salvar_dados_planos(dados_planos: Dict[str, Any], prefixo: str = "dados_planos_seguro"):
    """
    Salva os dados dos planos em arquivo JSON
    
    PAR√ÇMETROS:
        dados_planos: dict - Dados dos planos a serem salvos
        prefixo: str - Prefixo do nome do arquivo
        
    RETORNO:
        str: Caminho do arquivo salvo
    """
    try:
        exception_handler.definir_tela_atual("SALVAMENTO_DADOS")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"{prefixo}_{timestamp}.json"
        
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            json.dump(dados_planos, f, indent=2, ensure_ascii=False)
        
        exibir_mensagem(f"üíæ Dados salvos em: {nome_arquivo}")
        return nome_arquivo
        
    except Exception as e:
        erro = exception_handler.capturar_excecao(e, "SALVAMENTO_DADOS", "Erro ao salvar dados")
        raise RPAException("Erro ao salvar dados dos planos", "SALVAMENTO_DADOS", e)

# ========================================
# FUN√á√ÉO WRAPPER DE TIMEOUT SEGURO
# ========================================

def executar_com_timeout(smart_timeout, tela_num, funcao_tela, *args, **kwargs):
    """
    Wrapper seguro para executar telas com timeout inteligente
    N√£o modifica a l√≥gica original, apenas adiciona controle de timeout
    """
    if smart_timeout and smart_timeout.is_available():
        try:
            # Iniciar timer para a tela
            smart_timeout.start_timer(tela_num, f"Executando Tela {tela_num}")
            
            # Executar fun√ß√£o original
            resultado = funcao_tela(*args, **kwargs)
            
            # Limpar timer se sucesso
            smart_timeout.clear_timer(tela_num)
            return resultado
            
        except Exception as e:
            # Verificar se foi timeout
            if smart_timeout.check_timeout(tela_num):
                timeout_info = smart_timeout.handle_timeout(tela_num, str(e))
                exibir_mensagem(f"‚ö†Ô∏è Timeout detectado na Tela {tela_num}: {timeout_info['elapsed_seconds']:.1f}s")
                
                # Tentar retry se dispon√≠vel
                if smart_timeout.retry_with_backoff(tela_num):
                    exibir_mensagem(f"üîÑ Retry autom√°tico na Tela {tela_num} (tentativa {timeout_info['retries_remaining']})")
                    return executar_com_timeout(smart_timeout, tela_num, funcao_tela, *args, **kwargs)
                else:
                    exibir_mensagem(f"‚ùå M√°ximo de retries atingido na Tela {tela_num}")
            
            # Re-raise a exce√ß√£o original
            raise e
    else:
        # Fallback: executar sem timeout se sistema n√£o dispon√≠vel
        return funcao_tela(*args, **kwargs)


# ========================================
# FUN√á√ïES DE NAVEGA√á√ÉO DAS TELAS
# ========================================

def navegar_tela_1_playwright(page: Page) -> bool:
    """
    TELA 1: Sele√ß√£o do tipo de seguro (Carro)
    
    VERS√ÉO: v3.7.0.1
    IMPLEMENTA√á√ÉO: Substitui√ß√£o de seletor gen√©rico por espec√≠fico
    DATA: 09/09/2025
    STATUS: ‚úÖ IMPLEMENTADO
    """
    try:
        exception_handler.definir_tela_atual("TELA_1")
        exibir_mensagem("üì± TELA 1: Selecionando tipo de seguro...")
        
        # Aguardar carregamento inicial da p√°gina
        page.wait_for_selector("button", timeout=5000)
        
        # ESTRAT√âGIA H√çBRIDA: Espec√≠fico + Fallback
        seletores_carro = [
            # PRIM√ÅRIO: Seletor espec√≠fico por alt da imagem (NOVO)
            'button:has(img[alt="Icone car"])',
            
            # SECUND√ÅRIO: Seletor espec√≠fico por src da imagem
            'button:has(img[src="/insurance-icons/car.svg"])',
            
            # TERCI√ÅRIO: Seletor espec√≠fico por texto
            'button:has-text("Carro")',
            
            # FALLBACK: Seletor gen√©rico original (COMPATIBILIDADE)
            'button.group'
        ]
        
        botao_carro = None
        seletor_usado = None
        
        # Tentar cada seletor em ordem de prioridade
        for seletor in seletores_carro:
            try:
                botao_carro = page.locator(seletor).first
                if botao_carro.is_visible():
                    seletor_usado = seletor
                    exibir_mensagem(f"‚úÖ Bot√£o 'Carro' encontrado com seletor: {seletor}")
                    break
            except Exception as e:
                continue
        
        if botao_carro and botao_carro.is_visible():
            botao_carro.click()
            exibir_mensagem("‚úÖ Bot√£o 'Carro' clicado com sucesso")
            
            # Log do seletor usado para monitoramento
            if seletor_usado.startswith('button:has'):
                exibir_mensagem(f"üéØ Seletor espec√≠fico usado: {seletor_usado}")
            else:
                exibir_mensagem(f"‚ö†Ô∏è Fallback usado: {seletor_usado}")
            
            # Aguardar transi√ß√£o para a pr√≥xima tela
            page.wait_for_selector("#placaTelaDadosPlaca", timeout=5000)
            return True
        else:
            exception_handler.capturar_warning("Bot√£o 'Carro' n√£o encontrado com nenhum seletor", "TELA_1")
            return False
            
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_1", "Erro ao selecionar Carro")
        return False

def navegar_tela_2_playwright(page: Page, placa: str) -> bool:
    """
    TELA 2: Inser√ß√£o da placa
    """
    try:
        exception_handler.definir_tela_atual("TELA_2")
        exibir_mensagem(f"üì± TELA 2: Inserindo placa {placa}...")
        
        campo_placa = page.locator("#placaTelaDadosPlaca").first
        campo_placa.click()
        campo_placa.fill(placa)
        
        exibir_mensagem(f"‚úÖ Placa {placa} inserida com sucesso")
        
        botao_continuar = page.locator("#gtm-telaDadosAutoCotarComPlacaContinuar").first
        botao_continuar.click()
        
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        # Aguardar transi√ß√£o para a pr√≥xima tela
        page.wait_for_selector("#gtm-telaInfosAutoContinuar", timeout=5000)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_2", f"Erro ao inserir placa {placa}")
        return False

def navegar_tela_3_playwright(page: Page) -> bool:
    """
    TELA 3: Confirma√ß√£o do ve√≠culo
    """
    try:
        exception_handler.definir_tela_atual("TELA_3")
        exibir_mensagem("üì± TELA 3: Confirmando informa√ß√µes do ve√≠culo...")
        
        botao_continuar = page.locator("#gtm-telaInfosAutoContinuar").first
        
        if botao_continuar.is_visible():
            botao_continuar.click()
            exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            page.wait_for_selector("#gtm-telaRenovacaoVeiculoContinuar", timeout=5000)
            return True
        else:
            exception_handler.capturar_warning("Bot√£o 'Continuar' n√£o encontrado", "TELA_3")
            return False
            
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_3", "Erro ao confirmar ve√≠culo")
        return False

def navegar_tela_4_playwright(page: Page, veiculo_segurado: str) -> bool:
    """
    TELA 4: Ve√≠culo segurado
    """
    try:
        exception_handler.definir_tela_atual("TELA_4")
        exibir_mensagem("üì± TELA 4: Respondendo se ve√≠culo est√° segurado...")
        
        if veiculo_segurado == "N√£o":
            botao_nao = page.locator("#gtm-telaRenovacaoVeiculoContinuar").first
            botao_nao.click()
            exibir_mensagem("‚úÖ Resposta 'N√£o' selecionada com sucesso")
        else:
            exception_handler.capturar_warning(f"Op√ß√£o '{veiculo_segurado}' n√£o implementada", "TELA_4")
            return False
        
        # Aguardar transi√ß√£o para a pr√≥xima tela
        page.wait_for_selector("div.bg-primary", timeout=5000)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_4", f"Erro ao responder ve√≠culo segurado: {veiculo_segurado}")
        return False

def aguardar_cards_estimativa_playwright(page: Page, timeout: int = 10000) -> bool:
    """
    Aguarda carregamento dos cards de estimativa com estrat√©gia h√≠brida robusta
    
    ESTRAT√âGIA H√çBRIDA v3.7.0.2:
    1. div[role="group"][aria-roledescription="slide"] - ESPEC√çFICO (sem√¢ntico)
    2. div:has(p:has-text("Cobertura")):has(span:has-text("R$")) - CONTE√öDO
    3. div.border-primary.rounded-xl:has(.bg-primary) - LAYOUT
    4. div.bg-primary - FALLBACK ATUAL (compatibilidade)
    """
    seletores_prioridade = [
        'div[role="group"][aria-roledescription="slide"]',  # ‚Üê ESPEC√çFICO
        'div:has(p:has-text("Cobertura")):has(span:has-text("R$"))',  # ‚Üê CONTE√öDO
        'div.border-primary.rounded-xl:has(.bg-primary)',  # ‚Üê LAYOUT
        'div.bg-primary'  # ‚Üê FALLBACK ATUAL
    ]
    
    timeout_por_seletor = timeout // len(seletores_prioridade)
    
    for i, seletor in enumerate(seletores_prioridade):
        try:
            exibir_mensagem(f"üîç Tentativa {i+1}/{len(seletores_prioridade)} - Seletor: {seletor}")
            page.wait_for_selector(seletor, timeout=timeout_por_seletor)
            exibir_mensagem(f"‚úÖ Cards encontrados com seletor: {seletor}")
            return True
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Seletor {i+1} falhou: {str(e)}")
            continue
    
    exibir_mensagem("‚ùå Nenhum seletor funcionou para encontrar os cards")
    return False

def localizar_cards_estimativa_playwright(page: Page):
    """
    Localiza cards de estimativa com estrat√©gia h√≠brida robusta
    
    ESTRAT√âGIA H√çBRIDA v3.7.0.2:
    1. div[role="group"][aria-roledescription="slide"] - ESPEC√çFICO (sem√¢ntico)
    2. div:has(p:has-text("Cobertura")):has(span:has-text("R$")) - CONTE√öDO
    3. div.border-primary.rounded-xl:has(.bg-primary) - LAYOUT
    4. div.bg-primary - FALLBACK ATUAL (compatibilidade)
    """
    seletores_prioridade = [
        'div[role="group"][aria-roledescription="slide"]',  # ‚Üê ESPEC√çFICO
        'div:has(p:has-text("Cobertura")):has(span:has-text("R$"))',  # ‚Üê CONTE√öDO
        'div.border-primary.rounded-xl:has(.bg-primary)',  # ‚Üê LAYOUT
        'div.bg-primary'  # ‚Üê FALLBACK ATUAL
    ]
    
    for i, seletor in enumerate(seletores_prioridade):
        try:
            elemento = page.locator(seletor)
            if elemento.count() > 0:
                exibir_mensagem(f"‚úÖ Cards localizados com seletor: {seletor} ({elemento.count()} encontrados)")
                return elemento
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Seletor {i+1} falhou: {str(e)}")
            continue
    
    exibir_mensagem("‚ùå Nenhum seletor funcionou para localizar os cards")
    return None

def navegar_tela_5_playwright(page: Page, parametros_tempo) -> bool:
    """
    TELA 5: Estimativa inicial - CAPTURA DE DADOS E RETORNO INTERMEDI√ÅRIO
    """
    try:
        exception_handler.definir_tela_atual("TELA_5")
        exibir_mensagem("üì± TELA 5: Aguardando carregamento da estimativa...")
        
        # Aguardar carregamento inicial da p√°gina
        # Este delay √© maior que as outras telas porque a Tela 5
        # precisa calcular estimativas em tempo real
        # v3.7.0.2: Estrat√©gia h√≠brida robusta para aguardar cards
        if not aguardar_cards_estimativa_playwright(page, 10000):
            exibir_mensagem("‚ùå Falha ao aguardar carregamento dos cards de estimativa")
            return False
        
        max_tentativas = 60  # Aumentado de 30 para 60
        tentativa = 0
        
        while tentativa < max_tentativas:
            exibir_mensagem(f"üîÑ Tentativa {tentativa + 1}/{max_tentativas} - Aguardando cards de cobertura...")
            
            # Verificar se os cards de cobertura apareceram
            # v3.7.0.2: Estrat√©gia h√≠brida robusta para localizar cards
            elemento_estimativa = localizar_cards_estimativa_playwright(page)
            if elemento_estimativa is not None and elemento_estimativa.count() > 0:
                exibir_mensagem(f"‚úÖ Elemento de estimativa encontrado: {elemento_estimativa.count()} cards")
                
                # Verificar se os cards ainda est√£o carregando (skeleton)
                card_text = elemento_estimativa.first.text_content().strip() if elemento_estimativa.first.text_content() else ""
                if "skeleton" not in card_text.lower() and len(card_text) > 10:
                    exibir_mensagem("‚úÖ Cards carregados completamente!")
                    break
                else:
                    exibir_mensagem("‚è≥ Cards ainda carregando (skeleton detectado)...")
            
            # Verificar se h√° elementos com pre√ßos (fallback)
            elementos_preco = page.locator("text=R$")
            if elementos_preco.count() > 0:
                exibir_mensagem(f"‚úÖ Elementos com pre√ßos encontrados: {elementos_preco.count()}")
                break
            
            # Verificar se o bot√£o "Continuar" apareceu (fallback)
            botao_continuar = page.locator("#gtm-telaEstimativaContinuarParaCotacaoFinal")
            if botao_continuar.count() > 0:
                exibir_mensagem("‚úÖ Bot√£o 'Continuar' encontrado")
                break
            
            # Aguardar elementos din√¢micos com espera espec√≠fica
            # v3.7.0.2: Estrat√©gia h√≠brida robusta para aguardar cards
            try:
                if aguardar_cards_estimativa_playwright(page, 2000):  # Aumentado para 2 segundos
                    break
            except Exception:
                try:
                    page.wait_for_selector("text=R$", timeout=2000)
                    break
                except Exception:
                    try:
                        page.wait_for_selector("#gtm-telaEstimativaContinuarParaCotacaoFinal", timeout=2000)
                        break
                    except Exception:
                        # Aguardar um pouco mais antes da pr√≥xima tentativa
                        time.sleep(2)
                        continue
            
            tentativa += 1
        
        if tentativa >= max_tentativas:
            exception_handler.capturar_warning("Elementos da estimativa n√£o carregaram completamente", "TELA_5")
            # N√£o retornar False aqui, continuar mesmo sem dados completos
        
        exibir_mensagem("‚úÖ Estimativa carregada com sucesso")
        
        # Aguardar um pouco mais para garantir que os dados est√£o carregados
        exibir_mensagem("‚è≥ Aguardando estabiliza√ß√£o dos dados...")
        time.sleep(5)
        
        # CAPTURAR DADOS DO CARROSSEL DE ESTIMATIVAS
        dados_carrossel = capturar_dados_carrossel_estimativas_playwright(page)
        
        # ========================================
        # JSON COMPREENSIVO - TELA 5
        # ========================================
        if dados_carrossel and dados_carrossel.get('coberturas_detalhadas') and len(dados_carrossel.get('coberturas_detalhadas', [])) > 0:
            # Criar JSON compreensivo com todas as informa√ß√µes da estimativa inicial
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # Extrair valores √∫nicos (remover duplicatas)
            coberturas_unicas = {}
            for cobertura in dados_carrossel['coberturas_detalhadas']:
                nome = cobertura.get('nome_cobertura', '')
                if nome not in coberturas_unicas:
                    coberturas_unicas[nome] = cobertura
            
            # Criar estrutura do JSON compreensivo
            json_compreensivo = {
                "metadata": {
                    "timestamp": datetime.now().isoformat(),
                    "tela": 5,
                    "nome_tela": "Estimativa Inicial",
                    "url": page.url,
                    "titulo_pagina": page.title(),
                    "versao_rpa": "2.0.0",
                    "autor": "Luciano Otero"
                },
                "resumo_executivo": {
                    "total_coberturas": len(coberturas_unicas),
                    "total_beneficios": len(dados_carrossel.get('beneficios_gerais', [])),
                    "coberturas_disponiveis": list(coberturas_unicas.keys())
                },
                "coberturas_detalhadas": [
                    {
                        "nome": nome,
                        "valores": cobertura.get('valores', {}),
                        "beneficios": cobertura.get('beneficios', []),
                        "total_beneficios": len(cobertura.get('beneficios', [])),
                        "texto_completo": cobertura.get('texto_completo', '')
                    }
                    for nome, cobertura in coberturas_unicas.items()
                ],
                "beneficios_gerais": dados_carrossel.get('beneficios_gerais', []),
                "dados_brutos": dados_carrossel
            }
            
            # Salvar JSON compreensivo
            json_compreensivo_path = f"temp/json_compreensivo_tela_5_{timestamp}.json"
            with open(json_compreensivo_path, 'w', encoding='utf-8') as f:
                json.dump(json_compreensivo, f, indent=2, ensure_ascii=False)
            
            # Exibir resumo do JSON compreensivo
            print("\n" + "="*80)
            print("üéØ JSON COMPREENSIVO - TELA 5 CRIADO COM SUCESSO!")
            print("="*80)
            print(f"üìÅ Arquivo: {json_compreensivo_path}")
            print(f"üìä Total de Coberturas √önicas: {len(coberturas_unicas)}")
            print(f"üéÅ Total de Benef√≠cios: {len(dados_carrossel.get('beneficios_gerais', []))}")
            
            # Exibir coberturas encontradas
            for nome, cobertura in coberturas_unicas.items():
                valores = cobertura.get('valores', {})
                de = valores.get('de', 'N/A')
                ate = valores.get('ate', 'N/A')
                print(f"üí∞ {nome}: {de} at√© {ate}")
            
            print("="*80)
            
            exibir_mensagem(f"üíæ **JSON COMPREENSIVO SALVO**: {json_compreensivo_path}")
        
        # RETORNO INTERMEDI√ÅRIO DOS DADOS DO CARROSSEL
        if dados_carrossel:
            exibir_mensagem("üéØ **RETORNO INTERMEDI√ÅRIO**: Dados do carrossel capturados com sucesso!")
            exibir_mensagem(f"üìä **COBERTURAS DETALHADAS**: {len(dados_carrossel['coberturas_detalhadas'])}")
            exibir_mensagem(f"üéÅ **BENEF√çCIOS GERAIS**: {len(dados_carrossel['beneficios_gerais'])}")
            exibir_mensagem(f"üí∞ **VALORES MONET√ÅRIOS**: {dados_carrossel['valores_encontrados']}")
            
            # Exibir detalhes das coberturas encontradas
            for i, cobertura in enumerate(dados_carrossel['coberturas_detalhadas']):
                exibir_mensagem(f"üìã **COBERTURA {i+1}**: {cobertura['nome_cobertura']}")
                if cobertura['valores']['de'] and cobertura['valores']['ate']:
                    exibir_mensagem(f"   üí∞ **VALORES**: {cobertura['valores']['de']} at√© {cobertura['valores']['ate']}")
                if cobertura['beneficios']:
                    beneficios_nomes = [b['nome'] for b in cobertura['beneficios']]
                    exibir_mensagem(f"   üéÅ **BENEF√çCIOS**: {', '.join(beneficios_nomes)}")
            
            # Salvar retorno intermedi√°rio em arquivo espec√≠fico
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            retorno_path = f"temp/retorno_intermediario_carrossel_{timestamp}.json"
            
            # Criar diret√≥rio temp se n√£o existir
            os.makedirs("temp", exist_ok=True)
            
            # Limpar dados para serializa√ß√£o JSON
            dados_limpos = {
                "timestamp": str(dados_carrossel.get("timestamp", "")),
                "tela": dados_carrossel.get("tela", 5),
                "nome_tela": str(dados_carrossel.get("nome_tela", "")),
                "url": str(dados_carrossel.get("url", "")),
                "titulo": str(dados_carrossel.get("titulo", "")),
                "coberturas_detalhadas": dados_carrossel.get("coberturas_detalhadas", []),
                "beneficios_gerais": dados_carrossel.get("beneficios_gerais", []),
                "valores_encontrados": dados_carrossel.get("valores_encontrados", 0),
                "seguradoras": dados_carrossel.get("seguradoras", []),
                "elementos_detectados": dados_carrossel.get("elementos_detectados", [])
            }
            
            with open(retorno_path, 'w', encoding='utf-8') as f:
                json.dump(dados_limpos, f, indent=2, ensure_ascii=False)
            
            exibir_mensagem(f"üíæ **RETORNO SALVO**: {retorno_path}")
            
            # Exibir retorno intermedi√°rio estruturado no terminal
            print("\n" + "="*60)
            print("üìã RETORNO INTERMEDI√ÅRIO - TELA 5")
            print("="*60)
            print(json.dumps(dados_limpos, indent=2, ensure_ascii=False))
            print("="*60)
            
        else:
            exibir_mensagem("‚ö†Ô∏è **AVISO**: N√£o foi poss√≠vel capturar dados do carrossel")
        
        # Clicar em Continuar
        exibir_mensagem("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        try:
            # Aguardar o bot√£o estar dispon√≠vel
            page.wait_for_selector("#gtm-telaEstimativaContinuarParaCotacaoFinal", timeout=10000)
            botao_continuar = page.locator("#gtm-telaEstimativaContinuarParaCotacaoFinal").first
            
            # Verificar se o bot√£o est√° vis√≠vel e clic√°vel
            if botao_continuar.is_visible():
                botao_continuar.click()
                exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            else:
                exibir_mensagem("‚ö†Ô∏è Bot√£o 'Continuar' n√£o est√° vis√≠vel, tentando clicar mesmo assim...")
                botao_continuar.click()
                exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao aguardar bot√£o Continuar: {str(e)}")
            exibir_mensagem("üîÑ Tentando seletor alternativo...")
            try:
                # Fallback para seletor por texto
                botao_continuar = page.locator("text=Continuar").first
                botao_continuar.click()
                exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com seletor alternativo")
            except Exception as e2:
                exibir_mensagem(f"‚ùå Falha ao clicar no bot√£o Continuar: {str(e2)}")
                return False
        
        # Aguardar transi√ß√£o para a pr√≥xima tela
        page.wait_for_selector("#gtm-telaItensAutoContinuar", timeout=5000)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_5", "Erro ao processar Tela 5")
        return False

def navegar_tela_6_playwright(page: Page, combustivel: str, kit_gas: bool, blindado: bool, financiado: bool) -> bool:
    """
    TELA 6: Itens do carro - SELE√á√ÉO DE COMBUST√çVEL E CHECKBOXES
    """
    try:
        exception_handler.definir_tela_atual("TELA_6")
        exibir_mensagem("üì± TELA 6: Aguardando carregamento...")
        
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            botao_continuar = page.locator("#gtm-telaItensAutoContinuar")
            if botao_continuar.count() > 0 and botao_continuar.first.is_visible():
                break
            # Aguardar carregamento da tela
            try:
                page.wait_for_selector("#gtm-telaItensAutoContinuar", timeout=1000)
                break
            except:
                continue
            tentativa += 1
        
        if tentativa >= max_tentativas:
            exception_handler.capturar_warning("Tela 6 n√£o carregou", "TELA_6")
            return False
        
        exibir_mensagem("‚úÖ Tela 6 carregada com sucesso")
        
        # Selecionar combust√≠vel
        exibir_mensagem(f"üì± TELA 6: Selecionando combust√≠vel {combustivel}...")
        
        mapeamento_combustivel = {
            "Flex": "1", "Gasolina": "2", "Alcool": "3", "Etanol": "3",
            "Diesel": "4", "H√≠brido": "5", "El√©trico": "6"
        }
        
        valor_radio = mapeamento_combustivel.get(combustivel)
        combustivel_selecionado = False
        
        if valor_radio:
            try:
                radio_combustivel = page.locator(f"input[name='tipoCombustivelTelaItens'][value='{valor_radio}']").first
                if radio_combustivel.is_visible():
                    radio_combustivel.click()
                    combustivel_selecionado = True
                    exibir_mensagem(f"‚úÖ Combust√≠vel {combustivel} selecionado com sucesso")
                else:
                    exception_handler.capturar_warning(f"Radio button para {combustivel} n√£o est√° vis√≠vel", "TELA_6")
            except Exception as e:
                exception_handler.capturar_warning(f"Erro ao selecionar {combustivel}: {str(e)}", "TELA_6")
        else:
            exception_handler.capturar_warning(f"Combust√≠vel '{combustivel}' n√£o mapeado", "TELA_6")
        
        if not combustivel_selecionado:
            exception_handler.capturar_warning(f"Combust√≠vel {combustivel} n√£o encontrado, continuando", "TELA_6")
        
        # Configurar checkboxes
        exibir_mensagem("üì± TELA 6: Configurando checkboxes...")
        
        # Kit Gas
        try:
            checkbox_kit_gas = page.locator('input[value="Kit G√°s"]').first
            if checkbox_kit_gas.is_visible():
                if kit_gas and not checkbox_kit_gas.is_checked():
                    checkbox_kit_gas.check()
                    exibir_mensagem("‚úÖ Checkbox Kit Gas: MARCADO")
                elif not kit_gas and checkbox_kit_gas.is_checked():
                    checkbox_kit_gas.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Kit Gas: DESMARCADO")
                else:
                    estado = "MARCADO" if kit_gas else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Kit Gas: {estado} (j√° estava correto)")
            else:
                exception_handler.capturar_warning("Checkbox Kit Gas n√£o encontrado", "TELA_6")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao configurar Kit Gas: {str(e)}", "TELA_6")
        
        # Blindado
        try:
            checkbox_blindado = page.locator('input[value="Blindado"]').first
            if checkbox_blindado.is_visible():
                if blindado and not checkbox_blindado.is_checked():
                    checkbox_blindado.check()
                    exibir_mensagem("‚úÖ Checkbox Blindado: MARCADO")
                elif not blindado and checkbox_blindado.is_checked():
                    checkbox_blindado.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Blindado: DESMARCADO")
                else:
                    estado = "MARCADO" if blindado else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Blindado: {estado} (j√° estava correto)")
            else:
                exception_handler.capturar_warning("Checkbox Blindado n√£o encontrado", "TELA_6")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao configurar Blindado: {str(e)}", "TELA_6")
        
        # Financiado
        try:
            checkbox_financiado = page.locator('input[value="Financiado"]').first
            if checkbox_financiado.is_visible():
                if financiado and not checkbox_financiado.is_checked():
                    checkbox_financiado.check()
                    exibir_mensagem("‚úÖ Checkbox Financiado: MARCADO")
                elif not financiado and checkbox_financiado.is_checked():
                    checkbox_financiado.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Financiado: DESMARCADO")
                else:
                    estado = "MARCADO" if financiado else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Financiado: {estado} (j√° estava correto)")
            else:
                exception_handler.capturar_warning("Checkbox Financiado n√£o encontrado", "TELA_6")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao configurar Financiado: {str(e)}", "TELA_6")
        
        # Clicar em Continuar
        botao_continuar.first.click()
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        # Aguardar transi√ß√£o para a pr√≥xima tela
        page.wait_for_selector("#enderecoTelaEndereco", timeout=5000)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_6", "Erro ao configurar itens do carro")
        return False

def navegar_tela_7_playwright(page: Page, cep: str) -> bool:
    """
    TELA 7: Endere√ßo de pernoite (CEP)
    """
    try:
        exception_handler.definir_tela_atual("TELA_7")
        exibir_mensagem("üì± TELA 7: Aguardando carregamento...")
        
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            campo_endereco = page.locator("#enderecoTelaEndereco")
            if campo_endereco.count() > 0 and campo_endereco.first.is_visible():
                break
            # Aguardar carregamento da tela
            try:
                page.wait_for_selector("#enderecoTelaEndereco", timeout=1000)
                break
            except:
                continue
            tentativa += 1
        
        if tentativa >= max_tentativas:
            exception_handler.capturar_warning("Tela 7 n√£o carregou", "TELA_7")
            return False
        
        exibir_mensagem("‚úÖ Tela 7 carregada com sucesso")
        
        # Preencher CEP
        exibir_mensagem("üì± TELA 7: Preenchendo CEP...")
        campo_endereco.first.fill(cep)
        exibir_mensagem(f"‚úÖ CEP preenchido: {cep}")
        # Aguardar estabiliza√ß√£o do campo
        page.wait_for_function("document.querySelector('#enderecoTelaEndereco').value.length > 0", timeout=2000)
        
        # Aguardar carregamento do endere√ßo
        exibir_mensagem("‚è≥ Aguardando carregamento do endere√ßo...")
        page.wait_for_selector(".overflow-hidden", timeout=8000)
        
        # Tentar selecionar endere√ßo sugerido
        try:
            sugestao_endereco = page.locator(".overflow-hidden").first
            if sugestao_endereco.is_visible():
                sugestao_endereco.click()
                exibir_mensagem("‚úÖ Endere√ßo sugerido selecionado")
                # Aguardar estabiliza√ß√£o da sele√ß√£o
                page.wait_for_function("document.querySelector('.overflow-hidden').classList.contains('selected')", timeout=2000)
            else:
                exception_handler.capturar_warning("Endere√ßo sugerido n√£o encontrado", "TELA_7")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao selecionar endere√ßo: {str(e)}", "TELA_7")
        
        # Clicar em Continuar
        botao_continuar = page.locator("#gtm-telaPernoiteVeiculoContinuar").first
        botao_continuar.click()
        
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        # Aguardar transi√ß√£o para a pr√≥xima tela
        page.wait_for_selector("xpath=//*[contains(text(), 'finalidade') or contains(text(), 'uso')]", timeout=5000)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_7", f"Erro ao preencher CEP {cep}")
        return False

def navegar_tela_8_playwright(page: Page, uso_veiculo: str) -> bool:
    """
    TELA 8: Finalidade do ve√≠culo (Uso do ve√≠culo)
    """
    try:
        exception_handler.definir_tela_atual("TELA_8")
        exibir_mensagem("üì± TELA 8: Aguardando carregamento...")
        
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            elementos_tela8 = page.locator("xpath=//*[contains(text(), 'finalidade') or contains(text(), 'Finalidade') or contains(text(), 'uso') or contains(text(), 'Uso') or contains(text(), 've√≠culo')]")
            if elementos_tela8.count() > 0:
                break
            # Aguardar carregamento da tela
            try:
                page.wait_for_selector("xpath=//*[contains(text(), 'finalidade') or contains(text(), 'uso')]", timeout=1000)
                break
            except:
                continue
            tentativa += 1
        
        if tentativa >= max_tentativas:
            exception_handler.capturar_warning("Tela 8 n√£o carregou", "TELA_8")
            return False
        
        exibir_mensagem("‚úÖ Tela 8 carregada com sucesso")
        exibir_mensagem(f"üì± TELA 8: Selecionando uso do ve√≠culo...")
        
        mapeamento_uso = {
            "Pessoal": "Particular",
            "Profissional": "Profissional", 
            "Motorista de aplicativo": "Motorista de App",
            "Motorista de App": "Motorista de App",
            "Taxi": "Taxi",
            "T√°xi": "Taxi"
        }
        
        valor_radio = mapeamento_uso.get(uso_veiculo, uso_veiculo)
        seletor_radio = f'input[value="{valor_radio}"][name="finalidadeVeiculoTelaUsoVeiculo"]'
        radio_button = page.locator(seletor_radio).first
        
        if radio_button.is_visible():
            radio_button.click()
            exibir_mensagem(f"‚úÖ Uso '{uso_veiculo}' selecionado com sucesso")
        else:
            exception_handler.capturar_warning(f"Radio button para '{uso_veiculo}' n√£o est√° vis√≠vel", "TELA_8")
        
        botao_continuar = page.locator("#gtm-telaUsoVeiculoContinuar").first
        botao_continuar.click()
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        page.wait_for_selector("xpath=//*[contains(text(), 'dados pessoais') or contains(text(), 'Dados pessoais')]", timeout=5000)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_8", f"Erro ao selecionar uso do ve√≠culo: {uso_veiculo}")
        return False

def navegar_tela_9_playwright(page: Page, nome: str, cpf: str, data_nascimento: str, sexo: str, estado_civil: str, email: str, celular: str) -> bool:
    """
    TELA 9: Dados pessoais do segurado
    """
    try:
        exception_handler.definir_tela_atual("TELA_9")
        exibir_mensagem("üì± TELA 9: Aguardando carregamento...")
        
        for tentativa in range(20):
            try:
                elementos_tela = page.locator("xpath=//*[contains(text(), 'dados pessoais') or contains(text(), 'Dados pessoais')]")
                if elementos_tela.count() > 0:
                    exibir_mensagem("‚úÖ Tela 9 carregada com sucesso")
                    break
            except:
                pass
            
            if tentativa == 19:
                exception_handler.capturar_warning("Tela 9 n√£o foi detectada ap√≥s 20 segundos", "TELA_9")
                return False
            
            try:
                page.wait_for_selector("xpath=//*[contains(text(), 'dados pessoais') or contains(text(), 'Dados pessoais')]", timeout=1000)
                break
            except:
                pass
        
        # Preencher Nome Completo
        exibir_mensagem("üì± TELA 9: Preenchendo nome...")
        try:
            nome_campo = page.locator("#nomeTelaSegurado")
            nome_campo.click()
            nome_campo.fill(nome)
            exibir_mensagem(f"‚úÖ Nome preenchido: {nome}")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao preencher nome: {str(e)}", "TELA_9")
        
        # Preencher CPF
        exibir_mensagem("üì± TELA 9: Preenchendo CPF...")
        try:
            cpf_campo = page.locator("#cpfTelaSegurado")
            cpf_campo.click()
            cpf_campo.fill(cpf)
            exibir_mensagem(f"‚úÖ CPF preenchido: {cpf}")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao preencher CPF: {str(e)}", "TELA_9")
        
        # Preencher Data de Nascimento
        exibir_mensagem("üì± TELA 9: Preenchendo data de nascimento...")
        try:
            data_campo = page.locator("#dataNascimentoTelaSegurado")
            data_campo.click()
            data_campo.fill(data_nascimento)
            exibir_mensagem(f"‚úÖ Data de nascimento preenchida: {data_nascimento}")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao preencher data de nascimento: {str(e)}", "TELA_9")
        
        # Selecionar Sexo
        exibir_mensagem("üì± TELA 9: Selecionando sexo...")
        try:
            campo_sexo = page.locator("#sexoTelaSegurado")
            if campo_sexo.is_visible():
                campo_sexo.click()
                page.wait_for_selector(f"text={sexo}", timeout=2000)
                
                opcao_sexo = page.locator(f"text={sexo}").first
                if opcao_sexo.is_visible():
                    opcao_sexo.click()
                    exibir_mensagem(f"‚úÖ Sexo selecionado: {sexo}")
                else:
                    exception_handler.capturar_warning(f"Op√ß√£o de sexo '{sexo}' n√£o encontrada", "TELA_9")
            else:
                exception_handler.capturar_warning("Campo de sexo n√£o est√° vis√≠vel", "TELA_9")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao selecionar sexo: {str(e)}", "TELA_9")
        
        # Selecionar Estado Civil
        exibir_mensagem("üì± TELA 9: Selecionando estado civil...")
        try:
            campo_estado_civil = page.locator("#estadoCivilTelaSegurado")
            if campo_estado_civil.is_visible():
                campo_estado_civil.click()
                page.wait_for_selector("xpath=//li[contains(text(), 'Casado') or contains(text(), 'Solteiro') or contains(text(), 'Divorciado') or contains(text(), 'Vi√∫vo') or contains(text(), 'Separado')]", timeout=2000)
                
                # Mapear estado civil do JSON para poss√≠veis varia√ß√µes na tela
                mapeamento_estado_civil = {
                    "Casado ou Uniao Estavel": ["Casado ou Uni√£o Est√°vel", "Casado ou Uniao Estavel", "Casado ou Uni√£o Estavel", "Casado ou Uniao Est√°vel"],
                    "Solteiro": ["Solteiro", "Solteiro(a)"],
                    "Divorciado": ["Divorciado", "Divorciado(a)"],
                    "Viuvo": ["Vi√∫vo", "Viuvo", "Vi√∫vo(a)", "Viuvo(a)"],
                    "Separado": ["Separado", "Separado(a)"]
                }
                
                # Obter poss√≠veis varia√ß√µes para o estado civil
                variacoes_estado_civil = mapeamento_estado_civil.get(estado_civil, [estado_civil])
                
                # Aguardar at√© 5 segundos para o dropdown aparecer
                estado_civil_selecionado = False
                for tentativa in range(5):
                    try:
                        # Tentar cada varia√ß√£o poss√≠vel
                        for variacao in variacoes_estado_civil:
                            opcoes_estado_civil = page.locator("xpath=//li[contains(text(), '" + variacao + "')]")
                            if opcoes_estado_civil.count() > 0:
                                opcoes_estado_civil.first.click()
                                exibir_mensagem(f"‚úÖ Estado civil selecionado: {estado_civil} (encontrado como '{variacao}')")
                                estado_civil_selecionado = True
                                break
                        
                        if estado_civil_selecionado:
                            break
                    except:
                        pass
                    
                    if tentativa == 4 and not estado_civil_selecionado:
                        exception_handler.capturar_warning(f"Estado civil '{estado_civil}' n√£o encontrado no dropdown (tentou: {', '.join(variacoes_estado_civil)})", "TELA_9")
                    
                    try:
                        page.wait_for_selector("xpath=//li[contains(text(), 'Casado') or contains(text(), 'Solteiro') or contains(text(), 'Divorciado') or contains(text(), 'Vi√∫vo') or contains(text(), 'Separado')]", timeout=1000)
                        break
                    except:
                        pass
                
                # Aguardar fechamento do dropdown antes de prosseguir
                page.wait_for_function("document.querySelector('#estadoCivilTelaSegurado').getAttribute('aria-expanded') === 'false'", timeout=3000)
            else:
                exception_handler.capturar_warning("Campo de estado civil n√£o est√° vis√≠vel", "TELA_9")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao selecionar estado civil: {str(e)}", "TELA_9")
        
        # Preencher Email
        exibir_mensagem("üì± TELA 9: Preenchendo email...")
        try:
            email_campo = page.locator("#emailTelaSegurado")
            email_campo.click()
            email_campo.fill(email)
            exibir_mensagem(f"‚úÖ Email preenchido: {email}")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao preencher email: {str(e)}", "TELA_9")
        
        # Preencher Celular
        exibir_mensagem("üì± TELA 9: Preenchendo celular...")
        try:
            celular_campo = page.locator("#celularTelaSegurado")
            celular_campo.click()
            
            # Limpar o campo primeiro
            celular_campo.clear()
            page.wait_for_function("document.querySelector('#celularTelaSegurado').value === ''", timeout=1000)
            
            # Preencher caractere por caractere para evitar problemas com m√°scara
            for digito in celular:
                celular_campo.type(digito)
                page.wait_for_function("document.querySelector('#celularTelaSegurado').value.length > 0", timeout=200)
            
            # Aguardar um pouco para a m√°scara processar
            page.wait_for_function("document.querySelector('#celularTelaSegurado').value.length >= " + str(len(celular)), timeout=2000)
            
            # Verificar se foi preenchido corretamente
            valor_preenchido = celular_campo.input_value()
            exibir_mensagem(f"‚úÖ Celular preenchido: {celular} (valor no campo: {valor_preenchido})")
            
            if valor_preenchido != celular:
                exception_handler.capturar_warning(f"ATEN√á√ÉO: Valor no campo ({valor_preenchido}) diferente do esperado ({celular})", "TELA_9")
                
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao preencher celular: {str(e)}", "TELA_9")
        
        # Clicar em Continuar
        botao_continuar = page.locator("#gtm-telaDadosSeguradoContinuar").first
        botao_continuar.click()
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        page.wait_for_selector("#gtm-telaCondutorPrincipalContinuar", timeout=5000)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_9", "Erro ao preencher dados pessoais")
        return False

def navegar_tela_10_playwright(page, condutor_principal, nome_condutor=None, cpf_condutor=None, data_nascimento_condutor=None, sexo_condutor=None, estado_civil_condutor=None):
    """
    TELA 10: Condutor principal
    
    DESCRI√á√ÉO:
        Navega para a Tela 10 e configura se o segurado √© o condutor principal do ve√≠culo.
        Se n√£o for condutor principal, preenche os dados do condutor (nome, CPF, data nascimento, sexo, estado civil).
        
    ELEMENTOS IDENTIFICADOS:
        - Radio Sim (Condutor Principal): input[value="sim"][name="condutorPrincipalTelaCondutorPrincipal"]
        - Radio N√£o (N√£o Condutor Principal): input[value="nao"][name="condutorPrincipalTelaCondutorPrincipal"]
        - Campo Nome: #nomeTelaCondutorPrincipal
        - Campo CPF: #cpfTelaCondutorPrincipal
        - Campo Data Nascimento: #dataNascimentoTelaCondutorPrincipal
        - Campo Sexo: #sexoTelaCondutorPrincipal
        - Campo Estado Civil: #estadoCivilTelaCondutorPrincipal
        - Bot√£o Continuar: #gtm-telaCondutorPrincipalContinuar
        
    PAR√ÇMETROS:
        - condutor_principal: bool - Se o segurado √© o condutor principal
        - nome_condutor: str - Nome do condutor (se n√£o for condutor principal)
        - cpf_condutor: str - CPF do condutor (se n√£o for condutor principal)
        - data_nascimento_condutor: str - Data de nascimento do condutor (se n√£o for condutor principal)
        - sexo_condutor: str - Sexo do condutor (se n√£o for condutor principal)
        - estado_civil_condutor: str - Estado civil do condutor (se n√£o for condutor principal)
    """
    try:
        exibir_mensagem("\n" + "="*50)
        exibir_mensagem("üéØ TELA 10: CONDUTOR PRINCIPAL")
        exibir_mensagem("="*50)
        
        # Aguarda o carregamento da Tela 10
        exibir_mensagem("‚è≥ Aguardando carregamento da Tela 10...")
        page.wait_for_selector("#gtm-telaCondutorPrincipalContinuar", timeout=10000)
        page.wait_for_selector('input[name="condutorPrincipalTelaCondutorPrincipal"]', timeout=3000)
        
        exibir_mensagem("‚úÖ Tela 10 carregada - condutor principal detectado!")
        
        # PASSO 1: Selecionar se √© condutor principal ou n√£o
        if condutor_principal:
            exibir_mensagem("üë§ Selecionando 'Sim' - segurado √© condutor principal")
            radio_sim = page.locator('input[value="sim"][name="condutorPrincipalTelaCondutorPrincipal"]')
            if radio_sim.is_visible():
                radio_sim.click()
                exibir_mensagem("‚úÖ Radio 'Sim' selecionado com sucesso")
            else:
                exception_handler.capturar_warning("Radio 'Sim' n√£o encontrado", "TELA_10")
        else:
            exibir_mensagem("üë§ Selecionando 'N√£o' - segurado n√£o √© condutor principal")
            radio_nao = page.locator('input[value="nao"][name="condutorPrincipalTelaCondutorPrincipal"]')
            if radio_nao.is_visible():
                radio_nao.click()
                exibir_mensagem("‚úÖ Radio 'N√£o' selecionado com sucesso")
                
                # Aguardar campos do condutor aparecerem
                page.wait_for_selector("#nomeTelaCondutorPrincipal", timeout=3000)
                
                # PASSO 2: Preencher dados do condutor
                exibir_mensagem("üìù Preenchendo dados do condutor...")
                
                # Nome do condutor
                if nome_condutor:
                    nome_campo = page.locator("#nomeTelaCondutorPrincipal")
                    if nome_campo.is_visible():
                        nome_campo.fill(nome_condutor)
                        exibir_mensagem(f"‚úÖ Nome do condutor: {nome_condutor}")
                    else:
                        exception_handler.capturar_warning("Campo nome n√£o encontrado", "TELA_10")
                
                # CPF do condutor
                if cpf_condutor:
                    cpf_campo = page.locator("#cpfTelaCondutorPrincipal")
                    if cpf_campo.is_visible():
                        cpf_campo.fill(cpf_condutor)
                        exibir_mensagem(f"‚úÖ CPF do condutor: {cpf_condutor}")
                    else:
                        exception_handler.capturar_warning("Campo CPF n√£o encontrado", "TELA_10")
                
                # Data de nascimento do condutor
                if data_nascimento_condutor:
                    data_campo = page.locator("#dataNascimentoTelaCondutorPrincipal")
                    if data_campo.is_visible():
                        data_campo.fill(data_nascimento_condutor)
                        exibir_mensagem(f"‚úÖ Data de nascimento: {data_nascimento_condutor}")
                    else:
                        exception_handler.capturar_warning("Campo data de nascimento n√£o encontrado", "TELA_10")
                
                # Sexo do condutor
                if sexo_condutor:
                    sexo_campo = page.locator("#sexoTelaCondutorPrincipal")
                    if sexo_campo.is_visible():
                        sexo_campo.click()
                        page.wait_for_selector("ul", timeout=2000)
                        
                        try:
                            page.wait_for_selector("ul", timeout=5000)
                            opcao_sexo = page.locator(f'xpath=//li[contains(text(), "{sexo_condutor}")]')
                            if opcao_sexo.is_visible():
                                opcao_sexo.click()
                                exibir_mensagem(f"‚úÖ Sexo do condutor: {sexo_condutor}")
                            else:
                                exception_handler.capturar_warning(f"Op√ß√£o de sexo '{sexo_condutor}' n√£o encontrada", "TELA_10")
                        except:
                            exception_handler.capturar_warning("Erro ao selecionar sexo", "TELA_10")
                    else:
                        exception_handler.capturar_warning("Campo sexo n√£o encontrado", "TELA_10")
                
                # Estado civil do condutor
                if estado_civil_condutor:
                    estado_civil_campo = page.locator("#estadoCivilTelaCondutorPrincipal")
                    if estado_civil_campo.is_visible():
                        estado_civil_campo.click()
                        page.wait_for_selector("ul", timeout=2000)
                        
                        try:
                            page.wait_for_selector("ul", timeout=5000)
                            
                            # Mapeamento para varia√ß√µes de acento
                            mapeamento_estado_civil = {
                                "Casado ou Uniao Estavel": "Casado ou Uni√£o Est√°vel"
                            }
                            
                            texto_busca = mapeamento_estado_civil.get(estado_civil_condutor, estado_civil_condutor)
                            opcao_estado_civil = page.locator(f'xpath=//li[contains(text(), "{texto_busca}")]')
                            
                            if opcao_estado_civil.is_visible():
                                opcao_estado_civil.click()
                                exibir_mensagem(f"‚úÖ Estado civil do condutor: {estado_civil_condutor}")
                            else:
                                exception_handler.capturar_warning(f"Op√ß√£o de estado civil '{estado_civil_condutor}' n√£o encontrada", "TELA_10")
                        except:
                            exception_handler.capturar_warning("Erro ao selecionar estado civil", "TELA_10")
                    else:
                        exception_handler.capturar_warning("Campo estado civil n√£o encontrado", "TELA_10")
            else:
                exception_handler.capturar_warning("Radio 'N√£o' n√£o encontrado", "TELA_10")
        
        # Aguardar estabiliza√ß√£o
        page.wait_for_selector("#gtm-telaCondutorPrincipalContinuar", timeout=3000)
        
        # PASSO 3: Clicar em Continuar
        exibir_mensagem("‚è≥ Clicando em 'Continuar'...")
        botao_continuar = page.locator("#gtm-telaCondutorPrincipalContinuar")
        if botao_continuar.is_visible():
            botao_continuar.click()
            exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            page.wait_for_selector("#gtm-telaAtividadeVeiculoContinuar", timeout=5000)
            return True
        else:
            exception_handler.capturar_warning("Bot√£o 'Continuar' n√£o encontrado", "TELA_10")
            return False
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_10", "Erro ao processar condutor principal")
        return False

def navegar_tela_11_playwright(page, local_de_trabalho, estacionamento_proprio_local_de_trabalho, local_de_estudo, estacionamento_proprio_local_de_estudo):
    """
    TELA 11: Atividade do ve√≠culo
    
    DESCRI√á√ÉO:
        Navega para a Tela 11 e seleciona se o ve√≠culo √© utilizado para ir ao local de trabalho e/ou estudo.
        Se selecionar local de trabalho, aparece checkbox de estacionamento pr√≥prio do trabalho.
        Se selecionar local de estudo, aparece checkbox de estacionamento pr√≥prio do estudo.
        
    ELEMENTOS IDENTIFICADOS:
        - Checkbox Local de Trabalho: input[type="checkbox"][value="trabalho"]
        - Checkbox Local de Estudo: input[type="checkbox"][value="estudo"]
        - Checkbox Estacionamento Local de Trabalho: input[type="checkbox"][data-gtm-form-interact-field-id="10"]
        - Checkbox Estacionamento Local de Estudo: input[type="checkbox"][data-gtm-form-interact-field-id="11"]
        - Bot√£o Continuar: #gtm-telaAtividadeVeiculoContinuar
        
    PAR√ÇMETROS:
        - local_de_trabalho: bool - Se o ve√≠culo √© usado para ir ao trabalho
        - estacionamento_proprio_local_de_trabalho: bool - Se h√° estacionamento pr√≥prio no trabalho
        - local_de_estudo: bool - Se o ve√≠culo √© usado para ir ao estudo
        - estacionamento_proprio_local_de_estudo: bool - Se h√° estacionamento pr√≥prio no estudo
    """
    try:
        exibir_mensagem("\n" + "="*50)
        exibir_mensagem("üéØ TELA 11: ATIVIDADE DO VE√çCULO")
        exibir_mensagem("="*50)
        
        # Aguarda o carregamento da Tela 11
        exibir_mensagem("‚è≥ Aguardando carregamento da Tela 11...")
        page.wait_for_selector("#gtm-telaAtividadeVeiculoContinuar", timeout=10000)
        page.wait_for_selector('input[type="checkbox"][value="trabalho"]', timeout=3000)
        
        exibir_mensagem("‚úÖ Tela 11 carregada - atividade do ve√≠culo detectada!")
        
        # PASSO 1: Seleciona checkbox Local de Trabalho se necess√°rio
        if local_de_trabalho:
            exibir_mensagem("üìã Marcando checkbox 'Local de Trabalho'...")
            checkbox_trabalho = page.locator('input[type="checkbox"][value="trabalho"]')
            if not checkbox_trabalho.is_checked():
                checkbox_trabalho.check()
                exibir_mensagem("‚úÖ Checkbox 'Local de Trabalho' marcado!")
                page.wait_for_selector('input[type="checkbox"][data-gtm-form-interact-field-id="10"]', timeout=2000)
            else:
                exibir_mensagem("‚ÑπÔ∏è Checkbox 'Local de Trabalho' j√° estava marcado")
        else:
            exibir_mensagem("‚ÑπÔ∏è Local de Trabalho: N√£o selecionado")
        
        # PASSO 2: Seleciona checkbox Local de Estudo se necess√°rio
        if local_de_estudo:
            exibir_mensagem("üìã Marcando checkbox 'Local de Estudo'...")
            checkbox_estudo = page.locator('input[type="checkbox"][value="estudo"]')
            if not checkbox_estudo.is_checked():
                checkbox_estudo.check()
                exibir_mensagem("‚úÖ Checkbox 'Local de Estudo' marcado!")
                page.wait_for_selector('input[type="checkbox"][data-gtm-form-interact-field-id="11"]', timeout=2000)
            else:
                exibir_mensagem("‚ÑπÔ∏è Checkbox 'Local de Estudo' j√° estava marcado")
        else:
            exibir_mensagem("‚ÑπÔ∏è Local de Estudo: N√£o selecionado")
        
        # PASSO 3: Configurar estacionamento do trabalho (se local_de_trabalho = true)
        if local_de_trabalho:
            exibir_mensagem("üÖøÔ∏è Configurando estacionamento do trabalho...")
            try:
                checkbox_estacionamento_trabalho = page.locator('input[type="checkbox"][data-gtm-form-interact-field-id="10"]')
                if checkbox_estacionamento_trabalho.is_visible():
                    if estacionamento_proprio_local_de_trabalho and not checkbox_estacionamento_trabalho.is_checked():
                        checkbox_estacionamento_trabalho.check()
                        exibir_mensagem("‚úÖ Estacionamento pr√≥prio do trabalho: MARCADO")
                    elif not estacionamento_proprio_local_de_trabalho and checkbox_estacionamento_trabalho.is_checked():
                        checkbox_estacionamento_trabalho.uncheck()
                        exibir_mensagem("‚úÖ Estacionamento pr√≥prio do trabalho: DESMARCADO")
                    else:
                        estado = "MARCADO" if estacionamento_proprio_local_de_trabalho else "DESMARCADO"
                        exibir_mensagem(f"‚úÖ Estacionamento pr√≥prio do trabalho: {estado} (j√° estava correto)")
                else:
                    exibir_mensagem("‚ö†Ô∏è Checkbox estacionamento do trabalho n√£o encontrado")
            except Exception as e:
                exibir_mensagem(f"‚ö†Ô∏è Erro ao configurar estacionamento do trabalho: {str(e)}")
        
        # PASSO 4: Configurar estacionamento do estudo (se local_de_estudo = true)
        if local_de_estudo:
            exibir_mensagem("üÖøÔ∏è Configurando estacionamento do estudo...")
            try:
                checkbox_estacionamento_estudo = page.locator('input[type="checkbox"][data-gtm-form-interact-field-id="11"]')
                if checkbox_estacionamento_estudo.is_visible():
                    if estacionamento_proprio_local_de_estudo and not checkbox_estacionamento_estudo.is_checked():
                        checkbox_estacionamento_estudo.check()
                        exibir_mensagem("‚úÖ Estacionamento pr√≥prio do estudo: MARCADO")
                    elif not estacionamento_proprio_local_de_estudo and checkbox_estacionamento_estudo.is_checked():
                        checkbox_estacionamento_estudo.uncheck()
                        exibir_mensagem("‚úÖ Estacionamento pr√≥prio do estudo: DESMARCADO")
                    else:
                        estado = "MARCADO" if estacionamento_proprio_local_de_estudo else "DESMARCADO"
                        exibir_mensagem(f"‚úÖ Estacionamento pr√≥prio do estudo: {estado} (j√° estava correto)")
                else:
                    exibir_mensagem("‚ö†Ô∏è Checkbox estacionamento do estudo n√£o encontrado")
            except Exception as e:
                exibir_mensagem(f"‚ö†Ô∏è Erro ao configurar estacionamento do estudo: {str(e)}")
        
        # PASSO 5: Aguardar estabiliza√ß√£o ap√≥s todas as configura√ß√µes
        page.wait_for_selector("#gtm-telaAtividadeVeiculoContinuar", timeout=3000)
        
        # PASSO 6: Clica no bot√£o Continuar
        exibir_mensagem("üîÑ Clicando em 'Continuar'...")
        botao_continuar = page.locator("#gtm-telaAtividadeVeiculoContinuar")
        botao_continuar.click()
        
        # PASSO 7: Aguarda navega√ß√£o
        page.wait_for_selector("input[name='possuiGaragemTelaGaragemResidencia']", timeout=5000)
        exibir_mensagem("‚úÖ Navega√ß√£o para pr√≥xima tela realizada!")
        
        return True
        
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na Tela 11: {str(e)}")
        return False

def navegar_tela_12_playwright(page, garagem_residencia, portao_eletronico):
    """
    TELA 12: Garagem na Resid√™ncia
    
    DESCRI√á√ÉO:
        Navega para a Tela 12 e seleciona se possui garagem na resid√™ncia e tipo de port√£o.
        
    ELEMENTOS IDENTIFICADOS:
        - Radio Sim: input[value="sim"][name="possuiGaragemTelaGaragemResidencia"]
        - Radio N√£o: input[value="nao"][name="possuiGaragemTelaGaragemResidencia"]
        - Radio Eletr√¥nico: input[value="eletronico"][name="tipoPortaoTelaGaragemResidencia"]
        - Radio Manual: input[value="manual"][name="tipoPortaoTelaGaragemResidencia"]
        - Bot√£o Continuar: p.font-semibold.font-workSans.cursor-pointer (texto "Continuar")
        
    PAR√ÇMETROS:
        - garagem_residencia: bool - Se possui garagem na resid√™ncia
        - portao_eletronico: str - Tipo de port√£o ("Eletronico", "Manual", "N√£o possui")
    """
    try:
        exibir_mensagem("\n" + "="*50)
        exibir_mensagem("üè† TELA 12: GARAGEM NA RESID√äNCIA")
        exibir_mensagem("="*50)
        
        # Aguarda o carregamento da Tela 12
        exibir_mensagem("1Ô∏è‚É£ ‚è≥ Aguardando carregamento da Tela 12...")
        page.wait_for_selector('p.font-semibold.font-workSans.cursor-pointer', timeout=10000)
        page.wait_for_selector('input[name="possuiGaragemTelaGaragemResidencia"]', timeout=3000)
        
        exibir_mensagem("2Ô∏è‚É£ ‚úÖ Tela 12 carregada - garagem na resid√™ncia detectada!")
        
        # Seleciona Sim ou N√£o para garagem
        if garagem_residencia:
            exibir_mensagem("3Ô∏è‚É£ üìã Selecionando 'Sim' para garagem na resid√™ncia...")
            
            # Localizar e clicar no radio button "Sim"
            radio_sim = page.locator('input[value="sim"][name="possuiGaragemTelaGaragemResidencia"]')
            if radio_sim.is_visible():
                radio_sim.click()
                exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'Sim' para garagem selecionado com sucesso")
            else:
                exibir_mensagem("4Ô∏è‚É£ ‚ö†Ô∏è Radio 'Sim' para garagem n√£o encontrado")
                return False
            
            # Aguarda campo de port√£o aparecer
            exibir_mensagem("5Ô∏è‚É£ ‚è≥ Aguardando campo de port√£o aparecer...")
            page.wait_for_selector('input[name="tipoPortaoTelaGaragemResidencia"]', timeout=3000)
            
            # Seleciona tipo de port√£o
            if portao_eletronico == "Eletronico":
                exibir_mensagem("6Ô∏è‚É£ üìã Selecionando 'Eletr√¥nico' para port√£o...")
                
                radio_eletronico = page.locator('input[value="eletronico"][name="tipoPortaoTelaGaragemResidencia"]')
                if radio_eletronico.is_visible():
                    radio_eletronico.click()
                    exibir_mensagem("7Ô∏è‚É£ ‚úÖ Radio 'Eletr√¥nico' para port√£o selecionado com sucesso")
                else:
                    exibir_mensagem("7Ô∏è‚É£ ‚ö†Ô∏è Radio 'Eletr√¥nico' para port√£o n√£o encontrado")
                    return False
                    
            elif portao_eletronico == "Manual":
                exibir_mensagem("6Ô∏è‚É£ üìã Selecionando 'Manual' para port√£o...")
                
                radio_manual = page.locator('input[value="manual"][name="tipoPortaoTelaGaragemResidencia"]')
                if radio_manual.is_visible():
                    radio_manual.click()
                    exibir_mensagem("7Ô∏è‚É£ ‚úÖ Radio 'Manual' para port√£o selecionado com sucesso")
                else:
                    exibir_mensagem("7Ô∏è‚É£ ‚ö†Ô∏è Radio 'Manual' para port√£o n√£o encontrado")
                    return False
            else:
                exibir_mensagem("6Ô∏è‚É£ ‚ÑπÔ∏è Tipo de port√£o: N√£o possui")
        else:
            exibir_mensagem("3Ô∏è‚É£ üìã Selecionando 'N√£o' para garagem na resid√™ncia...")
            
            # Localizar e clicar no radio button "N√£o"
            radio_nao = page.locator('input[value="nao"][name="possuiGaragemTelaGaragemResidencia"]')
            if radio_nao.is_visible():
                radio_nao.click()
                exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'N√£o' para garagem selecionado com sucesso")
            else:
                exibir_mensagem("4Ô∏è‚É£ ‚ö†Ô∏è Radio 'N√£o' para garagem n√£o encontrado")
                return False
        
        # Aguarda estabiliza√ß√£o ap√≥s sele√ß√µes
        page.wait_for_selector('p.font-semibold.font-workSans.cursor-pointer:has-text("Continuar")', timeout=3000)
        
        # Clica no bot√£o Continuar
        exibir_mensagem("8Ô∏è‚É£ üîÑ Clicando em 'Continuar'...")
        botao_continuar = page.locator('p.font-semibold.font-workSans.cursor-pointer:has-text("Continuar")')
        if botao_continuar.is_visible():
            botao_continuar.click()
            exibir_mensagem("9Ô∏è‚É£ ‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        else:
            exibir_mensagem("9Ô∏è‚É£ ‚ö†Ô∏è Bot√£o 'Continuar' n√£o encontrado")
            return False
        
        # Aguarda navega√ß√£o - verifica se chegou na pr√≥xima tela ou se ainda est√° na atual
        try:
            # Tenta aguardar elemento da pr√≥xima tela
#            page.wait_for_selector("input[name='resideMenoresTelaResidenciaMenores']", timeout=3000)
            page.wait_for_selector("input[name='usoDependenteTelaUsoResidentes']", timeout=10000)
            exibir_mensagem("üîü ‚úÖ Navega√ß√£o para pr√≥xima tela realizada!")
        except:
            # Se n√£o encontrar, verifica se ainda est√° na tela atual
            try:
                page.wait_for_selector('p.font-semibold.font-workSans.cursor-pointer:has-text("Continuar")', timeout=2000)
                exibir_mensagem("üîü ‚ö†Ô∏è Ainda na tela atual - tentando clicar novamente...")
                botao_continuar.click()
#                page.wait_for_selector("input[name='resideMenoresTelaResidenciaMenores']", timeout=5000)
                exibir_mensagem("üîü ‚úÖ Navega√ß√£o para pr√≥xima tela realizada!")
            except:
                exibir_mensagem("üîü ‚úÖ Navega√ß√£o para pr√≥xima tela realizada!")
        
        return True
        
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na Tela 12: {str(e)}")
        return False

def navegar_tela_13_playwright(page, reside_18_26, sexo_do_menor, faixa_etaria_menor_mais_novo):
    """
    a vers√£o ntir : Resid√™ncia com Menores de 18-26 anos
    
    DESCRI√á√ÉO:
        Navega para a Tela 13 e seleciona se reside com algu√©m entre 18 e 26 anos.
        Se sim, seleciona o sexo e faixa et√°ria do mais novo.
        
    ELEMENTOS IDENTIFICADOS (baseado na grava√ß√£o):
        - Radio principal: Voc√™ reside com algu√©m entre 18 e 26 anos?
            - N√£o
            - Sim, mas n√£o utilizam o ve√≠culo
            - Sim e utilizam o ve√≠culo
        - Radio condicional Sexo (s√≥ aparece se "Sim e utilizam o ve√≠culo"):
            - Feminino
            - Masculino
            - Ambos
        - Radio condicional Faixa et√°ria (s√≥ aparece se "Sim e utilizam o ve√≠culo"):
            - 18 a 24 anos
            - 25 anos
        - Bot√£o Continuar: p.font-semibold.font-workSans.cursor-pointer:has-text("Continuar")
        
    PAR√ÇMETROS:
        - reside_18_26: str - Resposta principal ("N√£o", "Sim, mas n√£o utilizam o ve√≠culo", "Sim e utilizam o ve√≠culo")
        - sexo_do_menor: str - Sexo do menor ("Feminino", "Masculino", "Ambos", "N/A")
        - faixa_etaria_menor_mais_novo: str - Faixa et√°ria ("18 a 24 anos", "25 anos", "N/A")
    """
    try:
        exibir_mensagem("\n" + "="*50)
        exibir_mensagem("üë• TELA 13: RESID√äNCIA COM MENORES DE 18-26 ANOS")
        exibir_mensagem("="*50)
        
        # PASSO 1: Aguardar carregamento da tela
        exibir_mensagem("1Ô∏è‚É£ ‚è≥ Aguardando carregamento da Tela 13...")
        page.wait_for_selector("p.font-semibold.font-workSans.cursor-pointer:has-text('Continuar')", timeout=10000)
        exibir_mensagem("2Ô∏è‚É£ ‚úÖ Tela 13 carregada - resid√™ncia com menores detectada!")
        
        # PASSO 2: Selecionar resposta principal
        exibir_mensagem(f"3Ô∏è‚É£ üë• Selecionando resposta principal: '{reside_18_26}'...")
        
        # Mapear valores para os selectors da grava√ß√£o
        if reside_18_26 == "N√£o":
            # Selecionar "N√£o" - tentar diferentes abordagens
            try:
                # Primeira tentativa: usar o seletor original
                page.locator("input[type='radio'][value='nao']").first.check()
                exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'N√£o' selecionado com sucesso")
            except:
                try:
                    # Segunda tentativa: usar texto
                    page.locator("text=N√£o").first.click()
                    exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'N√£o' selecionado com sucesso (texto)")
                except:
                    # Terceira tentativa: usar label
                    page.locator("label:has-text('N√£o')").first.click()
                    exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'N√£o' selecionado com sucesso (label)")
            
        elif reside_18_26 == "Sim, mas n√£o utilizam o ve√≠culo":
            # Selecionar "Sim, mas n√£o utilizam o ve√≠culo"
            try:
                page.locator("input[type='radio'][value='sim_nao_utilizam']").check()
                exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'Sim, mas n√£o utilizam o ve√≠culo' selecionado com sucesso")
            except:
                page.locator("text=Sim, mas n√£o utilizam o ve√≠culo").first.click()
                exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'Sim, mas n√£o utilizam o ve√≠culo' selecionado com sucesso (texto)")
            
        elif reside_18_26 == "Sim e utilizam o ve√≠culo":
            # Selecionar "Sim e utilizam o ve√≠culo"
            try:
                page.locator("input[type='radio'][value='sim_utilizam']").check()
                exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'Sim e utilizam o ve√≠culo' selecionado com sucesso")
            except:
                page.locator("text=Sim e utilizam o ve√≠culo").first.click()
                exibir_mensagem("4Ô∏è‚É£ ‚úÖ Radio 'Sim e utilizam o ve√≠culo' selecionado com sucesso (texto)")
            
            # PASSO 3: Se "Sim e utilizam o ve√≠culo", selecionar campos condicionais
            if sexo_do_menor != "N/A":
                exibir_mensagem(f"5Ô∏è‚É£ üë§ Selecionando sexo do menor: '{sexo_do_menor}'...")
                
                if sexo_do_menor == "Feminino":
                    page.locator("input[type='radio'][value='feminino']").check()
                    exibir_mensagem("6Ô∏è‚É£ ‚úÖ Radio 'Feminino' para sexo selecionado com sucesso")
                elif sexo_do_menor == "Masculino":
                    page.locator("input[type='radio'][value='masculino']").check()
                    exibir_mensagem("6Ô∏è‚É£ ‚úÖ Radio 'Masculino' para sexo selecionado com sucesso")
                elif sexo_do_menor == "Ambos":
                    page.locator("input[type='radio'][value='ambos']").check()
                    exibir_mensagem("6Ô∏è‚É£ ‚úÖ Radio 'Ambos' para sexo selecionado com sucesso")
            
            if faixa_etaria_menor_mais_novo != "N/A":
                exibir_mensagem(f"7Ô∏è‚É£ üìÖ Selecionando faixa et√°ria: '{faixa_etaria_menor_mais_novo}'...")
                
                if faixa_etaria_menor_mais_novo == "18 a 24 anos":
                    page.locator("input[type='radio'][value='18_24']").check()
                    exibir_mensagem("8Ô∏è‚É£ ‚úÖ Radio '18 a 24 anos' para faixa et√°ria selecionado com sucesso")
                elif faixa_etaria_menor_mais_novo == "25 anos":
                    page.locator("input[type='radio'][value='25']").check()
                    exibir_mensagem("8Ô∏è‚É£ ‚úÖ Radio '25 anos' para faixa et√°ria selecionado com sucesso")
        else:
            exibir_mensagem("4Ô∏è‚É£ ‚ö†Ô∏è Resposta n√£o reconhecida, usando 'N√£o'")
            page.locator("input[type='radio'][value='nao']").first.check()
        
        # PASSO 4: Clicar no bot√£o Continuar
        # ========================================
        # üîÑ MUDAN√áA DE SELETOR - COMPATIBILIDADE REGIONAL
        # ========================================
        # ANTES (Seletor Gen√©rico - Problem√°tico em Portugal):
        # page.wait_for_selector("p.font-semibold.font-workSans.cursor-pointer:has-text('Continuar')", timeout=5000)
        # page.locator("p.font-semibold.font-workSans.cursor-pointer:has-text('Continuar')").click()
        #
        # DEPOIS (Seletor Espec√≠fico - Funciona em Portugal):
        # Motivo: Seletores gen√©ricos baseados em classes CSS falham em Portugal devido a:
        # - Problemas de timing e renderiza√ß√£o CSS ass√≠ncrona
        # - Carregamento mais lento de fontes e estilos
        # - Depend√™ncia de m√∫ltiplas classes CSS aplicadas
        # - Diferen√ßas de infraestrutura regional (lat√™ncia, CDN, cache)
        #
        # Solu√ß√£o: Usar ID espec√≠fico que √© sempre presente no HTML
        # independente do estado de renderiza√ß√£o CSS
        # ========================================
        exibir_mensagem("9Ô∏è‚É£ ‚è≥ Aguardando bot√£o 'Continuar'...")
        page.wait_for_selector("#gtm-telaUsoResidentesContinuar", timeout=5000)
        
        exibir_mensagem("üîü üîÑ Clicando no bot√£o 'Continuar'...")
        page.locator("#gtm-telaUsoResidentesContinuar").click()
        exibir_mensagem("1Ô∏è‚É£1Ô∏è‚É£ ‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 5: Aguardar transi√ß√£o para pr√≥xima tela
        exibir_mensagem("1Ô∏è‚É£2Ô∏è‚É£ ‚è≥ Aguardando transi√ß√£o para pr√≥xima tela...")
        exibir_mensagem("1Ô∏è‚É£3Ô∏è‚É£ üîç Iniciando sistema de detec√ß√£o inteligente (Tela 14 ‚Üí Tela 15)")
        
        # Tentar detectar Tela 14 primeiro
        try:
            exibir_mensagem("1Ô∏è‚É£4Ô∏è‚É£ üéØ Tentativa 1: Detectando Tela 14...")
            page.wait_for_selector("#gtm-telaCorretorAnteriorContinuar", timeout=5000)
            exibir_mensagem("1Ô∏è‚É£5Ô∏è‚É£ ‚úÖ Tela 14 detectada - transi√ß√£o bem-sucedida!")
            exibir_mensagem("1Ô∏è‚É£6Ô∏è‚É£ üìã Fluxo normal: Tela 13 ‚Üí Tela 14 ‚Üí Tela 15")
        except Exception as e:
            exibir_mensagem(f"1Ô∏è‚É£4Ô∏è‚É£ ‚ö†Ô∏è Tela 14 n√£o detectada: {str(e)}")
            exibir_mensagem("1Ô∏è‚É£5Ô∏è‚É£ üîÑ Ativando fallback: Tentando detectar Tela 15 diretamente...")
            exibir_mensagem("1Ô∏è‚É£6Ô∏è‚É£ üìã Fluxo otimizado: Tela 13 ‚Üí Tela 15 (pulando Tela 14)")
            
            # Fallback: tentar detectar Tela 15
            try:
                exibir_mensagem("1Ô∏è‚É£7Ô∏è‚É£ üéØ Tentativa 2: Detectando Tela 15 como fallback...")
                
                # Tentar detectar Tela 15 com diferentes textos poss√≠veis
                try:
                    # Primeira tentativa: texto original (quando vai para Tela 14 primeiro)
                    exibir_mensagem("1Ô∏è‚É£7Ô∏è‚É£aÔ∏è‚É£ üéØ Tentativa 2a: Detectando Tela 15 (texto original)...")
                    page.wait_for_selector("text=Por favor, aguarde. Estamos buscando o corretor ideal para voc√™!", timeout=3000)
                    exibir_mensagem("1Ô∏è‚É£7Ô∏è‚É£aÔ∏è‚É£ ‚úÖ Tela 15 detectada com texto original!")
                except:
                    try:
                        # Segunda tentativa: texto quando pula diretamente da Tela 13
                        exibir_mensagem("1Ô∏è‚É£7Ô∏è‚É£bÔ∏è‚É£ üéØ Tentativa 2b: Detectando Tela 15 (texto direto)...")
                        page.wait_for_selector("text=Por favor, aguarde. Estamos realizando o c√°lculo para voc√™!", timeout=3000)
                        exibir_mensagem("1Ô∏è‚É£7Ô∏è‚É£bÔ∏è‚É£ ‚úÖ Tela 15 detectada com texto direto!")
                    except:
                        # Terceira tentativa: texto final de sucesso
                        exibir_mensagem("1Ô∏è‚É£7Ô∏è‚É£cÔ∏è‚É£ üéØ Tentativa 2c: Detectando Tela 15 (texto final)...")
                        page.wait_for_selector("text=Parab√©ns, chegamos ao resultado final da cota√ß√£o!", timeout=180000)
                        exibir_mensagem("1Ô∏è‚É£7Ô∏è‚É£cÔ∏è‚É£ ‚úÖ Tela 15 detectada com texto final!")

                exibir_mensagem("1Ô∏è‚É£8Ô∏è‚É£ ‚úÖ Tela 15 detectada - transi√ß√£o bem-sucedida!")
                exibir_mensagem("1Ô∏è‚É£9Ô∏è‚É£ üöÄ Fallback executado com sucesso!")
                
                # Definir vari√°vel global quando Tela 15 √© detectada diretamente da Tela 13
                global tela_15_detectada
                tela_15_detectada = True
                exibir_mensagem("2Ô∏è‚É£0Ô∏è‚É£ üè∑Ô∏è Flag global 'tela_15_detectada' definida como True")
                exibir_mensagem("2Ô∏è‚É£1Ô∏è‚É£ üìä Status atualizado: Tela 14 ser√° pulada na pr√≥xima execu√ß√£o")
                
            except Exception as e2:
                exibir_mensagem(f"1Ô∏è‚É£7Ô∏è‚É£ ‚ùå Tela 15 tamb√©m n√£o detectada: {str(e2)}")
                exibir_mensagem("1Ô∏è‚É£8Ô∏è‚É£ ‚ùå ABEND: Falha na transi√ß√£o da Tela 13")
                exibir_mensagem("1Ô∏è‚É£9Ô∏è‚É£ üö´ Nenhuma tela subsequente foi detectada")
                raise Exception("Falha na transi√ß√£o da Tela 13 - nem Tela 14 nem Tela 15 detectadas")
        exibir_mensagem("2Ô∏è‚É£2Ô∏è‚É£ ‚úÖ TELA 13 CONCLU√çDA!")
        
        return True
        
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na Tela 13: {str(e)}")
        return False

def navegar_tela_14_playwright(page, continuar_com_corretor_anterior):
    """
    TELA 14: Corretor Anterior (CONDICIONAL)
    
    DESCRI√á√ÉO:
        Tela condicional que s√≥ aparece quando j√° existe uma cota√ß√£o para o cliente.
        Pergunta se deseja continuar com o corretor anterior ou n√£o.
        
    ELEMENTOS IDENTIFICADOS (baseado na grava√ß√£o):
        - Bot√£o Continuar: id=gtm-telaCorretorAnteriorContinuar
        - Elementos de sele√ß√£o: css=.flex > .min-h-[39rem] .mb-6 > .flex > .flex > .text-primary
        - Checkbox/Radio: css=.flex > .md\3Aw-80 > div:nth-child(2) > .flex > .flex .text-primary:nth-child(1)
        
    CARACTER√çSTICAS IMPORTANTES:
        - Tela condicional: S√≥ aparece quando j√° existe uma cota√ß√£o para o cliente
        - L√≥gica de detec√ß√£o: Precisa verificar se a tela aparece antes de processar
        - Elementos simples: Parece ser uma tela de confirma√ß√£o/op√ß√£o
        
    PAR√ÇMETROS:
        - continuar_com_corretor_anterior: bool - Se deve continuar com o corretor anterior
    """
    try:
        exibir_mensagem("\n" + "="*50)
        exibir_mensagem("üë®‚Äçüíº TELA 14: CORRETOR ANTERIOR (CONDICIONAL)")
        exibir_mensagem("="*50)
        
        # PASSO 1: Verificar se a Tela 14 aparece (√© condicional)
        exibir_mensagem("1Ô∏è‚É£ üîç Verificando se a Tela 14 (Corretor Anterior) aparece...")
        
        # Aguardar um tempo para ver se a tela aparece
        page.wait_for_selector("#gtm-telaCorretorAnteriorContinuar", timeout=5000)
        
        # Tentar localizar elementos da Tela 14
        try:
            # Tentar encontrar o bot√£o da Tela 14
            botao_tela14 = page.locator("#gtm-telaCorretorAnteriorContinuar")
            if botao_tela14.count() > 0 and botao_tela14.first.is_visible():
                exibir_mensagem("2Ô∏è‚É£ ‚úÖ Tela 14 detectada - Corretor Anterior aparece!")
                
                # PASSO 2: Processar a Tela 14
                exibir_mensagem(f"3Ô∏è‚É£ üë®‚Äçüíº Processando Tela 14: continuar_com_corretor_anterior = {continuar_com_corretor_anterior}")
                
                # Selecionar op√ß√£o baseada no par√¢metro
                if continuar_com_corretor_anterior:
                    exibir_mensagem("4Ô∏è‚É£ ‚úÖ Selecionando 'Continuar com corretor anterior'...")
                    # Tentar seletores mais simples e robustos
                    try:
                        # Primeiro tentar por texto
                        page.locator("text=Continuar com corretor anterior").first.click()
                        exibir_mensagem("5Ô∏è‚É£ ‚úÖ Op√ß√£o 'Continuar com corretor anterior' selecionada por texto")
                    except:
                        try:
                            # Tentar por radio button
                            page.locator("input[type='radio'][value='sim']").first.click()
                            exibir_mensagem("5Ô∏è‚É£ ‚úÖ Op√ß√£o 'Continuar com corretor anterior' selecionada por radio")
                        except:
                            # Tentar por label
                            page.locator("label:has-text('Continuar')").first.click()
                            exibir_mensagem("5Ô∏è‚É£ ‚úÖ Op√ß√£o 'Continuar com corretor anterior' selecionada por label")
                else:
                    exibir_mensagem("4Ô∏è‚É£ ‚úÖ Selecionando 'N√£o continuar com corretor anterior'...")
                    try:
                        # Primeiro tentar por texto
                        page.locator("text=N√£o continuar com corretor anterior").first.click()
                        exibir_mensagem("5Ô∏è‚É£ ‚úÖ Op√ß√£o 'N√£o continuar com corretor anterior' selecionada por texto")
                    except:
                        try:
                            # Tentar por radio button
                            page.locator("input[type='radio'][value='nao']").first.click()
                            exibir_mensagem("5Ô∏è‚É£ ‚úÖ Op√ß√£o 'N√£o continuar com corretor anterior' selecionada por radio")
                        except:
                            # Tentar por label
                            page.locator("label:has-text('N√£o')").first.click()
                            exibir_mensagem("5Ô∏è‚É£ ‚úÖ Op√ß√£o 'N√£o continuar com corretor anterior' selecionada por label")
                
                # PASSO 3: Clicar no bot√£o Continuar
                exibir_mensagem("6Ô∏è‚É£ üîÑ Clicando no bot√£o 'Continuar'...")
                botao_continuar = page.locator('p.font-semibold.font-workSans.cursor-pointer.text-sm.leading-6:has-text("Continuar")')
                if botao_continuar.is_visible():
                    botao_continuar.click()
                    exibir_mensagem("7Ô∏è‚É£ ‚úÖ Bot√£o 'Continuar' clicado com sucesso")
                else:
                    exibir_mensagem("7Ô∏è‚É£ ‚ö†Ô∏è Bot√£o 'Continuar' n√£o encontrado")
                    return False
                
                # PASSO 4: Aguardar transi√ß√£o para pr√≥xima tela
                exibir_mensagem("8Ô∏è‚É£ ‚è≥ Aguardando transi√ß√£o para pr√≥xima tela...")
                page.wait_for_selector("text=Por favor, aguarde. Estamos buscando o corretor ideal para voc√™!", timeout=5000)
                exibir_mensagem("9Ô∏è‚É£ ‚úÖ TELA 14 CONCLU√çDA!")
                
                return True
            else:
                exibir_mensagem("2Ô∏è‚É£ ‚ÑπÔ∏è Tela 14 n√£o aparece - n√£o h√° cota√ß√£o anterior para este cliente")
                exibir_mensagem("3Ô∏è‚É£ ‚ÑπÔ∏è Pulando para pr√≥xima tela...")
                return True  # Retorna True mesmo n√£o aparecendo, pois √© condicional
                
        except Exception as e:
            exibir_mensagem(f"2Ô∏è‚É£ ‚ÑπÔ∏è Tela 14 n√£o detectada: {str(e)}")
            exibir_mensagem("3Ô∏è‚É£ ‚ÑπÔ∏è Pulando para pr√≥xima tela...")
            return True  # Retorna True mesmo n√£o aparecendo, pois √© condicional
        
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na Tela 14: {str(e)}")
        return False

def navegar_tela_15_playwright(page, email_login, senha_login, parametros_tempo):
    """
    TELA 15: Resultado Final (DUAS FASES)
    
    DESCRI√á√ÉO:
        Implementa as duas fases da Tela 15:
        FASE 1: Mapa + Timer regressivo (2:43 minutos)
        FASE 2: Tela de c√°lculo + Modal de login + Modal CPF divergente
        
    ELEMENTOS IDENTIFICADOS:
        FASE 1:
        - Modal timer: text=Por favor, aguarde. Estamos buscando o corretor ideal para voc√™!
        - Timer: text=Tempo estimado em 02:43
        
        FASE 2:
        - Modal login: MuiBackdrop-root
        - Email: #emailTelaLogin
        - Senha: #senhaTelaLogin
        - Bot√£o Acessar: #gtm-telaLoginBotaoAcessar
        - Modal CPF divergente: text=CPF informado n√£o corresponde √† conta
        - Bot√£o "Logar com outra conta": #logarComOutraContaModalAssociarUsuario
        
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        email_login: Email para login
        senha_login: Senha para login
        
    RETORNO:
        bool: True se sucesso, False se falha
    """
    try:
        exibir_mensagem("\n" + "="*50)
        exibir_mensagem("üéØ TELA 15: RESULTADO FINAL (DUAS FASES)")
        exibir_mensagem("="*50)
        
        # ========================================
        # FASE 1: MAPA + TIMER REGRESSIVO
        # ========================================
        exibir_mensagem("üîÑ FASE 1: Aguardando mapa e timer regressivo...")
        
        # PASSO 1: Aguardar modal com timer aparecer
        exibir_mensagem("‚è≥ Aguardando modal com timer...")
        
        try:
            # Aguardar especificamente pelo modal com timer (timeout otimizado)
            modal_timer = page.locator("text=Por favor, aguarde. Estamos buscando o corretor ideal para voc√™!")
            modal_timer.wait_for(timeout=5000)
            exibir_mensagem("‚úÖ Modal com timer detectado!")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Modal com timer n√£o detectado: {str(e)}")
            exibir_mensagem("‚ÑπÔ∏è Continuando para Fase 2...")
        
        # PASSO 2: Aguardar timer regressivo (aproximadamente 2:43 minutos)
        exibir_mensagem("‚è≥ Aguardando timer regressivo (2:43 minutos)...")
        
        # Aguardar aproximadamente 2:43 minutos (163 segundos)
        tempo_timer = 163
        tempo_inicio_timer = time.time()
        
        while (time.time() - tempo_inicio_timer) < tempo_timer:
            try:
                # Verificar se ainda est√° no timer
                timer_atual = page.locator("text=Tempo estimado em")
                if timer_atual.count() > 0:
                    tempo_decorrido = int(time.time() - tempo_inicio_timer)
                    tempo_restante = tempo_timer - tempo_decorrido
                    exibir_mensagem(f"‚è≥ Timer em andamento... ({tempo_restante}s restantes)")
                else:
                    exibir_mensagem("‚úÖ Timer conclu√≠do!")
                    break
            except:
                pass
            
            try:
                page.wait_for_selector("text=Tempo estimado em", timeout=10000)
            except:
                break
        
        exibir_mensagem("‚úÖ FASE 1 CONCLU√çDA!")
        
        # ========================================
        # FASE 2: TELA DE C√ÅLCULO + MODAL LOGIN
        # ========================================
        exibir_mensagem("üîÑ FASE 2: Aguardando tela de c√°lculo e modal de login...")
        
        # PASSO 3: Aguardar tela de c√°lculo aparecer
        exibir_mensagem("‚è≥ Aguardando tela de c√°lculo...")
        page.wait_for_selector("text=Acesse sua conta para visualizar o resultado final", timeout=8000)
        
        # PASSO 4: Aguardar modal de login aparecer
        exibir_mensagem("‚è≥ Aguardando modal de login...")
        
        try:
            # Aguardar especificamente pelo modal de login (timeout otimizado)
            modal_login = page.locator("text=Acesse sua conta para visualizar o resultado final")
            modal_login.wait_for(timeout=5000)
            exibir_mensagem("‚úÖ Modal de login detectado!")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Modal de login n√£o detectado: {str(e)}")
            return False
        
        # PASSO 5: Preencher email
        exibir_mensagem("üìß Preenchendo email...")
        
        try:
            # Aguardar especificamente pelo campo de email estar pronto
            campo_email = page.locator("#emailTelaLogin")
            campo_email.wait_for(timeout=3000)
            campo_email.fill(email_login)
            exibir_mensagem(f"‚úÖ Email preenchido: {email_login}")
        except Exception as e:
            exibir_mensagem(f"‚ùå Erro ao preencher email: {str(e)}")
            return False
        
        # PASSO 6: Preencher senha
        exibir_mensagem("üîí Preenchendo senha...")
        
        try:
            # Aguardar especificamente pelo campo de senha estar pronto
            campo_senha = page.locator("#senhaTelaLogin")
            campo_senha.wait_for(timeout=3000)
            campo_senha.fill(senha_login)
            exibir_mensagem("‚úÖ Senha preenchida")
        except Exception as e:
            exibir_mensagem(f"‚ùå Erro ao preencher senha: {str(e)}")
            return False
        
        # PASSO 7: CAPTURA DE TELA E LOGS DETALHADOS DO MODAL
        exibir_mensagem("üì∏ CAPTURANDO TELA DO MODAL DE LOGIN...")
        
        try:
            # Capturar screenshot do modal
            timestamp = time.strftime('%Y%m%d_%H%M%S')
            screenshot_path = f"modal_login_{timestamp}.png"
            page.screenshot(path=screenshot_path, full_page=True)
            exibir_mensagem(f"üì∏ Screenshot salvo: {screenshot_path}")
            
            # Verificar se os campos est√£o realmente preenchidos
            valor_email_campo = campo_email.input_value()
            valor_senha_campo = campo_senha.input_value()
            
            exibir_mensagem(f"üîç VERIFICA√á√ÉO DOS CAMPOS:")
            exibir_mensagem(f"   üìß Email no campo: '{valor_email_campo}'")
            exibir_mensagem(f"   üîí Senha no campo: '{valor_senha_campo}'")
            exibir_mensagem(f"   üìß Email esperado: '{email_login}'")
            exibir_mensagem(f"   üîí Senha esperada: '{senha_login}'")
            
            # Verificar se os campos est√£o corretos
            if valor_email_campo.lower() == email_login.lower():
                exibir_mensagem("‚úÖ Email preenchido corretamente!")
            else:
                exibir_mensagem("‚ùå Email N√ÉO foi preenchido corretamente!")
            
            if valor_senha_campo == senha_login:
                exibir_mensagem("‚úÖ Senha preenchida corretamente!")
            else:
                exibir_mensagem("‚ùå Senha N√ÉO foi preenchida corretamente!")
            
            # Verificar se o bot√£o "Acessar" est√° vis√≠vel
            botao_acessar = page.locator("#gtm-telaLoginBotaoAcessar")
            if botao_acessar.is_visible():
                exibir_mensagem("‚úÖ Bot√£o 'Acessar' est√° vis√≠vel e pronto para clicar!")
                texto_botao = botao_acessar.text_content()
                exibir_mensagem(f"   üìù Texto do bot√£o: '{texto_botao}'")
            else:
                exibir_mensagem("‚ùå Bot√£o 'Acessar' N√ÉO est√° vis√≠vel!")
            
            # Verificar se o modal est√° realmente presente
            modal_presente = page.locator("text=Acesse sua conta para visualizar o resultado final")
            if modal_presente.count() > 0:
                exibir_mensagem("‚úÖ Modal de login est√° presente na tela!")
            else:
                exibir_mensagem("‚ùå Modal de login N√ÉO est√° presente na tela!")
            
            # Capturar HTML do modal para debug
            try:
                modal_html = page.locator(".MuiBackdrop-root").inner_html()
                exibir_mensagem(f"üîç HTML do modal capturado (primeiros 200 chars): {modal_html[:200]}...")
            except Exception as e:
                exibir_mensagem(f"‚ö†Ô∏è Erro ao capturar HTML do modal: {str(e)}")
            
        except Exception as e:
            exibir_mensagem(f"‚ùå Erro durante captura de tela/logs: {str(e)}")
        
        # PASSO 8: Clicar em "Acessar"
        exibir_mensagem("üîÑ Clicando em 'Acessar'...")
        
        try:
            # Aguardar especificamente pelo bot√£o estar pronto
            botao_acessar = page.locator("#gtm-telaLoginBotaoAcessar")
            botao_acessar.wait_for(timeout=3000)
            
            if botao_acessar.is_visible():
                botao_acessar.click()
                exibir_mensagem("‚úÖ Bot√£o 'Acessar' clicado com sucesso!")
                
                # Aguardar poss√≠vel redirecionamento ou modal CPF divergente
                exibir_mensagem("‚è≥ Aguardando resposta do login...")
                time.sleep(parametros_tempo['tempo_carregamento'])  # ESTRAT√âGIA SIMPLES: time.sleep ao inv√©s de waits complexos
                
                # Verificar se apareceu modal CPF divergente
                try:
                    modal_cpf = page.locator("text=CPF informado n√£o corresponde √† conta")
                    if modal_cpf.count() > 0:
                        exibir_mensagem("‚úÖ Modal CPF divergente detectado!")
                        
                        # Clicar no bot√£o "Manter Login atual"
                        try:
                            exibir_mensagem("üîç Procurando bot√£o 'Manter Login atual'...")
                            
                            # Tentar pelo ID espec√≠fico
                            botao_manter_login = page.locator("#manterLoginAtualModalAssociarUsuario")
                            if botao_manter_login.is_visible():
                                botao_manter_login.click()
                                exibir_mensagem("‚úÖ Bot√£o 'Manter Login atual' clicado pelo ID!")
                                time.sleep(parametros_tempo['tempo_estabilizacao'])
                            else:
                                # Tentar pelo texto
                                botao_manter_login = page.locator("text=Manter Login atual")
                                if botao_manter_login.is_visible():
                                    botao_manter_login.click()
                                    exibir_mensagem("‚úÖ Bot√£o 'Manter Login atual' clicado pelo texto!")
                                    time.sleep(parametros_tempo['tempo_estabilizacao'])
                                else:
                                    exibir_mensagem("‚ö†Ô∏è Bot√£o 'Manter Login atual' n√£o encontrado")
                        except Exception as e:
                            exibir_mensagem(f"‚ö†Ô∏è Erro ao clicar no bot√£o 'Manter Login atual': {str(e)}")
                    else:
                        exibir_mensagem("‚ÑπÔ∏è Modal CPF divergente n√£o apareceu - login pode ter sido bem-sucedido")
                except Exception as e:
                    exibir_mensagem(f"‚ö†Ô∏è Erro ao verificar modal CPF: {str(e)}")
                
            else:
                exibir_mensagem("‚ùå Bot√£o 'Acessar' n√£o est√° vis√≠vel!")
                return False
        except Exception as e:
            exibir_mensagem(f"‚ùå Erro ao clicar em 'Acessar': {str(e)}")
            return False
        
        exibir_mensagem("‚úÖ LOGIN CONCLU√çDO!")
        
        # ========================================
        # CAPTURA DE DADOS DOS PLANOS DE SEGURO
        # ========================================
        exibir_mensagem("üìä INICIANDO CAPTURA DE DADOS DOS PLANOS...")
        
        # Aguardar carregamento dos planos (aguardando bot√£o espec√≠fico)
        exibir_mensagem("‚è≥ Aguardando carregamento da p√°gina principal dos planos...")
        try:
            # Aguardar pelo texto de sucesso final que indica que a p√°gina foi carregada
            page.wait_for_selector("text=Parab√©ns, chegamos ao resultado final da cota√ß√£o!", timeout=180000)
            exibir_mensagem("‚úÖ P√°gina principal dos planos carregada!")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Texto de sucesso final n√£o encontrado: {str(e)}")
            exibir_mensagem("‚ÑπÔ∏è Usando fallback com time.sleep...")
            time.sleep(parametros_tempo['tempo_carregamento'])  # Fallback para time.sleep
        
        # Capturar dados dos planos
        dados_planos = capturar_dados_planos_seguro(page, parametros_tempo)
        
        if dados_planos:
            exibir_mensagem("‚úÖ DADOS DOS PLANOS CAPTURADOS COM SUCESSO!")
            exibir_mensagem("üìã RESUMO DOS DADOS CAPTURADOS:")
            exibir_mensagem(f"   üìä Plano Recomendado: {dados_planos['plano_recomendado'].get('valor', 'N/A')}")
            exibir_mensagem(f"   üìä Plano Alternativo: {dados_planos['plano_alternativo'].get('valor', 'N/A')}")
            
            # RETORNO FINAL SIMPLES
            print("\n" + "="*60)
            print("üìã RETORNO FINAL - TELA 15")
            print("="*60)
            print(json.dumps(dados_planos, indent=2, ensure_ascii=False))
            print("="*60)
        else:
            exibir_mensagem("‚ö†Ô∏è FALHA NA CAPTURA DE DADOS DOS PLANOS")
        
        exibir_mensagem("üéØ TELA 15 FINALIZADA COM SUCESSO!")
        
        return True
        
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na Tela 15: {str(e)}")
        return False

# ========================================
# FUN√á√ïES DE CAPTURA DE DADOS
# ========================================

def capturar_dados_carrossel_estimativas_playwright(page: Page) -> Dict[str, Any]:
    """
    ================================================================================
    FUN√á√ÉO: capturar_dados_carrossel_estimativas_playwright()
    ================================================================================
    
    DESCRI√á√ÉO:
        Captura dados estruturados do carrossel de estimativas da Tela 5.
        Esta fun√ß√£o √© o cora√ß√£o da captura de dados, extraindo informa√ß√µes
        detalhadas de cada card de cobertura, incluindo valores monet√°rios,
        benef√≠cios e metadados.
    
    ELEMENTOS CAPTURADOS:
        - Nome da cobertura: "button p.text-white"
        - Valores monet√°rios: "p.text-primary.underline"
        - Benef√≠cios: "div.gap-3.flex.flex-col.pl-4.mt-3"
        - Texto completo: Conte√∫do total do card
    
    ESTRAT√âGIA DE CAPTURA:
        1. Localizar todos os cards de cobertura
        2. Para cada card:
           a. Extrair nome da cobertura
           b. Parsear valores "De R$ X at√© R$ Y"
           c. Capturar lista de benef√≠cios
           d. Estruturar dados em JSON
        3. Salvar dados em arquivo tempor√°rio
        4. Retornar estrutura completa
    
    T√âCNICAS UTILIZADAS:
        - Regex patterns para parsing de valores monet√°rios
        - Seletores CSS espec√≠ficos para cada elemento
        - Estrutura√ß√£o hier√°rquica de dados
        - Fallbacks para casos de erro
    
    PAR√ÇMETROS:
        page (Page): Objeto page do Playwright
    
    RETORNO:
        dict: Estrutura JSON com dados capturados ou None se erro
    
    ESTRUTURA DE RETORNO:
        {
            "timestamp": "2025-09-02T03:45:30.523994",
            "tela": 5,
            "nome_tela": "Estimativa Inicial",
            "coberturas_detalhadas": [
                {
                    "indice": 1,
                    "cobertura": "Cobertura Compreensiva",
                    "valores": {"de": "R$ 1.600,00", "ate": "R$ 2.200,00"},
                    "beneficios": [{"nome": "Colis√£o e Acidentes", "status": "incluido"}]
                }
            ],
            "valores_encontrados": 6,
            "beneficios_gerais": [...],
            "seguradoras": [...],
            "elementos_detectados": [...]
        }
    
    LOGS:
        - "üîç Encontrados {X} cards de cobertura (bg-primary)"
        - "üìã Card {X}: {cobertura} - De {valor} at√© {valor}"
        - "üíæ DADOS SALVOS: {caminho_arquivo}"
        - "üìä RESUMO: {X} coberturas detalhadas, {X} benef√≠cios gerais"
        - "‚ùå ERRO na captura de dados: {erro}"
    ================================================================================
    """
    try:
        # PASSO 1: Inicializar estrutura de dados do carrossel
        # Esta estrutura segue o padr√£o definido no exemplo_json_retorno.json
        dados_carrossel = {
            "timestamp": datetime.now().isoformat(),  # Timestamp ISO para rastreamento
            "tela": 5,                                # N√∫mero da tela atual
            "nome_tela": "Estimativa Inicial",        # Nome descritivo da tela
            "url": str(page.url),                     # URL atual da p√°gina
            "titulo": str(page.title),                # T√≠tulo da p√°gina
            "coberturas_detalhadas": [],              # Lista de coberturas capturadas
            "beneficios_gerais": [],                  # Benef√≠cios encontrados na p√°gina
            "valores_encontrados": 0,                 # Contador de valores monet√°rios
            "seguradoras": [],                        # Seguradoras detectadas
            "elementos_detectados": []                # Elementos especiais detectados
        }
        
        # DEBUG: Verificar quais elementos est√£o na p√°gina
        exibir_mensagem("üîç DEBUG: Verificando elementos na p√°gina...")
        
        # ESTRAT√âGIA 1: Tentar capturar cards usando seletores mais espec√≠ficos
        # Primeiro, vamos tentar encontrar os cards de cobertura usando diferentes estrat√©gias
        
        # Estrat√©gia 1.1: Buscar por elementos que contenham "Cobertura" e valores monet√°rios
        exibir_mensagem("üîç DEBUG: Estrat√©gia 1.1 - Buscando cards com 'Cobertura'...")
        
        # Buscar por elementos que contenham "Cobertura" e "R$" no mesmo contexto
        cards_cobertura = page.locator("div:has-text('Cobertura'):has-text('R$')")
        exibir_mensagem(f"üîç DEBUG: Cards com 'Cobertura' e 'R$' encontrados: {cards_cobertura.count()}")
        
        if cards_cobertura.count() > 0:
            exibir_mensagem(f"‚úÖ Encontrados {cards_cobertura.count()} cards de cobertura com valores")
            
            for i in range(cards_cobertura.count()):
                try:
                    card = cards_cobertura.nth(i)
                    card_text = card.text_content().strip() if card.text_content() else ""
                    
                    exibir_mensagem(f"üîç DEBUG: Card {i+1} texto completo: '{card_text}'")
                    
                    if len(card_text) < 20:  # Se o texto for muito curto, tentar pegar o elemento pai
                        exibir_mensagem(f"üîç DEBUG: Card {i+1} texto muito curto, buscando elemento pai...")
                        card = card.locator("..").first  # Elemento pai
                        card_text = card.text_content().strip() if card.text_content() else ""
                        exibir_mensagem(f"üîç DEBUG: Card {i+1} texto do pai: '{card_text[:200]}...'")
                    
                    cobertura_info = {
                        "indice": i + 1,
                        "nome_cobertura": "",
                        "valores": {
                            "de": "",
                            "ate": ""
                        },
                        "beneficios": [],
                        "texto_completo": card_text
                    }
                    
                    # Extrair nome da cobertura usando regex mais robusto
                    cobertura_patterns = [
                        r"Cobertura\s+([A-Za-z√Ä-√ø\s]+?)(?:\s|$|R\$)",
                        r"([A-Za-z√Ä-√ø\s]+?)\s+Cobertura",
                        r"Cobertura\s+Compreensiva",
                        r"Cobertura\s+Roubo\s+e\s+Furto",
                        r"Cobertura\s+RCF"
                    ]
                    
                    for pattern in cobertura_patterns:
                        match = re.search(pattern, card_text, re.IGNORECASE)
                        if match:
                            if "Compreensiva" in pattern:
                                cobertura_info["nome_cobertura"] = "Cobertura Compreensiva"
                            elif "Roubo" in pattern:
                                cobertura_info["nome_cobertura"] = "Cobertura Roubo e Furto"
                            elif "RCF" in pattern:
                                cobertura_info["nome_cobertura"] = "Cobertura RCF"
                            else:
                                cobertura_info["nome_cobertura"] = match.group(1).strip()
                            exibir_mensagem(f"üîç DEBUG: Nome encontrado via regex: '{cobertura_info['nome_cobertura']}'")
                            break
                    
                    # Extrair valores monet√°rios usando regex mais espec√≠fico
                    valor_patterns = [
                        r"De\s*R\$\s*([0-9.,]+)\s*at√©\s*R\$\s*([0-9.,]+)",
                        r"R\$\s*([0-9.,]+)\s*at√©\s*R\$\s*([0-9.,]+)",
                        r"([0-9.,]+)\s*at√©\s*([0-9.,]+)"
                    ]
                    
                    for pattern in valor_patterns:
                        match = re.search(pattern, card_text, re.IGNORECASE)
                        if match:
                            cobertura_info["valores"]["de"] = f"R$ {match.group(1)}"
                            cobertura_info["valores"]["ate"] = f"R$ {match.group(2)}"
                            exibir_mensagem(f"üîç DEBUG: Valores extra√≠dos: De {cobertura_info['valores']['de']} at√© {cobertura_info['valores']['ate']}")
                            break
                    
                    # Extrair benef√≠cios conhecidos do texto do card
                    beneficios_conhecidos = [
                        "Colis√£o e Acidentes", "Roubo e Furto", "Inc√™ndio", "Danos a terceiros",
                        "Assist√™ncia 24h", "Carro Reserva", "Vidros", "Roubo", "Furto",
                        "Danos parciais em tentativas de roubo", "Danos materiais a terceiros",
                        "Danos corporais a terceiro", "Assist√™ncia", "Carro reserva",
                        "Vidros", "Acidentes", "Colis√£o", "Terceiros", "Materiais", "Corporais"
                    ]
                    
                    for beneficio in beneficios_conhecidos:
                        if beneficio.lower() in card_text.lower():
                            cobertura_info["beneficios"].append({
                                "nome": beneficio,
                                "status": "incluido"
                            })
                    
                    dados_carrossel["coberturas_detalhadas"].append(cobertura_info)
                    exibir_mensagem(f"üìã Card {len(dados_carrossel['coberturas_detalhadas'])}: {cobertura_info['nome_cobertura']} - De {cobertura_info['valores']['de']} at√© {cobertura_info['valores']['ate']}")
                    
                except Exception as e:
                    exibir_mensagem(f"‚ö†Ô∏è Erro ao processar card {i+1}: {str(e)}")
                    continue
        
        # ESTRAT√âGIA 1.2: Se n√£o encontrou cards com a estrat√©gia anterior, tentar seletores espec√≠ficos
        if len(dados_carrossel["coberturas_detalhadas"]) == 0:
            exibir_mensagem("üîç DEBUG: Estrat√©gia 1.2 - Tentando seletores espec√≠ficos...")
            
            # Tentar diferentes seletores para encontrar os cards
            # v3.7.0.2: Estrat√©gia h√≠brida robusta para seletores de cards
            seletores_cards = [
                'div[role="group"][aria-roledescription="slide"]',  # ‚Üê NOVO PRINCIPAL
                'div:has(p:has-text("Cobertura")):has(span:has-text("R$"))',  # ‚Üê NOVO CONTE√öDO
                'div.border-primary.rounded-xl:has(.bg-primary)',  # ‚Üê NOVO LAYOUT
                "div.bg-primary",  # ‚Üê FALLBACK ATUAL
                "div[class*='bg-primary']",
                "div[class*='card']",
                "div[class*='cobertura']",
                "div:has(button)",
                "div:has(p.text-white)"
            ]
            
            for seletor in seletores_cards:
                try:
                    cards = page.locator(seletor)
                    exibir_mensagem(f"üîç DEBUG: Seletor '{seletor}' encontrou: {cards.count()} elementos")
                    
                    if cards.count() > 0:
                        for i in range(min(cards.count(), 5)):  # Limitar a 5 cards
                            try:
                                card = cards.nth(i)
                                card_text = card.text_content().strip() if card.text_content() else ""
                                
                                exibir_mensagem(f"üîç DEBUG: Card {i+1} com seletor '{seletor}': '{card_text[:100]}...'")
                                
                                # Verificar se o card tem conte√∫do relevante
                                if "cobertura" in card_text.lower() or "r$" in card_text.lower():
                                    cobertura_info = {
                                        "indice": len(dados_carrossel["coberturas_detalhadas"]) + 1,
                                        "nome_cobertura": "",
                                        "valores": {"de": "", "ate": ""},
                                        "beneficios": [],
                                        "texto_completo": card_text
                                    }
                                    
                                    # Extrair nome e valores (mesma l√≥gica anterior)
                                    # ... (c√≥digo de extra√ß√£o)
                                    
                                    dados_carrossel["coberturas_detalhadas"].append(cobertura_info)
                                    exibir_mensagem(f"üìã Card encontrado via '{seletor}': {cobertura_info['nome_cobertura']}")
                                    
                            except Exception as e:
                                exibir_mensagem(f"‚ö†Ô∏è Erro ao processar card com seletor '{seletor}': {str(e)}")
                                continue
                        
                        if len(dados_carrossel["coberturas_detalhadas"]) > 0:
                            break  # Se encontrou cards, parar de tentar outros seletores
                            
                except Exception as e:
                    exibir_mensagem(f"‚ö†Ô∏è Erro com seletor '{seletor}': {str(e)}")
                    continue
        
        # ESTRAT√âGIA 2: Fallback - Buscar por valores monet√°rios na p√°gina inteira
        if len(dados_carrossel["coberturas_detalhadas"]) == 0:
            exibir_mensagem("üîç DEBUG: Estrat√©gia 2 - Fallback: buscando valores monet√°rios na p√°gina...")
            
            # Buscar por todos os elementos que contenham "R$"
            elementos_r = page.locator("text=R$")
            exibir_mensagem(f"üîç DEBUG: Elementos com 'R$' encontrados: {elementos_r.count()}")
            
            if elementos_r.count() > 0:
                for i in range(min(elementos_r.count(), 10)):  # Limitar a 10 elementos
                    try:
                        elemento = elementos_r.nth(i)
                        elemento_text = elemento.text_content().strip() if elemento.text_content() else ""
                        
                        # Buscar o contexto do elemento (elemento pai)
                        contexto = elemento.locator("..").first
                        contexto_text = contexto.text_content().strip() if contexto.text_content() else ""
                        
                        exibir_mensagem(f"üîç DEBUG: Elemento R$ {i+1}: '{elemento_text}' | Contexto: '{contexto_text[:100]}...'")
                        
                        # Se o contexto cont√©m "Cobertura", pode ser um card v√°lido
                        if "cobertura" in contexto_text.lower():
                            cobertura_info = {
                                "indice": len(dados_carrossel["coberturas_detalhadas"]) + 1,
                                "nome_cobertura": "Cobertura Detectada",
                                "valores": {"de": "", "ate": ""},
                                "beneficios": [],
                                "texto_completo": contexto_text
                            }
                            
                            # Extrair valores
                            valor_patterns = [
                                r"De\s*R\$\s*([0-9.,]+)\s*at√©\s*R\$\s*([0-9.,]+)",
                                r"R\$\s*([0-9.,]+)\s*at√©\s*R\$\s*([0-9.,]+)"
                            ]
                            
                            for pattern in valor_patterns:
                                match = re.search(pattern, contexto_text, re.IGNORECASE)
                                if match:
                                    cobertura_info["valores"]["de"] = f"R$ {match.group(1)}"
                                    cobertura_info["valores"]["ate"] = f"R$ {match.group(2)}"
                                    break
                            
                            dados_carrossel["coberturas_detalhadas"].append(cobertura_info)
                            exibir_mensagem(f"üìã Valor encontrado: De {cobertura_info['valores']['de']} at√© {cobertura_info['valores']['ate']}")
                            
                    except Exception as e:
                        exibir_mensagem(f"‚ö†Ô∏è Erro ao processar elemento R$ {i+1}: {str(e)}")
                        continue
        
        # Contar valores encontrados
        dados_carrossel["valores_encontrados"] = len(dados_carrossel["coberturas_detalhadas"])
        
        # Procurar por valores monet√°rios gerais (fallback)
        valores_monetarios = page.locator("text=R$")
        dados_carrossel["valores_encontrados"] = max(dados_carrossel["valores_encontrados"], valores_monetarios.count())
        
        # Procurar por benef√≠cios gerais na p√°gina
        beneficios_gerais = [
            "Colis√£o e Acidentes", "Roubo e Furto", "Inc√™ndio", "Danos a terceiros",
            "Assist√™ncia 24h", "Carro Reserva", "Vidros", "Roubo", "Furto",
            "Danos parciais em tentativas de roubo", "Danos materiais a terceiros",
            "Danos corporais a terceiro"
        ]
        
        for beneficio in beneficios_gerais:
            elementos = page.locator(f"text={beneficio}")
            if elementos.count() > 0:
                dados_carrossel["beneficios_gerais"].append({
                    "nome": beneficio,
                    "encontrado": True,
                    "quantidade_elementos": elementos.count()
                })
        
        # Procurar por seguradoras
        seguradoras_texto = [
            "Seguradora", "seguradora", "Seguro", "seguro",
            "Allianz", "allianz", "Porto", "porto", "SulAm√©rica", "sulamerica",
            "Bradesco", "bradesco", "Ita√∫", "itau", "Santander", "santander"
        ]
        
        for seguradora in seguradoras_texto:
            elementos = page.locator(f"text={seguradora}")
            if elementos.count() > 0:
                for j in range(min(elementos.count(), 3)):  # Limitar a 3 elementos
                    texto = elementos.nth(j).text_content().strip()
                    if texto and len(texto) > 2:
                        dados_carrossel["seguradoras"].append({
                            "nome": texto,
                            "seletor": "texto_contido"
                        })
        
        # Procurar por elementos espec√≠ficos do carrossel
        elementos_carrossel = page.locator("[class*='carousel'], [class*='slider'], [class*='swiper']")
        if elementos_carrossel.count() > 0:
            dados_carrossel["elementos_detectados"].append("carrossel_detectado")
        
        # Capturar texto completo da p√°gina para an√°lise
        page_content = page.content()
        page_text = page_content.lower() if page_content else ""
        
        # Verificar presen√ßa de palavras-chave
        palavras_chave = ["estimativa", "carrossel", "cobertura", "pre√ßo", "valor", "plano"]
        for palavra in palavras_chave:
            if palavra in page_text:
                dados_carrossel["elementos_detectados"].append(f"palavra_chave: {palavra}")
        
        # Salvar dados em arquivo tempor√°rio
        temp_dir = "temp/captura_carrossel"
        os.makedirs(temp_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        json_path = f"{temp_dir}/carrossel_estimativas_{timestamp}.json"
        
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(dados_carrossel, f, indent=2, ensure_ascii=False)
        
        exibir_mensagem(f"üíæ DADOS SALVOS: {json_path}")
        exibir_mensagem(f"üìä RESUMO: {len(dados_carrossel['coberturas_detalhadas'])} coberturas detalhadas, {len(dados_carrossel['beneficios_gerais'])} benef√≠cios gerais")
        
        return dados_carrossel
        
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na captura de dados: {str(e)}")
        return None

def capturar_dados_planos_seguro(page: Page, parametros_tempo) -> Dict[str, Any]:
    """
    CAPTURA DADOS DOS PLANOS DE SEGURO - ABORDAGEM H√çBRIDA
    
    DESCRI√á√ÉO:
        Captura os dados dos planos de seguro (Recomendado e Alternativo) na Tela 15.
        Usa abordagem h√≠brida: seletores + extra√ß√£o de texto completo + parse estruturado + regex.
        Baseado na implementa√ß√£o Selenium que funcionava corretamente.
        
    ESTRAT√âGIA:
        1. Encontrar containers dos planos usando seletores
        2. Extrair texto completo de cada container
        3. Fazer parse estruturado baseado na posi√ß√£o das linhas
        4. Usar regex como fallback para valores n√£o encontrados
        5. Mapear dados para estrutura JSON estruturada
        
    RETORNO:
        dict: Dicion√°rio com os dados dos planos estruturados
    """
    try:
        exception_handler.definir_tela_atual("CAPTURA_DADOS_PLANOS")
        exibir_mensagem("üìä CAPTURANDO DADOS DOS PLANOS DE SEGURO - ABORDAGEM H√çBRIDA")
        exibir_mensagem("=" * 70)
        
        # Aguardar carregamento dos planos (estrat√©gia simples)
        time.sleep(parametros_tempo['tempo_estabilizacao'])
        
        dados_planos = {
            "plano_recomendado": {
                "plano": "Plano recomendado",
                "valor": "N/A",
                "forma_pagamento": "N/A",
                "parcelamento": "N/A",
                "valor_franquia": "N/A",
                "valor_mercado": "N/A",
                "assistencia": False,
                "vidros": False,
                "carro_reserva": False,
                "danos_materiais": "N/A",
                "danos_corporais": "N/A",
                "danos_morais": "N/A",
                "morte_invalidez": "N/A"
            },
            "plano_alternativo": {
                "plano": "Plano alternativo",
                "valor": "N/A",
                "forma_pagamento": "N/A",
                "parcelamento": "N/A",
                "valor_franquia": "N/A",
                "valor_mercado": "N/A",
                "assistencia": False,
                "vidros": False,
                "carro_reserva": False,
                "danos_materiais": "N/A",
                "danos_corporais": "N/A",
                "danos_morais": "N/A",
                "morte_invalidez": "N/A"
            }
        }
        
        # ========================================
        # ETAPA 1: ENCONTRAR CONTAINERS DOS PLANOS
        # ========================================
        exibir_mensagem("üîç ETAPA 1: Encontrando containers dos planos...")
        
        # Estrat√©gia 1: Procurar por divs que cont√™m "Plano recomendado"
        planos_recomendados = page.locator("//*[contains(text(), 'Plano recomendado')]").all()
        
        # Estrat√©gia 2: Procurar por divs com classes espec√≠ficas que cont√™m planos
        planos_divs = page.locator("//div[contains(@class, 'md:w-80') or contains(@class, 'border-4') or contains(@class, 'border-primary')]").all()
        
        # Estrat√©gia 3: Procurar por elementos que cont√™m valores monet√°rios espec√≠ficos
        elementos_valores = page.locator("//*[contains(text(), 'R$')]").all()
        
        # Estrat√©gia 4: Procurar por elementos que cont√™m coberturas espec√≠ficas
        elementos_coberturas = page.locator("//*[contains(text(), 'Franquia') or contains(text(), 'Valor de Mercado') or contains(text(), 'Assist√™ncia') or contains(text(), 'Vidros') or contains(text(), 'Carro Reserva') or contains(text(), 'Danos Materiais') or contains(text(), 'Danos Corporais') or contains(text(), 'Danos Morais') or contains(text(), 'Morte/Invalidez')]").all()
        
        # Combinar todos os elementos encontrados
        todos_elementos = list(set(planos_recomendados + planos_divs + elementos_valores + elementos_coberturas))
        
        exibir_mensagem(f"üìä ELEMENTOS ENCONTRADOS: {len(todos_elementos)}")
        
        # Filtrar elementos que s√£o containers de planos (n√£o apenas texto)
        tabelas_planos = []
        for elem in todos_elementos:
            try:
                # Verificar se o elemento cont√©m m√∫ltiplos valores monet√°rios ou √© um container
                texto = elem.text_content()
                if (texto.count('R$') >= 2 or 
                    'Franquia' in texto or 
                    'Valor de Mercado' in texto or
                    'Plano recomendado' in texto or
                    len(texto) > 100):  # Elementos com muito texto provavelmente s√£o containers
                    tabelas_planos.append(elem)
            except:
                continue
        
        exibir_mensagem(f"üìä CONTAINERS DE PLANOS ENCONTRADOS: {len(tabelas_planos)}")
        
        # ========================================
        # ETAPA 2: ANALISAR CADA CONTAINER
        # ========================================
        for i, elemento in enumerate(tabelas_planos[:10]):  # Limitar a 10 containers
            try:
                tabela_text = elemento.text_content().strip()
                if not tabela_text or len(tabela_text) < 30:
                    continue
                
                exibir_mensagem(f"üìã ANALISANDO CONTAINER {i+1}: {len(tabela_text)} caracteres")
                
                # Determinar se √© plano recomendado ou alternativo
                if "plano recomendado" in tabela_text.lower():
                    plano_tipo = "plano_recomendado"
                    exibir_mensagem("‚úÖ PLANO RECOMENDADO DETECTADO")
                else:
                    plano_tipo = "plano_alternativo"
                    exibir_mensagem("‚úÖ PLANO ALTERNATIVO DETECTADO")
                
                # ETAPA 3: PARSE ESTRUTURADO BASEADO NA POSI√á√ÉO
                # Dividir o texto por quebras de linha para an√°lise estruturada
                linhas = tabela_text.split('\n')
                linhas = [linha.strip() for linha in linhas if linha.strip()]
                
                exibir_mensagem(f"üîç ANALISANDO ESTRUTURA: {len(linhas)} linhas encontradas")
                
                # Determinar se tem t√≠tulo e ajustar √≠ndice de in√≠cio
                tem_titulo = False
                indice_inicio = 0
                
                if len(linhas) > 0:
                    primeira_linha = linhas[0].lower()
                    if "plano recomendado" in primeira_linha or "recomendado" in primeira_linha:
                        tem_titulo = True
                        indice_inicio = 1  # Pular o t√≠tulo
                        exibir_mensagem("‚úÖ T√çTULO DETECTADO - PULANDO PRIMEIRA LINHA")
                
                # Parse estruturado baseado na especifica√ß√£o
                if len(linhas) >= indice_inicio + 8:  # M√≠nimo de 8 campos ap√≥s t√≠tulo
                    try:
                        # 1. Moeda (R$) - posi√ß√£o 0 ou 1 dependendo se tem t√≠tulo
                        moeda = linhas[indice_inicio]
                        if moeda == "R$":
                            exibir_mensagem("‚úÖ MOEDA DETECTADA: R$")
                        
                        # 2. Pre√ßo anual - posi√ß√£o 1 ou 2 dependendo se tem t√≠tulo
                        if indice_inicio + 1 < len(linhas):
                            preco_anual = linhas[indice_inicio + 1]
                            # Validar se √© um pre√ßo (cont√©m n√∫meros e v√≠rgula/ponto)
                            if re.match(r'^[0-9.,]+$', preco_anual):
                                dados_planos[plano_tipo]["valor"] = f"R$ {preco_anual}"
                                exibir_mensagem(f"‚úÖ PRE√áO ANUAL: R$ {preco_anual}")
                        
                        # 3. Periodicidade (anual) - posi√ß√£o 2 ou 3
                        if indice_inicio + 2 < len(linhas):
                            periodicidade = linhas[indice_inicio + 2]
                            if "anual" in periodicidade.lower():
                                dados_planos[plano_tipo]["forma_pagamento"] = periodicidade
                                exibir_mensagem("‚úÖ PERIODICIDADE: Anual")
                        
                        # 4. Forma de pagamento - posi√ß√£o 3 ou 4
                        if indice_inicio + 3 < len(linhas):
                            forma_pagamento = linhas[indice_inicio + 3]
                            dados_planos[plano_tipo]["parcelamento"] = forma_pagamento
                            
                            # Extrair valor de parcelamento se houver
                            # Padr√£o: "Cr√©dito em at√© 1x sem juros ou 10x de R$ 346,82"
                            parcelamento_match = re.search(r'(\d+x)\s*de\s*R\$\s*([0-9.,]+)', forma_pagamento)
                            if parcelamento_match:
                                valor_parcela = parcelamento_match.group(2)
                                exibir_mensagem(f"‚úÖ VALOR PARCELA: R$ {valor_parcela}")
                            
                            exibir_mensagem(f"‚úÖ FORMA PAGAMENTO: {forma_pagamento}")
                        
                        # 5. Franquia - posi√ß√£o 4 ou 5
                        if indice_inicio + 4 < len(linhas):
                            franquia_valor = linhas[indice_inicio + 4]
                            if re.match(r'^R\$\s*[0-9.,]+$', franquia_valor):
                                dados_planos[plano_tipo]["valor_franquia"] = franquia_valor
                                exibir_mensagem(f"‚úÖ FRANQUIA VALOR: {franquia_valor}")
                        
                        # 6. Caracter√≠stica da franquia - posi√ß√£o 5 ou 6
                        if indice_inicio + 5 < len(linhas):
                            franquia_tipo = linhas[indice_inicio + 5]
                            if franquia_tipo.lower() in ["reduzida", "normal"]:
                                exibir_mensagem(f"‚úÖ FRANQUIA TIPO: {franquia_tipo}")
                        
                        # 7. Cobertura do valor do ve√≠culo - posi√ß√£o 6 ou 7
                        if indice_inicio + 6 < len(linhas):
                            cobertura_veiculo = linhas[indice_inicio + 6]
                            if "100% da tabela FIPE" in cobertura_veiculo:
                                dados_planos[plano_tipo]["valor_mercado"] = cobertura_veiculo
                                exibir_mensagem(f"‚úÖ COBERTURA VE√çCULO: {cobertura_veiculo}")
                        
                        # 8-11. Itens adicionais (posi√ß√µes 7-10 ou 8-11)
                        itens_adicionais = []
                        for j in range(indice_inicio + 7, min(indice_inicio + 11, len(linhas))):
                            if j < len(linhas):
                                item = linhas[j]
                                if re.match(r'^R\$\s*[0-9.,]+$', item):
                                    itens_adicionais.append(item)
                        
                        # Mapear itens adicionais para coberturas espec√≠ficas
                        if len(itens_adicionais) >= 4:
                            # Baseado na especifica√ß√£o: Danos Materiais, Danos Corporais, Danos Morais, Morte/Invalidez
                            dados_planos[plano_tipo]["danos_materiais"] = itens_adicionais[0]
                            dados_planos[plano_tipo]["danos_corporais"] = itens_adicionais[1]
                            dados_planos[plano_tipo]["danos_morais"] = itens_adicionais[2]
                            dados_planos[plano_tipo]["morte_invalidez"] = itens_adicionais[3]
                            
                            exibir_mensagem(f"‚úÖ ITENS ADICIONAIS: {len(itens_adicionais)} itens mapeados")
                        
                    except Exception as e:
                        exception_handler.capturar_warning(f"ERRO NO PARSE ESTRUTURADO: {str(e)}", "CAPTURA_DADOS_PLANOS")
                        # Fallback para m√©todo anterior se o parse estruturado falhar
                        exibir_mensagem("üîÑ FALLBACK: Usando m√©todo anterior de extra√ß√£o")
                        
                        # Extrair valores monet√°rios com padr√µes mais espec√≠ficos
                        valor_patterns = [
                            r"R\$\s*([0-9.,]+)",
                            r"([0-9.,]+)\s*anual",
                            r"([0-9.,]+)\s*em at√©",
                            r"R\$\s*([0-9.,]+)\s*anual",
                            r"R\$\s*([0-9.,]+)\s*em at√©"
                        ]
                        
                        valores_encontrados = []
                        for pattern in valor_patterns:
                            matches = re.findall(pattern, tabela_text, re.IGNORECASE)
                            valores_encontrados.extend(matches)
                        
                        # Remover duplicatas e ordenar
                        valores_encontrados = list(set(valores_encontrados))
                        valores_encontrados.sort(key=lambda x: float(x.replace(',', '').replace('.', '')))
                        
                        # Extrair condi√ß√µes de pagamento
                        pagamento_patterns = [
                            r"Cr√©dito em at√© (\d+x)\s*(?:sem juros|com juros)?\s*(?:ou \d+x de R\$\s*([0-9.,]+))?",
                            r"(\d+x)\s*(?:sem juros|com juros)",
                            r"parcelamento\s*(?:sem juros|com juros)"
                        ]
                        
                        for pattern in pagamento_patterns:
                            match = re.search(pattern, tabela_text, re.IGNORECASE)
                            if match:
                                if "Cr√©dito em at√©" in pattern:
                                    dados_planos[plano_tipo]["parcelamento"] = f"{match.group(1)} sem juros"
                                    if match.group(2):
                                        exibir_mensagem(f"‚úÖ VALOR PARCELA (fallback): R$ {match.group(2)}")
                                else:
                                    dados_planos[plano_tipo]["parcelamento"] = match.group(0)
                                break
                        
                        if valores_encontrados:
                            # Procurar por valores espec√≠ficos que vi no HTML
                            for valor in valores_encontrados:
                                valor_limpo = valor.replace(',', '').replace('.', '')
                                if valor_limpo == '10000':  # R$ 100,00
                                    dados_planos[plano_tipo]["valor"] = f"R$ {valor}"
                                elif valor_limpo == '256100':  # R$ 2.561,00
                                    dados_planos[plano_tipo]["valor"] = f"R$ {valor}"
                                elif valor_limpo == '250000':  # R$ 2.500,00
                                    dados_planos[plano_tipo]["valor_franquia"] = f"R$ {valor}"
                                elif valor_limpo == '358406':  # R$ 3.584,06
                                    dados_planos[plano_tipo]["valor_franquia"] = f"R$ {valor}"
                                elif valor_limpo == '50000':  # R$ 50.000,00
                                    dados_planos[plano_tipo]["danos_materiais"] = f"R$ {valor}"
                                    dados_planos[plano_tipo]["danos_corporais"] = f"R$ {valor}"
                                elif valor_limpo == '100000':  # R$ 100.000,00
                                    dados_planos[plano_tipo]["danos_materiais"] = f"R$ {valor}"
                                    dados_planos[plano_tipo]["danos_corporais"] = f"R$ {valor}"
                                elif valor_limpo == '20000':  # R$ 20.000,00
                                    dados_planos[plano_tipo]["danos_morais"] = f"R$ {valor}"
                                elif valor_limpo == '10000' and not dados_planos[plano_tipo]["danos_morais"]:  # R$ 10.000,00 (evitar conflito)
                                    dados_planos[plano_tipo]["danos_morais"] = f"R$ {valor}"
                                elif valor_limpo == '5000':  # R$ 5.000,00
                                    dados_planos[plano_tipo]["morte_invalidez"] = f"R$ {valor}"
                            
                            # Se n√£o encontrou valores espec√≠ficos, usar o primeiro como anual
                            if not dados_planos[plano_tipo]["valor"] and valores_encontrados:
                                dados_planos[plano_tipo]["valor"] = f"R$ {valores_encontrados[0]}"
                else:
                    exception_handler.capturar_warning(f"DADOS INSUFICIENTES: Apenas {len(linhas)} linhas encontradas", "CAPTURA_DADOS_PLANOS")
                    # MELHORIA: Parse inteligente para planos com poucas linhas
                    try:
                        exibir_mensagem("üîç ANALISANDO PLANO COM POUCAS LINHAS")
                        
                        # Tentar extrair pelo menos o pre√ßo anual e forma de pagamento
                        if len(linhas) >= 2:
                            # Primeira linha pode ser moeda (R$) ou pre√ßo
                            primeira_linha = linhas[0].strip()
                            if primeira_linha == "R$" and len(linhas) >= 3:
                                # Formato: R$ / pre√ßo / anual
                                preco_anual = linhas[1].strip()
                                if re.match(r'^[0-9.,]+$', preco_anual):
                                    dados_planos[plano_tipo]["valor"] = f"R$ {preco_anual}"
                                    exibir_mensagem(f"‚úÖ PRE√áO ANUAL EXTRA√çDO: R$ {preco_anual}")
                            elif re.match(r'^[0-9.,]+$', primeira_linha):
                                # Formato: pre√ßo / anual
                                dados_planos[plano_tipo]["valor"] = f"R$ {primeira_linha}"
                                exibir_mensagem(f"‚úÖ PRE√áO ANUAL EXTRA√çDO: R$ {primeira_linha}")
                        
                        # Procurar forma de pagamento no texto completo
                        pagamento_match = re.search(r'Cr√©dito em at√© (\d+x)\s*(?:sem juros|com juros)?\s*(?:ou \d+x de R\$\s*([0-9.,]+))?', tabela_text)
                        if pagamento_match:
                            parcelas = pagamento_match.group(1)
                            valor_parcela = pagamento_match.group(2) if pagamento_match.group(2) else ""
                            
                            dados_planos[plano_tipo]["parcelamento"] = f"{parcelas} sem juros"
                            if valor_parcela:
                                exibir_mensagem(f"‚úÖ VALOR PARCELA EXTRA√çDO: R$ {valor_parcela}")
                            
                            exibir_mensagem(f"‚úÖ FORMA PAGAMENTO EXTRA√çDA: {parcelas} sem juros")
                        
                        # Procurar outros valores monet√°rios no texto completo
                        valores_monetarios = re.findall(r'R\$\s*([0-9.,]+)', tabela_text)
                        if valores_monetarios:
                            # Mapear valores encontrados para campos espec√≠ficos
                            for valor in valores_monetarios:
                                valor_limpo = valor.replace(',', '').replace('.', '')
                                valor_completo = f"R$ {valor}"
                                
                                # Evitar duplicar o pre√ßo anual j√° extra√≠do
                                if valor_completo != dados_planos[plano_tipo]["valor"]:
                                    # Tentar identificar o tipo de valor baseado no contexto
                                    if valor_limpo in ['251660', '2516.60']:  # Franquia reduzida
                                        dados_planos[plano_tipo]["valor_franquia"] = valor_completo
                                    elif valor_limpo in ['507594', '5075.94']:  # Franquia normal
                                        dados_planos[plano_tipo]["valor_franquia"] = valor_completo
                                    elif valor_limpo in ['50000', '50000.00']:  # Danos materiais/corporais
                                        if not dados_planos[plano_tipo]["danos_materiais"]:
                                            dados_planos[plano_tipo]["danos_materiais"] = valor_completo
                                        if not dados_planos[plano_tipo]["danos_corporais"]:
                                            dados_planos[plano_tipo]["danos_corporais"] = valor_completo
                                    elif valor_limpo in ['100000', '100000.00']:  # Danos materiais/corporais premium
                                        if not dados_planos[plano_tipo]["danos_materiais"]:
                                            dados_planos[plano_tipo]["danos_materiais"] = valor_completo
                                        if not dados_planos[plano_tipo]["danos_corporais"]:
                                            dados_planos[plano_tipo]["danos_corporais"] = valor_completo
                                    elif valor_limpo in ['20000', '20000.00']:  # Danos morais
                                        dados_planos[plano_tipo]["danos_morais"] = valor_completo
                                    elif valor_limpo in ['10000', '10000.00']:  # Danos morais menor
                                        if not dados_planos[plano_tipo]["danos_morais"]:
                                            dados_planos[plano_tipo]["danos_morais"] = valor_completo
                                    elif valor_limpo in ['5000', '5000.00']:  # Morte/invalidez
                                        dados_planos[plano_tipo]["morte_invalidez"] = valor_completo
                                    elif valor_limpo in ['0', '0.00']:  # Morte/invalidez zero
                                        dados_planos[plano_tipo]["morte_invalidez"] = valor_completo
                        
                    except Exception as e:
                        exibir_mensagem(f"‚ö†Ô∏è ERRO NO PARSE INTELIGENTE: {str(e)}")
                
                # ETAPA 4: DETECTAR COBERTURAS (√çCONES DE OK)
                exibir_mensagem("üîç ETAPA 4: Detectando coberturas...")
                
                coberturas = ['assistencia', 'vidros', 'carro_reserva']
                
                for j, cobertura in enumerate(coberturas):
                    try:
                        # Procurar por √≠cones de OK
                        icones_ok = elemento.locator("img[src='/icone-ok.svg']").all()
                        
                        if len(icones_ok) > j and icones_ok[j].is_visible():
                            dados_planos[plano_tipo][cobertura] = True
                            exibir_mensagem(f"‚úÖ {cobertura.title()}: True (√≠cone detectado)")
                        else:
                            # Verificar se existe o texto da cobertura - se existe, √© True
                            if cobertura.title() in tabela_text:
                                dados_planos[plano_tipo][cobertura] = True
                                exibir_mensagem(f"‚úÖ {cobertura.title()}: True (texto detectado)")
                            else:
                                # Se n√£o encontrou nem √≠cone nem texto, verificar se h√° elementos espec√≠ficos
                                elementos_cobertura = elemento.locator(f"div:has-text('{cobertura.title()}')").all()
                                if len(elementos_cobertura) > 0:
                                    dados_planos[plano_tipo][cobertura] = True
                                    exibir_mensagem(f"‚úÖ {cobertura.title()}: True (elemento encontrado)")
                                else:
                                    dados_planos[plano_tipo][cobertura] = False
                                    exibir_mensagem(f"‚ùå {cobertura.title()}: False")
                    except Exception as e:
                        # Em caso de erro, verificar se o texto da cobertura existe no container
                        if cobertura.title() in tabela_text:
                            dados_planos[plano_tipo][cobertura] = True
                            exibir_mensagem(f"‚úÖ {cobertura.title()}: True (fallback - texto detectado)")
                        else:
                            dados_planos[plano_tipo][cobertura] = False
                            exception_handler.capturar_warning(f"Erro ao capturar {cobertura}: {str(e)} - definindo como False", "CAPTURA_DADOS_PLANOS")
                
                # ETAPA 5: CAPTURA ESPEC√çFICA DE VALORES DE MERCADO E DANOS
                exibir_mensagem("üîç ETAPA 5: Captura espec√≠fica de valores...")
                
                # Valor de Mercado
                valor_mercado_match = re.search(r'100%\s*da\s*tabela\s*FIPE', tabela_text, re.IGNORECASE)
                if valor_mercado_match:
                    dados_planos[plano_tipo]["valor_mercado"] = "100% da tabela FIPE"
                    exibir_mensagem("‚úÖ Valor de Mercado: 100% da tabela FIPE")
                
                # Danos Materiais
                danos_materiais_match = re.search(r'Danos\s+Materiais.*?R\$\s*([0-9.,]+)', tabela_text, re.IGNORECASE)
                if danos_materiais_match:
                    dados_planos[plano_tipo]["danos_materiais"] = f"R$ {danos_materiais_match.group(1)}"
                    exibir_mensagem(f"‚úÖ Danos Materiais: R$ {danos_materiais_match.group(1)}")
                
                # Danos Corporais
                danos_corporais_match = re.search(r'Danos\s+Corporais.*?R\$\s*([0-9.,]+)', tabela_text, re.IGNORECASE)
                if danos_corporais_match:
                    dados_planos[plano_tipo]["danos_corporais"] = f"R$ {danos_corporais_match.group(1)}"
                    exibir_mensagem(f"‚úÖ Danos Corporais: R$ {danos_corporais_match.group(1)}")
                
                # Danos Morais
                danos_morais_match = re.search(r'Danos\s+Morais.*?R\$\s*([0-9.,]+)', tabela_text, re.IGNORECASE)
                if danos_morais_match:
                    dados_planos[plano_tipo]["danos_morais"] = f"R$ {danos_morais_match.group(1)}"
                    exibir_mensagem(f"‚úÖ Danos Morais: R$ {danos_morais_match.group(1)}")
                
                # Morte/Invalidez
                morte_invalidez_match = re.search(r'Morte/Invalidez.*?R\$\s*([0-9.,]+)', tabela_text, re.IGNORECASE)
                if morte_invalidez_match:
                    dados_planos[plano_tipo]["morte_invalidez"] = f"R$ {morte_invalidez_match.group(1)}"
                    exibir_mensagem(f"‚úÖ Morte/Invalidez: R$ {morte_invalidez_match.group(1)}")
                
                # Se encontrou dados v√°lidos, sair do loop
                if dados_planos[plano_tipo]["valor"] != "N/A":
                    exibir_mensagem(f"‚úÖ DADOS CAPTURADOS COM SUCESSO PARA {plano_tipo.upper()}")
                    break
                    
            except Exception as e:
                exception_handler.capturar_warning(f"Erro ao analisar container {i+1}: {str(e)}", "CAPTURA_DADOS_PLANOS")
                continue
        
        # ========================================
        # ETAPA 5: FALLBACK FINAL COM SELETORES ESPEC√çFICOS
        # ========================================
        exibir_mensagem("üîç ETAPA 5: Fallback final com seletores espec√≠ficos...")
        
        # Para cada plano, verificar se ainda h√° campos "N/A" e tentar preencher
        for plano_tipo in ["plano_recomendado", "plano_alternativo"]:
            if dados_planos[plano_tipo]["valor"] == "N/A":
                # Tentar capturar valor com seletores espec√≠ficos
                try:
                    valores_seguro = page.locator("label.text-primary.font-workSans.font-semibold.text-\\[32px\\]").all()
                    if len(valores_seguro) > 0:
                        if plano_tipo == "plano_recomendado":
                            valor_elem = valores_seguro[0]
                        else:
                            valor_elem = valores_seguro[1] if len(valores_seguro) > 1 else valores_seguro[0]
                        
                        texto_valor = valor_elem.text_content().strip()
                        valor_formatado = texto_valor.replace('\n', '').replace(' ', '')
                        if valor_formatado.startswith('R$'):
                            dados_planos[plano_tipo]["valor"] = valor_formatado
                        else:
                            dados_planos[plano_tipo]["valor"] = f"R$ {valor_formatado}"
                        exibir_mensagem(f"‚úÖ VALOR CAPTURADO (fallback): {dados_planos[plano_tipo]['valor']}")
                except Exception as e:
                    exibir_mensagem(f"‚ö†Ô∏è Erro no fallback de valor: {str(e)}")
            
            if dados_planos[plano_tipo]["forma_pagamento"] == "N/A":
                try:
                    formas_pagamento = page.locator("label.text-primary.text-xs.font-normal.mb-2").all()
                    if len(formas_pagamento) > 0:
                        if plano_tipo == "plano_recomendado":
                            forma_elem = formas_pagamento[0]
                        else:
                            forma_elem = formas_pagamento[1] if len(formas_pagamento) > 1 else formas_pagamento[0]
                        
                        dados_planos[plano_tipo]["forma_pagamento"] = forma_elem.text_content().strip()
                        exibir_mensagem(f"‚úÖ FORMA PAGAMENTO CAPTURADA (fallback): {dados_planos[plano_tipo]['forma_pagamento']}")
                except Exception as e:
                    exibir_mensagem(f"‚ö†Ô∏è Erro no fallback de forma de pagamento: {str(e)}")
        
        # ========================================
        # ETAPA 6: SALVAR E RETORNAR DADOS
        # ========================================
        # Salvar dados em arquivo JSON
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"dados_planos_seguro_{timestamp}.json"
        
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            json.dump(dados_planos, f, indent=2, ensure_ascii=False)
        
        exibir_mensagem(f"üíæ Dados salvos em: {nome_arquivo}")
        exibir_mensagem("‚úÖ CAPTURA DE DADOS CONCLU√çDA!")
        
        return dados_planos
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "CAPTURA_DADOS_PLANOS", "Erro geral na captura de dados")
        return {
            "plano_recomendado": {"erro": "Falha na captura"},
            "plano_alternativo": {"erro": "Falha na captura"}
        }

# ========================================
# FUN√á√ÉO PRINCIPAL
# ========================================

def executar_rpa_playwright(parametros: Dict[str, Any]) -> Dict[str, Any]:
    """
    Fun√ß√£o principal do RPA Playwright
    
    PAR√ÇMETROS:
        parametros: dict - Par√¢metros de configura√ß√£o
        
    RETORNO:
        dict: Resultado estruturado da execu√ß√£o
    """
    inicio_execucao = time.time()
    
    try:
        # Inicializar ProgressTracker
        progress_tracker = ProgressTracker(total_etapas=15)
        progress_tracker.update_progress(0, "Iniciando RPA")
        
        # Inicializar Sistema de Timeout Inteligente (opcional)
        if TIMEOUT_SYSTEM_AVAILABLE:
            smart_timeout = SmartTimeout()
            print("‚úÖ Sistema de timeout inteligente ativado")
        else:
            smart_timeout = None
        
        # Inicializar Sistema de Logger Avan√ßado (opcional)
        if LOGGER_SYSTEM_AVAILABLE:
            from utils.logger_rpa import RPALogger
            logger = RPALogger()
            log_info(logger, "Sistema de logger inicializado", {"versao": "3.1.3"})
            print("‚úÖ Sistema de logger avan√ßado ativado")
        else:
            logger = None
        
        # Inicializar Sistema de Comunica√ß√£o Bidirecional (opcional)
        if BIDIRECTIONAL_SYSTEM_AVAILABLE:
            print("‚úÖ Sistema de comunica√ß√£o bidirecional ativado")
            # O sistema ser√° usado via wrapper na execu√ß√£o
        else:
            print("‚ö†Ô∏è Executando sem comunica√ß√£o bidirecional")
        
        # Inicializar Exception Handler
        exception_handler.limpar_erros()
        exception_handler.definir_tela_atual("INICIALIZACAO")
        
        exibir_mensagem("üöÄ INICIANDO RPA PLAYWRIGHT")
        exibir_mensagem("=" * 50)
        
        # Log de in√≠cio da execu√ß√£o
        try:
            if LOGGER_SYSTEM_AVAILABLE and 'logger' in locals() and logger:
                log_info(logger, "RPA iniciado", {"versao": "3.1.3", "parametros": parametros})
        except:
            pass  # N√£o falhar se o logger der erro
        
        # Carregar par√¢metros de tempo
        parametros_tempo = obter_parametros_tempo(parametros)
        
        # Validar par√¢metros
        if VALIDATION_SYSTEM_AVAILABLE:
            try:
                # Usar sistema de valida√ß√£o avan√ßado
                validador = ValidadorParametros()
                parametros_validados = validador.validar_parametros(parametros)
                print("‚úÖ Valida√ß√£o avan√ßada de par√¢metros conclu√≠da")
            except ValidacaoParametrosError as e:
                # ‚ùå INTERROMPER EXECU√á√ÉO - Par√¢metros inv√°lidos detectados
                erro_msg = f"‚ùå VALIDA√á√ÉO DE PAR√ÇMETROS FALHOU: {str(e)}"
                print(erro_msg)
                print("üö´ Execu√ß√£o interrompida devido a par√¢metros inv√°lidos")
                return criar_retorno_erro(
                    f"Valida√ß√£o de par√¢metros falhou: {str(e)}",
                    "VALIDACAO",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            except Exception as e:
                # ‚ùå INTERROMPER EXECU√á√ÉO - Erro inesperado na valida√ß√£o
                erro_msg = f"‚ùå ERRO INESPERADO NA VALIDA√á√ÉO: {str(e)}"
                print(erro_msg)
                print("üö´ Execu√ß√£o interrompida devido a erro na valida√ß√£o")
                return criar_retorno_erro(
                    f"Erro inesperado na valida√ß√£o: {str(e)}",
                    "VALIDACAO",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
        else:
            # Usar valida√ß√£o b√°sica existente
            if not validar_parametros_obrigatorios(parametros):
                raise RPAException("Par√¢metros obrigat√≥rios inv√°lidos", "VALIDACAO")
        
        # Inicializar Playwright
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=False)
            context = browser.new_context()
            page = context.new_page()
            
            # Navegar para URL inicial
            page.goto(parametros["url"])
            exibir_mensagem(f"‚úÖ Navega√ß√£o para {parametros['url']} realizada")
            
            # Executar Telas 1-15 sequencialmente
            telas_executadas = 0
            resultado_telas = {}
            
            # TELA 1
            progress_tracker.update_progress(1, "Selecionando Tipo de Veiculo")
            exibir_mensagem("\n" + "="*50)
            
            # Log de in√≠cio da Tela 1
            try:
                if LOGGER_SYSTEM_AVAILABLE and 'logger' in locals() and logger:
                    log_info(logger, "Executando Tela 1", {"tela": 1, "timestamp": datetime.now().isoformat()})
            except:
                pass  # N√£o falhar se o logger der erro
            
            if executar_com_timeout(smart_timeout, 1, navegar_tela_1_playwright, page):
                telas_executadas += 1
                resultado_telas["tela_1"] = True
                progress_tracker.update_progress(1, "Tela 1 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 1 CONCLU√çDA!")
                
                # Log de sucesso da Tela 1
                try:
                    if LOGGER_SYSTEM_AVAILABLE and 'logger' in locals() and logger:
                        log_success(logger, "Tela 1 conclu√≠da", {"tela": 1, "tempo": time.time() - inicio_execucao})
                except:
                    pass  # N√£o falhar se o logger der erro
            else:
                resultado_telas["tela_1"] = False
                progress_tracker.update_progress(1, "Tela 1 falhou")
                exibir_mensagem("‚ùå TELA 1 FALHOU!")
                
                # Log de erro da Tela 1
                try:
                    if LOGGER_SYSTEM_AVAILABLE and 'logger' in locals() and logger:
                        log_error(logger, "Tela 1 falhou", {"tela": 1, "erro": "Execu√ß√£o falhou"})
                except:
                    pass  # N√£o falhar se o logger der erro
                
                return criar_retorno_erro(
                    "Tela 1 falhou",
                    "TELA_1",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 2
            progress_tracker.update_progress(2, "Selecionando ve√≠culo com a placa informada")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 2, navegar_tela_2_playwright, page, parametros['placa']):
                telas_executadas += 1
                resultado_telas["tela_2"] = True
                progress_tracker.update_progress(2, "Tela 2 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 2 CONCLU√çDA!")
            else:
                resultado_telas["tela_2"] = False
                progress_tracker.update_progress(2, "Tela 2 falhou")
                exibir_mensagem("‚ùå TELA 2 FALHOU!")
                return criar_retorno_erro(
                    "Tela 2 falhou",
                    "TELA_2",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 3
            progress_tracker.update_progress(3, "Confirmando sele√ß√£o do ve√≠culo")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 3, navegar_tela_3_playwright, page):
                telas_executadas += 1
                resultado_telas["tela_3"] = True
                progress_tracker.update_progress(3, "Tela 3 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 3 CONCLU√çDA!")
            else:
                resultado_telas["tela_3"] = False
                progress_tracker.update_progress(3, "Tela 3 falhou")
                exibir_mensagem("‚ùå TELA 3 FALHOU!")
                return criar_retorno_erro(
                    "Tela 3 falhou",
                    "TELA_3",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 4
            progress_tracker.update_progress(4, "Calculando como novo Seguro")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 4, navegar_tela_4_playwright, page, parametros['veiculo_segurado']):
                telas_executadas += 1
                resultado_telas["tela_4"] = True
                progress_tracker.update_progress(4, "Tela 4 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 4 CONCLU√çDA!")
            else:
                resultado_telas["tela_4"] = False
                progress_tracker.update_progress(4, "Tela 4 falhou")
                exibir_mensagem("‚ùå TELA 4 FALHOU!")
                return criar_retorno_erro(
                    "Tela 4 falhou",
                    "TELA_4",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 5
            progress_tracker.update_progress(5, "Elaborando estimativas")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 5, navegar_tela_5_playwright, page, parametros_tempo):
                telas_executadas += 1
                resultado_telas["tela_5"] = True
                progress_tracker.update_progress(5, "Tela 5 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 5 CONCLU√çDA!")
            else:
                resultado_telas["tela_5"] = False
                progress_tracker.update_progress(5, "Tela 5 falhou")
                exibir_mensagem("‚ùå TELA 5 FALHOU!")
                return criar_retorno_erro(
                    "Tela 5 falhou",
                    "TELA_5",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 6
            progress_tracker.update_progress(6, "Sele√ß√£o de detalhes do ve√≠culo")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 6, navegar_tela_6_playwright, page, parametros['combustivel'], parametros.get('kit_gas', False), parametros.get('blindado', False), parametros.get('financiado', False)):
                telas_executadas += 1
                resultado_telas["tela_6"] = True
                progress_tracker.update_progress(6, "Tela 6 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 6 CONCLU√çDA!")
            else:
                resultado_telas["tela_6"] = False
                progress_tracker.update_progress(6, "Tela 6 falhou")
                exibir_mensagem("‚ùå TELA 6 FALHOU!")
                return criar_retorno_erro(
                    "Tela 6 falhou",
                    "TELA_6",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 7
            progress_tracker.update_progress(7, "Defini√ß√£o de local de pernoite com o CEP informado")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 7, navegar_tela_7_playwright, page, parametros['cep']):
                telas_executadas += 1
                resultado_telas["tela_7"] = True
                progress_tracker.update_progress(7, "Tela 7 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 7 CONCLU√çDA!")
            else:
                resultado_telas["tela_7"] = False
                progress_tracker.update_progress(7, "Tela 7 falhou")
                exibir_mensagem("‚ùå TELA 7 FALHOU!")
                return criar_retorno_erro(
                    "Tela 7 falhou",
                    "TELA_7",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 8
            progress_tracker.update_progress(8, "Defini√ß√£o do uso do ve√≠culo")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 8, navegar_tela_8_playwright, page, parametros['uso_veiculo']):
                telas_executadas += 1
                resultado_telas["tela_8"] = True
                progress_tracker.update_progress(8, "Tela 8 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 8 CONCLU√çDA!")
            else:
                resultado_telas["tela_8"] = False
                progress_tracker.update_progress(8, "Tela 8 falhou")
                exibir_mensagem("‚ùå TELA 8 FALHOU!")
                return criar_retorno_erro(
                    "Tela 8 falhou",
                    "TELA_8",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 9
            progress_tracker.update_progress(9, "Preenchimento dos dados pessoais")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 9, navegar_tela_9_playwright, page, parametros['nome'], parametros['cpf'], parametros['data_nascimento'], parametros['sexo'], parametros['estado_civil'], parametros['email'], parametros['celular']):
                telas_executadas += 1
                resultado_telas["tela_9"] = True
                progress_tracker.update_progress(9, "Tela 9 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 9 CONCLU√çDA!")
            else:
                resultado_telas["tela_9"] = False
                progress_tracker.update_progress(9, "Tela 9 falhou")
                exibir_mensagem("‚ùå TELA 9 FALHOU!")
                return criar_retorno_erro(
                    "Tela 9 falhou",
                    "TELA_9",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 10
            progress_tracker.update_progress(10, "Defini√ß√£o do Condutor Principal")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 10, navegar_tela_10_playwright, page, parametros['condutor_principal'], parametros['nome_condutor'], parametros['cpf_condutor'], parametros['data_nascimento_condutor'], parametros['sexo_condutor'], parametros['estado_civil_condutor']):
                telas_executadas += 1
                resultado_telas["tela_10"] = True
                progress_tracker.update_progress(10, "Tela 10 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 10 CONCLU√çDA!")
            else:
                resultado_telas["tela_10"] = False
                progress_tracker.update_progress(10, "Tela 10 falhou")
                exibir_mensagem("‚ùå TELA 10 FALHOU!")
                return criar_retorno_erro(
                    "Tela 10 falhou",
                    "TELA_10",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 11
            progress_tracker.update_progress(11, "Defini√ß√£o do uso do ve√≠culo")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 11, navegar_tela_11_playwright, page, parametros['local_de_trabalho'], parametros['estacionamento_proprio_local_de_trabalho'], parametros['local_de_estudo'], parametros['estacionamento_proprio_local_de_estudo']):
                telas_executadas += 1
                resultado_telas["tela_11"] = True
                progress_tracker.update_progress(11, "Tela 11 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 11 CONCLU√çDA!")
            else:
                resultado_telas["tela_11"] = False
                progress_tracker.update_progress(11, "Tela 11 falhou")
                exibir_mensagem("‚ùå TELA 11 FALHOU!")
                return criar_retorno_erro(
                    "Tela 11 falhou",
                    "TELA_11",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 12
            progress_tracker.update_progress(12, "Defini√ß√£o do tipo de garagem")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 12, navegar_tela_12_playwright, page, parametros['garagem_residencia'], parametros['portao_eletronico']):
                telas_executadas += 1
                resultado_telas["tela_12"] = True
                progress_tracker.update_progress(12, "Tela 12 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 12 CONCLU√çDA!")
            else:
                resultado_telas["tela_12"] = False
                progress_tracker.update_progress(12, "Tela 12 falhou")
                exibir_mensagem("‚ùå TELA 12 FALHOU!")
                return criar_retorno_erro(
                    "Tela 12 falhou",
                    "TELA_12",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 13
            progress_tracker.update_progress(13, "Defini√ß√£o de residentes")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 13, navegar_tela_13_playwright, page, parametros['reside_18_26'], parametros['sexo_do_menor'], parametros['faixa_etaria_menor_mais_novo']):
                telas_executadas += 1
                resultado_telas["tela_13"] = True
                progress_tracker.update_progress(13, "Tela 13 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 13 CONCLU√çDA!")
            else:
                resultado_telas["tela_13"] = False
                progress_tracker.update_progress(13, "Tela 13 falhou")
                exibir_mensagem("‚ùå TELA 13 FALHOU!")
                return criar_retorno_erro(
                    "Tela 13 falhou",
                    "TELA_13",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # TELA 14 (CONDICIONAL) - S√≥ executa se Tela 15 n√£o foi detectada diretamente da Tela 13
            progress_tracker.update_progress(14, "Defini√ß√£o do Corretor")
            exibir_mensagem("\n" + "="*50)
            exibir_mensagem("üîç ANALISANDO EXECU√á√ÉO DA TELA 14...")
            exibir_mensagem(f"üìä Status da vari√°vel global 'tela_15_detectada': {tela_15_detectada}")
            
            if not tela_15_detectada:
                exibir_mensagem("üîÑ Executando Tela 14 (Tela 15 n√£o foi detectada diretamente da Tela 13)")
                exibir_mensagem("üìã Motivo: Fluxo normal - Tela 14 √© necess√°ria para continuar")
                if executar_com_timeout(smart_timeout, 14, navegar_tela_14_playwright, page, parametros['continuar_com_corretor_anterior']):
                    # N√£o incrementa telas_executadas pois √© condicional
                    resultado_telas["tela_14"] = True
                    progress_tracker.update_progress(14, "Tela 14 conclu√≠da")
                    exibir_mensagem("‚úÖ TELA 14 PROCESSADA COM SUCESSO!")
                    exibir_mensagem("üìà Navega√ß√£o para Tela 15 ser√° executada normalmente")
                else:
                    resultado_telas["tela_14"] = False
                    progress_tracker.update_progress(14, "Tela 14 falhou")
                    exibir_mensagem("‚ùå TELA 14 FALHOU!")
                    exibir_mensagem("üö´ RPA ser√° interrompido devido √† falha na Tela 14")
                    return criar_retorno_erro(
                        "Tela 14 falhou",
                        "TELA_14",
                        time.time() - inicio_execucao,
                        parametros,
                        exception_handler
                    )
            else:
                exibir_mensagem("‚è≠Ô∏è Pulando Tela 14 (Tela 15 j√° foi detectada diretamente da Tela 13)")
                exibir_mensagem("üìã Motivo: Fluxo otimizado - Tela 14 n√£o √© necess√°ria")
                exibir_mensagem("üîó Transi√ß√£o direta da Tela 13 para Tela 15 detectada")
                resultado_telas["tela_14"] = True  # Considera como sucesso pois foi pulada intencionalmente
                progress_tracker.update_progress(14, "Tela 14 pulada")
                exibir_mensagem("‚úÖ TELA 14 PULADA COM SUCESSO!")
                exibir_mensagem("üìà Pr√≥ximo passo: Executar Tela 15 diretamente")
            
            # TELA 15
            progress_tracker.update_progress(15, "Aguardando c√°lculo completo")
            exibir_mensagem("\n" + "="*50)
            if executar_com_timeout(smart_timeout, 15, navegar_tela_15_playwright, page, parametros['autenticacao']['email_login'], parametros['autenticacao']['senha_login'], parametros_tempo):
                telas_executadas += 1
                resultado_telas["tela_15"] = True
                progress_tracker.update_progress(15, "Tela 15 conclu√≠da")
                exibir_mensagem("‚úÖ TELA 15 CONCLU√çDA!")
            else:
                resultado_telas["tela_15"] = False
                progress_tracker.update_progress(15, "Tela 15 falhou")
                exibir_mensagem("‚ùå TELA 15 FALHOU!")
                return criar_retorno_erro(
                    "Tela 15 falhou",
                    "TELA_15",
                    time.time() - inicio_execucao,
                    parametros,
                    exception_handler
                )
            
            # Resultado final
            progress_tracker.update_progress(15, "RPA conclu√≠do com sucesso")
            exibir_mensagem("\n" + "="*60)
            exibir_mensagem("üéâ RPA TELAS 1 A 15 CONCLU√çDO COM SUCESSO!")
            exibir_mensagem(f"‚úÖ Total de telas executadas: {telas_executadas}/14 (Tela 14 √© condicional)")
            exibir_mensagem("‚úÖ Todas as telas funcionaram corretamente")
            exibir_mensagem("‚úÖ Navega√ß√£o sequencial realizada com sucesso")
            
            # Capturar dados finais
            dados_planos = capturar_dados_planos_seguro(page, parametros_tempo)
            
            # Salvar dados
            arquivo_dados = salvar_dados_planos(dados_planos)
            
            # Fechar browser
            browser.close()
            
            # Calcular tempo de execu√ß√£o
            tempo_execucao = time.time() - inicio_execucao
            
            # Log de conclus√£o bem-sucedida
            try:
                if LOGGER_SYSTEM_AVAILABLE and 'logger' in locals() and logger:
                    log_success(logger, "RPA conclu√≠do com sucesso", {
                        "tempo_total": tempo_execucao,
                        "telas_executadas": telas_executadas,
                        "arquivo_dados": arquivo_dados
                    })
            except:
                pass  # N√£o falhar se o logger der erro
            
            # Retorno estruturado
            return criar_retorno_sucesso(
                resultado_telas,
                dados_planos,
                arquivo_dados,
                tempo_execucao,
                parametros
            )
            
    except Exception as e:
        # Atualizar progresso em caso de erro
        try:
            progress_tracker.update_progress(0, f"RPA interrompido por erro: {str(e)}")
        except:
            pass  # N√£o falhar se o progress tracker der erro
        
        # Log de erro principal (verificar se logger existe)
        try:
            if LOGGER_SYSTEM_AVAILABLE and 'logger' in locals() and logger:
                log_error(logger, "Erro na execu√ß√£o principal", {
                    "erro": str(e),
                    "traceback": traceback.format_exc(),
                    "tempo_execucao": time.time() - inicio_execucao
                })
        except:
            pass  # N√£o falhar se o logger der erro
        
        exception_handler.capturar_excecao(e, "EXECUCAO_PRINCIPAL", "Erro na execu√ß√£o principal")
        
        return criar_retorno_erro(
            str(e),
            "EXECUCAO_PRINCIPAL",
            time.time() - inicio_execucao,
            parametros,
            exception_handler
        )

# ========================================
# EXECU√á√ÉO DIRETA
# ========================================

if __name__ == "__main__":
    try:
        # Processar argumentos de linha de comando
        args = processar_argumentos()
        
        # Verificar se √© para exibir documenta√ß√£o
        if args.docs:
            exibir_documentacao(args.docs)
            sys.exit(0)
        
        # Carregar par√¢metros (compatibilidade mantida)
        parametros = carregar_parametros(args.config)
        
        # SISTEMA DE HEALTH CHECK ULTRA-CONSERVADOR (opcional)
        if HEALTH_CHECK_AVAILABLE:
            try:
                health_checker = ConservativeHealthChecker()
                environment = health_checker.get_environment()
                print(f"üîç Ambiente detectado: {environment}")
                
                if health_checker.is_system_ready():
                    print(f"‚úÖ Health Check {environment}: Sistema pronto")
                else:
                    print(f"‚ö†Ô∏è Health Check {environment}: Problemas detectados - continuando mesmo assim")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erro no health check: {e} - continuando sem verifica√ß√£o")
        
        # EXECU√á√ÉO COM CONTROLE BIDIRECIONAL SEGURO
        if BIDIRECTIONAL_SYSTEM_AVAILABLE:
            # Executar RPA com controle bidirecional
            resultado_wrapper = execute_rpa_with_bidirectional_control(
                executar_rpa_playwright, 
                parametros
            )
            
            # Extrair resultado do wrapper
            if resultado_wrapper["status"] == "success":
                resultado = resultado_wrapper["result"]
                bidirectional_used = resultado_wrapper.get("bidirectional_used", False)
                print(f"‚úÖ Comunica√ß√£o bidirecional: {'Ativa' if bidirectional_used else 'N√£o utilizada'}")
            else:
                # Fallback para execu√ß√£o direta
                resultado = executar_rpa_playwright(parametros)
                print("‚ö†Ô∏è Fallback para execu√ß√£o direta devido a erro no sistema bidirecional")
        else:
            # Executar RPA (ESTRUTURA ORIGINAL PRESERVADA)
            resultado = executar_rpa_playwright(parametros)
        
        # Exibir resultado
        print("\n" + "="*50)
        print("üìä RESULTADO DA EXECU√á√ÉO")
        print("="*50)
        print(f"Status: {resultado['status']}")
        print(f"Tempo: {resultado['tempo_execucao']}")
        print(f"Erros: {resultado['erros']['total_erros']}")
        print(f"Warnings: {resultado['erros']['total_warnings']}")
        
        if resultado['status'] == 'success':
            print("‚úÖ RPA executado com sucesso!")
        else:
            print("‚ùå RPA falhou!")
        
        # Exibir retorno estruturado completo
        print("\n" + "="*50)
        print("üìã RETORNO ESTRUTURADO COMPLETO")
        print("="*50)
        import json
        print(json.dumps(resultado, indent=2, ensure_ascii=False))
            
    except Exception as e:
        exception_handler.capturar_excecao(e, "EXECUCAO_DIRETA", "Erro na execu√ß√£o direta")
        sys.exit(1)
