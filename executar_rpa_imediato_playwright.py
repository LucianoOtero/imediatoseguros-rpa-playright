#!/usr/bin/env python3
"""
EXECUTAR RPA IMEDIATO PLAYWRIGHT - VERS√ÉO PRODU√á√ÉO
Implementa√ß√£o completa do RPA usando Playwright com Sistema de Exception Handler

DESCRI√á√ÉO:
- Migra√ß√£o completa do Selenium para Playwright
- Sistema de Exception Handler robusto
- Telas 1-15 implementadas e testadas
- Captura de dados dos planos de seguro
- Estrutura de retorno padronizada

AUTOR: Luciano Otero
DATA: 2025-09-02
VERS√ÉO: 1.0.0
STATUS: Implementa√ß√£o completa com Exception Handler
"""

import json
import time
import re
import os
import sys
import traceback
from datetime import datetime
from typing import Dict, Any, Optional, Union
from playwright.sync_api import sync_playwright, Page, Browser, BrowserContext

# ========================================
# SISTEMA DE EXCEPTION HANDLER
# ========================================

class RPAException(Exception):
    """
    Exce√ß√£o customizada para o RPA
    """
    def __init__(self, message: str, tela: str = None, erro_original: Exception = None):
        self.message = message
        self.tela = tela
        self.erro_original = erro_original
        super().__init__(self.message)

class ExceptionHandler:
    """
    Sistema robusto de tratamento de exce√ß√µes para o RPA
    """
    
    def __init__(self):
        self.erros_capturados = []
        self.warnings_capturados = []
        self.tela_atual = None
    
    def capturar_excecao(self, erro: Exception, tela: str = None, contexto: str = None) -> Dict[str, Any]:
        """
        Captura e formata uma exce√ß√£o de forma estruturada
        
        PAR√ÇMETROS:
            erro: Exception - Exce√ß√£o capturada
            tela: str - Nome da tela onde ocorreu o erro
            contexto: str - Contexto adicional do erro
            
        RETORNO:
            dict: Dicion√°rio estruturado com informa√ß√µes do erro
        """
        timestamp = datetime.now().isoformat()
        
        # Extrair informa√ß√µes detalhadas do erro
        tipo_erro = type(erro).__name__
        mensagem_erro = str(erro)
        traceback_completo = traceback.format_exc()
        
        # Determinar severidade do erro
        severidade = self._determinar_severidade(erro)
        
        # Criar estrutura de erro
        erro_estruturado = {
            "timestamp": timestamp,
            "tipo": tipo_erro,
            "mensagem": mensagem_erro,
            "tela": tela or self.tela_atual,
            "contexto": contexto,
            "severidade": severidade,
            "traceback": traceback_completo,
            "recomendacao": self._gerar_recomendacao(erro, tela)
        }
        
        # Adicionar √† lista de erros
        self.erros_capturados.append(erro_estruturado)
        
        # Log do erro
        self._log_erro(erro_estruturado)
        
        return erro_estruturado
    
    def _determinar_severidade(self, erro: Exception) -> str:
        """
        Determina a severidade do erro baseado no tipo
        """
        if isinstance(erro, (TimeoutError, ConnectionError)):
            return "CR√çTICO"
        elif isinstance(erro, (ValueError, TypeError)):
            return "ALTO"
        elif isinstance(erro, (FileNotFoundError, PermissionError)):
            return "M√âDIO"
        else:
            return "BAIXO"
    
    def _gerar_recomendacao(self, erro: Exception, tela: str = None) -> str:
        """
        Gera recomenda√ß√£o baseada no tipo de erro
        """
        if isinstance(erro, TimeoutError):
            return f"Verificar conectividade e tentar novamente. Tela: {tela}"
        elif isinstance(erro, ValueError):
            return f"Verificar par√¢metros de entrada. Tela: {tela}"
        elif "element not found" in str(erro).lower():
            return f"Elemento n√£o encontrado. Verificar seletor. Tela: {tela}"
        elif "timeout" in str(erro).lower():
            return f"Timeout detectado. Aumentar tempo de espera. Tela: {tela}"
        else:
            return f"Erro gen√©rico. Verificar logs detalhados. Tela: {tela}"
    
    def _log_erro(self, erro_estruturado: Dict[str, Any]):
        """
        Faz log do erro de forma formatada
        """
        timestamp = erro_estruturado["timestamp"]
        tela = erro_estruturado["tela"]
        tipo = erro_estruturado["tipo"]
        mensagem = erro_estruturado["mensagem"]
        severidade = erro_estruturado["severidade"]
        
        print(f"\n{'='*80}")
        print(f"üö® ERRO CAPTURADO - {severidade}")
        print(f"{'='*80}")
        print(f"‚è∞ Timestamp: {timestamp}")
        print(f"üì± Tela: {tela}")
        print(f"üîç Tipo: {tipo}")
        print(f"üí¨ Mensagem: {mensagem}")
        print(f"üí° Recomenda√ß√£o: {erro_estruturado['recomendacao']}")
        print(f"{'='*80}")
    
    def capturar_warning(self, mensagem: str, tela: str = None, contexto: str = None):
        """
        Captura um warning (n√£o √© erro cr√≠tico)
        """
        timestamp = datetime.now().isoformat()
        
        warning = {
            "timestamp": timestamp,
            "mensagem": mensagem,
            "tela": tela or self.tela_atual,
            "contexto": contexto,
            "tipo": "WARNING"
        }
        
        self.warnings_capturados.append(warning)
        
        print(f"‚ö†Ô∏è WARNING - {tela}: {mensagem}")
    
    def definir_tela_atual(self, tela: str):
        """
        Define a tela atual para contexto de erros
        """
        self.tela_atual = tela
    
    def obter_resumo_erros(self) -> Dict[str, Any]:
        """
        Retorna resumo dos erros capturados
        """
        return {
            "total_erros": len(self.erros_capturados),
            "total_warnings": len(self.warnings_capturados),
            "erros_criticos": len([e for e in self.erros_capturados if e["severidade"] == "CR√çTICO"]),
            "erros_altos": len([e for e in self.erros_capturados if e["severidade"] == "ALTO"]),
            "erros_medios": len([e for e in self.erros_capturados if e["severidade"] == "M√âDIO"]),
            "erros_baixos": len([e for e in self.erros_capturados if e["severidade"] == "BAIXO"]),
            "ultimo_erro": self.erros_capturados[-1] if self.erros_capturados else None
        }
    
    def limpar_erros(self):
        """
        Limpa a lista de erros capturados
        """
        self.erros_capturados = []
        self.warnings_capturados = []

# Inst√¢ncia global do Exception Handler
exception_handler = ExceptionHandler()

# ========================================
# FUN√á√ïES AUXILIARES
# ========================================

def exibir_mensagem(mensagem: str):
    """
    Exibe mensagem formatada com timestamp
    
    PAR√ÇMETROS:
        mensagem (str): Mensagem a ser exibida
    
    COMPORTAMENTO:
        1. Formata mensagem com timestamp
        2. Exibe no terminal
        3. Formato: [HH:MM:SS] mensagem
    """
    timestamp = time.strftime('%H:%M:%S')
    print(f"[{timestamp}] {mensagem}")

def carregar_parametros(arquivo_config: str = "config/parametros.json") -> Dict[str, Any]:
    """
    Carrega par√¢metros do arquivo JSON
    
    PAR√ÇMETROS:
        arquivo_config: str - Caminho para o arquivo de configura√ß√£o
        
    RETORNO:
        dict: Par√¢metros carregados
        
    EXCE√á√ïES:
        RPAException: Se n√£o conseguir carregar os par√¢metros
    """
    try:
        exception_handler.definir_tela_atual("CARREGAMENTO_PARAMETROS")
        
        if not os.path.exists(arquivo_config):
            raise RPAException(f"Arquivo de configura√ß√£o n√£o encontrado: {arquivo_config}")
        
        with open(arquivo_config, 'r', encoding='utf-8') as f:
            parametros = json.load(f)
        
        exibir_mensagem("‚úÖ Par√¢metros carregados com sucesso!")
        return parametros
        
    except json.JSONDecodeError as e:
        erro = exception_handler.capturar_excecao(e, "CARREGAMENTO_PARAMETROS", "JSON inv√°lido")
        raise RPAException("Erro ao decodificar JSON dos par√¢metros", "CARREGAMENTO_PARAMETROS", e)
        
    except Exception as e:
        erro = exception_handler.capturar_excecao(e, "CARREGAMENTO_PARAMETROS", "Erro gen√©rico")
        raise RPAException("Erro ao carregar par√¢metros", "CARREGAMENTO_PARAMETROS", e)

def validar_parametros_obrigatorios(parametros: Dict[str, Any]) -> bool:
    """
    Valida se todos os par√¢metros obrigat√≥rios est√£o presentes
    
    PAR√ÇMETROS:
        parametros: dict - Par√¢metros a serem validados
        
    RETORNO:
        bool: True se v√°lido, False caso contr√°rio
        
    EXCE√á√ïES:
        RPAException: Se par√¢metros obrigat√≥rios estiverem faltando
    """
    try:
        exception_handler.definir_tela_atual("VALIDACAO_PARAMETROS")
        
        parametros_obrigatorios = [
            "url", "placa", "marca", "modelo", "ano", "combustivel", 
            "cep", "uso_veiculo", "veiculo_segurado", "nome", "cpf", 
            "email", "celular", "autenticacao"
        ]
        
        parametros_faltando = []
        
        for param in parametros_obrigatorios:
            if param not in parametros:
                parametros_faltando.append(param)
            elif not parametros[param]:
                parametros_faltando.append(f"{param} (vazio)")
        
        if parametros_faltando:
            erro_msg = f"Par√¢metros obrigat√≥rios faltando: {', '.join(parametros_faltando)}"
            exception_handler.capturar_warning(erro_msg, "VALIDACAO_PARAMETROS")
            return False
        
        # Validar subcampos de autentica√ß√£o
        if "autenticacao" in parametros:
            auth = parametros["autenticacao"]
            if "email_login" not in auth or "senha_login" not in auth:
                exception_handler.capturar_warning("Campos de autentica√ß√£o incompletos", "VALIDACAO_PARAMETROS")
                return False
        
        exibir_mensagem("‚úÖ Todos os par√¢metros obrigat√≥rios est√£o presentes!")
        return True
        
    except Exception as e:
        erro = exception_handler.capturar_excecao(e, "VALIDACAO_PARAMETROS", "Erro na valida√ß√£o")
        raise RPAException("Erro ao validar par√¢metros", "VALIDACAO_PARAMETROS", e)

def salvar_dados_planos(dados_planos: Dict[str, Any], prefixo: str = "dados_planos_seguro"):
    """
    Salva os dados dos planos em arquivo JSON
    
    PAR√ÇMETROS:
        dados_planos: dict - Dados dos planos a serem salvos
        prefixo: str - Prefixo do nome do arquivo
        
    RETORNO:
        str: Caminho do arquivo salvo
    """
    try:
        exception_handler.definir_tela_atual("SALVAMENTO_DADOS")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"{prefixo}_{timestamp}.json"
        
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            json.dump(dados_planos, f, indent=2, ensure_ascii=False)
        
        exibir_mensagem(f"üíæ Dados salvos em: {nome_arquivo}")
        return nome_arquivo
        
    except Exception as e:
        erro = exception_handler.capturar_excecao(e, "SALVAMENTO_DADOS", "Erro ao salvar dados")
        raise RPAException("Erro ao salvar dados dos planos", "SALVAMENTO_DADOS", e)

# ========================================
# FUN√á√ïES DE NAVEGA√á√ÉO DAS TELAS
# ========================================

def navegar_tela_1_playwright(page: Page) -> bool:
    """
    TELA 1: Sele√ß√£o do tipo de seguro (Carro)
    """
    try:
        exception_handler.definir_tela_atual("TELA_1")
        exibir_mensagem("üì± TELA 1: Selecionando Carro...")
        
        time.sleep(3)
        
        botao_carro = page.locator("button.group").first
        
        if botao_carro.is_visible():
            botao_carro.click()
            exibir_mensagem("‚úÖ Bot√£o 'Carro' clicado com sucesso")
            time.sleep(3)
            return True
        else:
            exception_handler.capturar_warning("Bot√£o 'Carro' n√£o est√° vis√≠vel", "TELA_1")
            return False
            
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_1", "Erro ao selecionar Carro")
        return False

def navegar_tela_2_playwright(page: Page, placa: str) -> bool:
    """
    TELA 2: Inser√ß√£o da placa
    """
    try:
        exception_handler.definir_tela_atual("TELA_2")
        exibir_mensagem(f"üì± TELA 2: Inserindo placa {placa}...")
        
        campo_placa = page.locator("#placaTelaDadosPlaca").first
        campo_placa.click()
        campo_placa.fill(placa)
        
        exibir_mensagem(f"‚úÖ Placa {placa} inserida com sucesso")
        
        botao_continuar = page.locator("#gtm-telaDadosAutoCotarComPlacaContinuar").first
        botao_continuar.click()
        
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        time.sleep(3)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_2", f"Erro ao inserir placa {placa}")
        return False

def navegar_tela_3_playwright(page: Page) -> bool:
    """
    TELA 3: Confirma√ß√£o do ve√≠culo
    """
    try:
        exception_handler.definir_tela_atual("TELA_3")
        exibir_mensagem("üì± TELA 3: Confirmando informa√ß√µes do ve√≠culo...")
        
        botao_continuar = page.locator("#gtm-telaInfosAutoContinuar").first
        
        if botao_continuar.is_visible():
            botao_continuar.click()
            exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            time.sleep(3)
            return True
        else:
            exception_handler.capturar_warning("Bot√£o 'Continuar' n√£o encontrado", "TELA_3")
            return False
            
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_3", "Erro ao confirmar ve√≠culo")
        return False

def navegar_tela_4_playwright(page: Page, veiculo_segurado: str) -> bool:
    """
    TELA 4: Ve√≠culo segurado
    """
    try:
        exception_handler.definir_tela_atual("TELA_4")
        exibir_mensagem("üì± TELA 4: Respondendo se ve√≠culo est√° segurado...")
        
        if veiculo_segurado == "N√£o":
            botao_nao = page.locator("#gtm-telaRenovacaoVeiculoContinuar").first
            botao_nao.click()
            exibir_mensagem("‚úÖ Resposta 'N√£o' selecionada com sucesso")
        else:
            exception_handler.capturar_warning(f"Op√ß√£o '{veiculo_segurado}' n√£o implementada", "TELA_4")
            return False
        
        time.sleep(3)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_4", f"Erro ao responder ve√≠culo segurado: {veiculo_segurado}")
        return False

def navegar_tela_5_playwright(page: Page) -> bool:
    """
    TELA 5: Estimativa inicial - CAPTURA DE DADOS
    """
    try:
        exception_handler.definir_tela_atual("TELA_5")
        exibir_mensagem("üì± TELA 5: Aguardando carregamento da estimativa...")
        
        time.sleep(2)
        
        max_tentativas = 30
        tentativa = 0
        
        while tentativa < max_tentativas:
            elemento_estimativa = page.locator("div.bg-primary")
            if elemento_estimativa.count() > 0:
                break
            time.sleep(1)
            tentativa += 1
        
        if tentativa >= max_tentativas:
            exception_handler.capturar_warning("Elementos da estimativa n√£o carregaram", "TELA_5")
            return False
        
        exibir_mensagem("‚úÖ Estimativa carregada com sucesso")
        
        botao_continuar = page.locator("#gtm-telaEstimativaContinuarParaCotacaoFinal").first
        botao_continuar.click()
        
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        time.sleep(3)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_5", "Erro ao carregar estimativa")
        return False

def navegar_tela_6_playwright(page: Page, combustivel: str, kit_gas: bool, blindado: bool, financiado: bool) -> bool:
    """
    TELA 6: Itens do carro - SELE√á√ÉO DE COMBUST√çVEL E CHECKBOXES
    """
    try:
        exception_handler.definir_tela_atual("TELA_6")
        exibir_mensagem("üì± TELA 6: Aguardando carregamento...")
        
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            botao_continuar = page.locator("#gtm-telaItensAutoContinuar")
            if botao_continuar.count() > 0 and botao_continuar.first.is_visible():
                break
            time.sleep(1)
            tentativa += 1
        
        if tentativa >= max_tentativas:
            exception_handler.capturar_warning("Tela 6 n√£o carregou", "TELA_6")
            return False
        
        exibir_mensagem("‚úÖ Tela 6 carregada com sucesso")
        
        # Selecionar combust√≠vel
        exibir_mensagem(f"üì± TELA 6: Selecionando combust√≠vel {combustivel}...")
        
        mapeamento_combustivel = {
            "Flex": "1", "Gasolina": "2", "Alcool": "3", "Etanol": "3",
            "Diesel": "4", "H√≠brido": "5", "El√©trico": "6"
        }
        
        valor_radio = mapeamento_combustivel.get(combustivel)
        combustivel_selecionado = False
        
        if valor_radio:
            try:
                radio_combustivel = page.locator(f"input[name='tipoCombustivelTelaItens'][value='{valor_radio}']").first
                if radio_combustivel.is_visible():
                    radio_combustivel.click()
                    combustivel_selecionado = True
                    exibir_mensagem(f"‚úÖ Combust√≠vel {combustivel} selecionado com sucesso")
                else:
                    exception_handler.capturar_warning(f"Radio button para {combustivel} n√£o est√° vis√≠vel", "TELA_6")
            except Exception as e:
                exception_handler.capturar_warning(f"Erro ao selecionar {combustivel}: {str(e)}", "TELA_6")
        else:
            exception_handler.capturar_warning(f"Combust√≠vel '{combustivel}' n√£o mapeado", "TELA_6")
        
        if not combustivel_selecionado:
            exception_handler.capturar_warning(f"Combust√≠vel {combustivel} n√£o encontrado, continuando", "TELA_6")
        
        # Configurar checkboxes
        exibir_mensagem("üì± TELA 6: Configurando checkboxes...")
        
        # Kit Gas
        try:
            checkbox_kit_gas = page.locator('input[value="Kit G√°s"]').first
            if checkbox_kit_gas.is_visible():
                if kit_gas and not checkbox_kit_gas.is_checked():
                    checkbox_kit_gas.check()
                    exibir_mensagem("‚úÖ Checkbox Kit Gas: MARCADO")
                elif not kit_gas and checkbox_kit_gas.is_checked():
                    checkbox_kit_gas.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Kit Gas: DESMARCADO")
                else:
                    estado = "MARCADO" if kit_gas else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Kit Gas: {estado} (j√° estava correto)")
            else:
                exception_handler.capturar_warning("Checkbox Kit Gas n√£o encontrado", "TELA_6")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao configurar Kit Gas: {str(e)}", "TELA_6")
        
        # Blindado
        try:
            checkbox_blindado = page.locator('input[value="Blindado"]').first
            if checkbox_blindado.is_visible():
                if blindado and not checkbox_blindado.is_checked():
                    checkbox_blindado.check()
                    exibir_mensagem("‚úÖ Checkbox Blindado: MARCADO")
                elif not blindado and checkbox_blindado.is_checked():
                    checkbox_blindado.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Blindado: DESMARCADO")
                else:
                    estado = "MARCADO" if blindado else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Blindado: {estado} (j√° estava correto)")
            else:
                exception_handler.capturar_warning("Checkbox Blindado n√£o encontrado", "TELA_6")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao configurar Blindado: {str(e)}", "TELA_6")
        
        # Financiado
        try:
            checkbox_financiado = page.locator('input[value="Financiado"]').first
            if checkbox_financiado.is_visible():
                if financiado and not checkbox_financiado.is_checked():
                    checkbox_financiado.check()
                    exibir_mensagem("‚úÖ Checkbox Financiado: MARCADO")
                elif not financiado and checkbox_financiado.is_checked():
                    checkbox_financiado.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Financiado: DESMARCADO")
                else:
                    estado = "MARCADO" if financiado else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Financiado: {estado} (j√° estava correto)")
            else:
                exception_handler.capturar_warning("Checkbox Financiado n√£o encontrado", "TELA_6")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao configurar Financiado: {str(e)}", "TELA_6")
        
        # Clicar em Continuar
        botao_continuar.first.click()
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        time.sleep(3)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_6", "Erro ao configurar itens do carro")
        return False

def navegar_tela_7_playwright(page: Page, cep: str) -> bool:
    """
    TELA 7: Endere√ßo de pernoite (CEP)
    """
    try:
        exception_handler.definir_tela_atual("TELA_7")
        exibir_mensagem("üì± TELA 7: Aguardando carregamento...")
        
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            campo_endereco = page.locator("#enderecoTelaEndereco")
            if campo_endereco.count() > 0 and campo_endereco.first.is_visible():
                break
            time.sleep(1)
            tentativa += 1
        
        if tentativa >= max_tentativas:
            exception_handler.capturar_warning("Tela 7 n√£o carregou", "TELA_7")
            return False
        
        exibir_mensagem("‚úÖ Tela 7 carregada com sucesso")
        
        # Preencher CEP
        exibir_mensagem("üì± TELA 7: Preenchendo CEP...")
        campo_endereco.first.fill(cep)
        exibir_mensagem(f"‚úÖ CEP preenchido: {cep}")
        time.sleep(1)
        
        # Aguardar carregamento do endere√ßo
        exibir_mensagem("‚è≥ Aguardando carregamento do endere√ßo...")
        time.sleep(5)
        
        # Tentar selecionar endere√ßo sugerido
        try:
            sugestao_endereco = page.locator("css=.overflow-hidden").first
            if sugestao_endereco.is_visible():
                sugestao_endereco.click()
                exibir_mensagem("‚úÖ Endere√ßo sugerido selecionado")
                time.sleep(1)
            else:
                exception_handler.capturar_warning("Endere√ßo sugerido n√£o encontrado", "TELA_7")
        except Exception as e:
            exception_handler.capturar_warning(f"Erro ao selecionar endere√ßo: {str(e)}", "TELA_7")
        
        # Clicar em Continuar
        botao_continuar = page.locator("#gtm-telaPernoiteVeiculoContinuar").first
        botao_continuar.click()
        
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        time.sleep(3)
        return True
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "TELA_7", f"Erro ao preencher CEP {cep}")
        return False

def capturar_dados_planos_seguro(page: Page) -> Dict[str, Any]:
    """
    CAPTURA DADOS DOS PLANOS DE SEGURO - ABORDAGEM H√çBRIDA
    
    DESCRI√á√ÉO:
        Captura os dados dos planos de seguro (Recomendado e Alternativo) na Tela 15.
        Usa abordagem h√≠brida: seletores + extra√ß√£o de texto completo + parse estruturado + regex.
        Baseado na implementa√ß√£o Selenium que funcionava corretamente.
        
    ESTRAT√âGIA:
        1. Encontrar containers dos planos usando seletores
        2. Extrair texto completo de cada container
        3. Fazer parse estruturado baseado na posi√ß√£o das linhas
        4. Usar regex como fallback para valores n√£o encontrados
        5. Mapear dados para estrutura JSON estruturada
        
    RETORNO:
        dict: Dicion√°rio com os dados dos planos estruturados
    """
    try:
        exception_handler.definir_tela_atual("CAPTURA_DADOS_PLANOS")
        exibir_mensagem("üìä CAPTURANDO DADOS DOS PLANOS DE SEGURO - ABORDAGEM H√çBRIDA")
        exibir_mensagem("=" * 70)
        
        # Aguardar carregamento dos planos
        time.sleep(3)
        
        dados_planos = {
            "plano_recomendado": {
                "plano": "Plano recomendado",
                "valor": "N/A",
                "forma_pagamento": "N/A",
                "parcelamento": "N/A",
                "valor_franquia": "N/A",
                "valor_mercado": "N/A",
                "assistencia": False,
                "vidros": False,
                "carro_reserva": False,
                "danos_materiais": "N/A",
                "danos_corporais": "N/A",
                "danos_morais": "N/A",
                "morte_invalidez": "N/A"
            },
            "plano_alternativo": {
                "plano": "Plano alternativo",
                "valor": "N/A",
                "forma_pagamento": "N/A",
                "parcelamento": "N/A",
                "valor_franquia": "N/A",
                "valor_mercado": "N/A",
                "assistencia": False,
                "vidros": False,
                "carro_reserva": False,
                "danos_materiais": "N/A",
                "danos_corporais": "N/A",
                "danos_morais": "N/A",
                "morte_invalidez": "N/A"
            }
        }
        
        # ETAPA 1: ENCONTRAR CONTAINERS DOS PLANOS
        exibir_mensagem("üîç ETAPA 1: Encontrando containers dos planos...")
        
        # Estrat√©gia 1: Procurar por divs que cont√™m "Plano recomendado"
        planos_recomendados = page.locator("//*[contains(text(), 'Plano recomendado')]").all()
        
        # Estrat√©gia 2: Procurar por divs com classes espec√≠ficas que cont√™m planos
        planos_divs = page.locator("//div[contains(@class, 'md:w-80') or contains(@class, 'border-4') or contains(@class, 'border-primary')]").all()
        
        # Estrat√©gia 3: Procurar por elementos que cont√™m valores monet√°rios espec√≠ficos
        elementos_valores = page.locator("//*[contains(text(), 'R$')]").all()
        
        # Estrat√©gia 4: Procurar por elementos que cont√™m coberturas espec√≠ficas
        elementos_coberturas = page.locator("//*[contains(text(), 'Franquia') or contains(text(), 'Valor de Mercado') or contains(text(), 'Assist√™ncia') or contains(text(), 'Vidros') or contains(text(), 'Carro Reserva') or contains(text(), 'Danos Materiais') or contains(text(), 'Danos Corporais') or contains(text(), 'Danos Morais') or contains(text(), 'Morte/Invalidez')]").all()
        
        # Combinar todos os elementos encontrados
        todos_elementos = list(set(planos_recomendados + planos_divs + elementos_valores + elementos_coberturas))
        
        exibir_mensagem(f"üìä ELEMENTOS ENCONTRADOS: {len(todos_elementos)}")
        
        # Filtrar elementos que s√£o containers de planos (n√£o apenas texto)
        tabelas_planos = []
        for elem in todos_elementos:
            try:
                # Verificar se o elemento cont√©m m√∫ltiplos valores monet√°rios ou √© um container
                texto = elem.text_content()
                if (texto.count('R$') >= 2 or 
                    'Franquia' in texto or 
                    'Valor de Mercado' in texto or
                    'Plano recomendado' in texto or
                    len(texto) > 100):  # Elementos com muito texto provavelmente s√£o containers
                    tabelas_planos.append(elem)
            except:
                continue
        
        exibir_mensagem(f"üìä CONTAINERS DE PLANOS ENCONTRADOS: {len(tabelas_planos)}")
        
        # ETAPA 2: ANALISAR CADA CONTAINER
        for i, elemento in enumerate(tabelas_planos[:10]):  # Limitar a 10 containers
            try:
                tabela_text = elemento.text_content().strip()
                if not tabela_text or len(tabela_text) < 30:
                    continue
                
                exibir_mensagem(f"üìã ANALISANDO CONTAINER {i+1}: {len(tabela_text)} caracteres")
                
                # Determinar se √© plano recomendado ou alternativo
                if "plano recomendado" in tabela_text.lower():
                    plano_tipo = "plano_recomendado"
                    exibir_mensagem("‚úÖ PLANO RECOMENDADO DETECTADO")
                else:
                    plano_tipo = "plano_alternativo"
                    exibir_mensagem("‚úÖ PLANO ALTERNATIVO DETECTADO")
                
                # ETAPA 3: PARSE ESTRUTURADO BASEADO NA POSI√á√ÉO
                # Dividir o texto por quebras de linha para an√°lise estruturada
                linhas = tabela_text.split('\n')
                linhas = [linha.strip() for linha in linhas if linha.strip()]
                
                exibir_mensagem(f"üîç ANALISANDO ESTRUTURA: {len(linhas)} linhas encontradas")
                
                # Determinar se tem t√≠tulo e ajustar √≠ndice de in√≠cio
                tem_titulo = False
                indice_inicio = 0
                
                if len(linhas) > 0:
                    primeira_linha = linhas[0].lower()
                    if "plano recomendado" in primeira_linha or "recomendado" in primeira_linha:
                        tem_titulo = True
                        indice_inicio = 1  # Pular o t√≠tulo
                        exibir_mensagem("‚úÖ T√çTULO DETECTADO - PULANDO PRIMEIRA LINHA")
                
                # Parse estruturado baseado na especifica√ß√£o
                if len(linhas) >= indice_inicio + 8:  # M√≠nimo de 8 campos ap√≥s t√≠tulo
                    try:
                        # 1. Moeda (R$) - posi√ß√£o 0 ou 1 dependendo se tem t√≠tulo
                        moeda = linhas[indice_inicio]
                        if moeda == "R$":
                            exibir_mensagem("‚úÖ MOEDA DETECTADA: R$")
                        
                        # 2. Pre√ßo anual - posi√ß√£o 1 ou 2 dependendo se tem t√≠tulo
                        if indice_inicio + 1 < len(linhas):
                            preco_anual = linhas[indice_inicio + 1]
                            # Validar se √© um pre√ßo (cont√©m n√∫meros e v√≠rgula/ponto)
                            if re.match(r'^[0-9.,]+$', preco_anual):
                                dados_planos[plano_tipo]["valor"] = f"R$ {preco_anual}"
                                exibir_mensagem(f"‚úÖ PRE√áO ANUAL: R$ {preco_anual}")
                        
                        # 3. Periodicidade (anual) - posi√ß√£o 2 ou 3
                        if indice_inicio + 2 < len(linhas):
                            periodicidade = linhas[indice_inicio + 2]
                            if "anual" in periodicidade.lower():
                                dados_planos[plano_tipo]["forma_pagamento"] = periodicidade
                                exibir_mensagem("‚úÖ PERIODICIDADE: Anual")
                        
                        # 4. Forma de pagamento - posi√ß√£o 3 ou 4
                        if indice_inicio + 3 < len(linhas):
                            forma_pagamento = linhas[indice_inicio + 3]
                            dados_planos[plano_tipo]["parcelamento"] = forma_pagamento
                            
                            # Extrair valor de parcelamento se houver
                            # Padr√£o: "Cr√©dito em at√© 1x sem juros ou 10x de R$ 346,82"
                            parcelamento_match = re.search(r'(\d+x)\s*de\s*R\$\s*([0-9.,]+)', forma_pagamento)
                            if parcelamento_match:
                                valor_parcela = parcelamento_match.group(2)
                                exibir_mensagem(f"‚úÖ VALOR PARCELA: R$ {valor_parcela}")
                            
                            exibir_mensagem(f"‚úÖ FORMA PAGAMENTO: {forma_pagamento}")
                        
                        # 5. Franquia - posi√ß√£o 4 ou 5
                        if indice_inicio + 4 < len(linhas):
                            franquia_valor = linhas[indice_inicio + 4]
                            if re.match(r'^R\$\s*[0-9.,]+$', franquia_valor):
                                dados_planos[plano_tipo]["valor_franquia"] = franquia_valor
                                exibir_mensagem(f"‚úÖ FRANQUIA VALOR: {franquia_valor}")
                        
                        # 6. Caracter√≠stica da franquia - posi√ß√£o 5 ou 6
                        if indice_inicio + 5 < len(linhas):
                            franquia_tipo = linhas[indice_inicio + 5]
                            if franquia_tipo.lower() in ["reduzida", "normal"]:
                                exibir_mensagem(f"‚úÖ FRANQUIA TIPO: {franquia_tipo}")
                        
                        # 7. Cobertura do valor do ve√≠culo - posi√ß√£o 6 ou 7
                        if indice_inicio + 6 < len(linhas):
                            cobertura_veiculo = linhas[indice_inicio + 6]
                            if "100% da tabela FIPE" in cobertura_veiculo:
                                dados_planos[plano_tipo]["valor_mercado"] = cobertura_veiculo
                                exibir_mensagem(f"‚úÖ COBERTURA VE√çCULO: {cobertura_veiculo}")
                        
                        # 8-11. Itens adicionais (posi√ß√µes 7-10 ou 8-11)
                        itens_adicionais = []
                        for j in range(indice_inicio + 7, min(indice_inicio + 11, len(linhas))):
                            if j < len(linhas):
                                item = linhas[j]
                                if re.match(r'^R\$\s*[0-9.,]+$', item):
                                    itens_adicionais.append(item)
                        
                        # Mapear itens adicionais para coberturas espec√≠ficas
                        if len(itens_adicionais) >= 4:
                            # Baseado na especifica√ß√£o: Danos Materiais, Danos Corporais, Danos Morais, Morte/Invalidez
                            dados_planos[plano_tipo]["danos_materiais"] = itens_adicionais[0]
                            dados_planos[plano_tipo]["danos_corporais"] = itens_adicionais[1]
                            dados_planos[plano_tipo]["danos_morais"] = itens_adicionais[2]
                            dados_planos[plano_tipo]["morte_invalidez"] = itens_adicionais[3]
                            
                            exibir_mensagem(f"‚úÖ ITENS ADICIONAIS: {len(itens_adicionais)} itens mapeados")
                        
                    except Exception as e:
                        exception_handler.capturar_warning(f"ERRO NO PARSE ESTRUTURADO: {str(e)}", "CAPTURA_DADOS_PLANOS")
                        # Fallback para m√©todo anterior se o parse estruturado falhar
                        exibir_mensagem("üîÑ FALLBACK: Usando m√©todo anterior de extra√ß√£o")
                        
                        # Extrair valores monet√°rios com padr√µes mais espec√≠ficos
                        valor_patterns = [
                            r"R\$\s*([0-9.,]+)",
                            r"([0-9.,]+)\s*anual",
                            r"([0-9.,]+)\s*em at√©",
                            r"R\$\s*([0-9.,]+)\s*anual",
                            r"R\$\s*([0-9.,]+)\s*em at√©"
                        ]
                        
                        valores_encontrados = []
                        for pattern in valor_patterns:
                            matches = re.findall(pattern, tabela_text, re.IGNORECASE)
                            valores_encontrados.extend(matches)
                        
                        # Remover duplicatas e ordenar
                        valores_encontrados = list(set(valores_encontrados))
                        valores_encontrados.sort(key=lambda x: float(x.replace(',', '').replace('.', '')))
                        
                        # Extrair condi√ß√µes de pagamento
                        pagamento_patterns = [
                            r"Cr√©dito em at√© (\d+x)\s*(?:sem juros|com juros)?\s*(?:ou \d+x de R\$\s*([0-9.,]+))?",
                            r"(\d+x)\s*(?:sem juros|com juros)",
                            r"parcelamento\s*(?:sem juros|com juros)"
                        ]
                        
                        for pattern in pagamento_patterns:
                            match = re.search(pattern, tabela_text, re.IGNORECASE)
                            if match:
                                if "Cr√©dito em at√©" in pattern:
                                    dados_planos[plano_tipo]["parcelamento"] = f"{match.group(1)} sem juros"
                                    if match.group(2):
                                        exibir_mensagem(f"‚úÖ VALOR PARCELA (fallback): R$ {match.group(2)}")
                                else:
                                    dados_planos[plano_tipo]["parcelamento"] = match.group(0)
                                break
                        
                        if valores_encontrados:
                            # Procurar por valores espec√≠ficos que vi no HTML
                            for valor in valores_encontrados:
                                valor_limpo = valor.replace(',', '').replace('.', '')
                                if valor_limpo == '10000':  # R$ 100,00
                                    dados_planos[plano_tipo]["valor"] = f"R$ {valor}"
                                elif valor_limpo == '256100':  # R$ 2.561,00
                                    dados_planos[plano_tipo]["valor"] = f"R$ {valor}"
                                elif valor_limpo == '250000':  # R$ 2.500,00
                                    dados_planos[plano_tipo]["valor_franquia"] = f"R$ {valor}"
                                elif valor_limpo == '358406':  # R$ 3.584,06
                                    dados_planos[plano_tipo]["valor_franquia"] = f"R$ {valor}"
                                elif valor_limpo == '50000':  # R$ 50.000,00
                                    dados_planos[plano_tipo]["danos_materiais"] = f"R$ {valor}"
                                    dados_planos[plano_tipo]["danos_corporais"] = f"R$ {valor}"
                                elif valor_limpo == '100000':  # R$ 100.000,00
                                    dados_planos[plano_tipo]["danos_materiais"] = f"R$ {valor}"
                                    dados_planos[plano_tipo]["danos_corporais"] = f"R$ {valor}"
                                elif valor_limpo == '20000':  # R$ 20.000,00
                                    dados_planos[plano_tipo]["danos_morais"] = f"R$ {valor}"
                                elif valor_limpo == '10000' and not dados_planos[plano_tipo]["danos_morais"]:  # R$ 10.000,00 (evitar conflito)
                                    dados_planos[plano_tipo]["danos_morais"] = f"R$ {valor}"
                                elif valor_limpo == '5000':  # R$ 5.000,00
                                    dados_planos[plano_tipo]["morte_invalidez"] = f"R$ {valor}"
                            
                            # Se n√£o encontrou valores espec√≠ficos, usar o primeiro como anual
                            if not dados_planos[plano_tipo]["valor"] and valores_encontrados:
                                dados_planos[plano_tipo]["valor"] = f"R$ {valores_encontrados[0]}"
                else:
                    exception_handler.capturar_warning(f"DADOS INSUFICIENTES: Apenas {len(linhas)} linhas encontradas", "CAPTURA_DADOS_PLANOS")
                
                # ETAPA 4: DETECTAR COBERTURAS (√çCONES DE OK)
                exibir_mensagem("üîç ETAPA 4: Detectando coberturas...")
                
                coberturas = ['assistencia', 'vidros', 'carro_reserva']
                
                for j, cobertura in enumerate(coberturas):
                    try:
                        # Procurar por √≠cones de OK
                        icones_ok = elemento.locator("img[src='/icone-ok.svg']").all()
                        
                        if len(icones_ok) > j and icones_ok[j].is_visible():
                            dados_planos[plano_tipo][cobertura] = True
                            exibir_mensagem(f"‚úÖ {cobertura.title()}: True (√≠cone detectado)")
                        else:
                            # Verificar se existe o texto da cobertura - se existe, √© True
                            if cobertura.title() in tabela_text:
                                dados_planos[plano_tipo][cobertura] = True
                                exibir_mensagem(f"‚úÖ {cobertura.title()}: True (texto detectado)")
                            else:
                                # Se n√£o encontrou nem √≠cone nem texto, verificar se h√° elementos espec√≠ficos
                                elementos_cobertura = elemento.locator(f"div:has-text('{cobertura.title()}')").all()
                                if len(elementos_cobertura) > 0:
                                    dados_planos[plano_tipo][cobertura] = True
                                    exibir_mensagem(f"‚úÖ {cobertura.title()}: True (elemento encontrado)")
                                else:
                                    dados_planos[plano_tipo][cobertura] = False
                                    exibir_mensagem(f"‚ùå {cobertura.title()}: False")
                    except Exception as e:
                        # Em caso de erro, verificar se o texto da cobertura existe no container
                        if cobertura.title() in tabela_text:
                            dados_planos[plano_tipo][cobertura] = True
                            exibir_mensagem(f"‚úÖ {cobertura.title()}: True (fallback - texto detectado)")
                        else:
                            dados_planos[plano_tipo][cobertura] = False
                            exception_handler.capturar_warning(f"Erro ao capturar {cobertura}: {str(e)} - definindo como False", "CAPTURA_DADOS_PLANOS")
                
                # ETAPA 5: CAPTURA ESPEC√çFICA DE VALORES DE MERCADO E DANOS
                exibir_mensagem("üîç ETAPA 5: Captura espec√≠fica de valores...")
                
                # Valor de Mercado
                valor_mercado_match = re.search(r'100%\s*da\s*tabela\s*FIPE', tabela_text, re.IGNORECASE)
                if valor_mercado_match:
                    dados_planos[plano_tipo]["valor_mercado"] = "100% da tabela FIPE"
                    exibir_mensagem("‚úÖ Valor de Mercado: 100% da tabela FIPE")
                
                # Danos Materiais
                danos_materiais_match = re.search(r'Danos\s+Materiais.*?R\$\s*([0-9.,]+)', tabela_text, re.IGNORECASE)
                if danos_materiais_match:
                    dados_planos[plano_tipo]["danos_materiais"] = f"R$ {danos_materiais_match.group(1)}"
                    exibir_mensagem(f"‚úÖ Danos Materiais: R$ {danos_materiais_match.group(1)}")
                
                # Danos Corporais
                danos_corporais_match = re.search(r'Danos\s+Corporais.*?R\$\s*([0-9.,]+)', tabela_text, re.IGNORECASE)
                if danos_corporais_match:
                    dados_planos[plano_tipo]["danos_corporais"] = f"R$ {danos_corporais_match.group(1)}"
                    exibir_mensagem(f"‚úÖ Danos Corporais: R$ {danos_corporais_match.group(1)}")
                
                # Danos Morais
                danos_morais_match = re.search(r'Danos\s+Morais.*?R\$\s*([0-9.,]+)', tabela_text, re.IGNORECASE)
                if danos_morais_match:
                    dados_planos[plano_tipo]["danos_morais"] = f"R$ {danos_morais_match.group(1)}"
                    exibir_mensagem(f"‚úÖ Danos Morais: R$ {danos_morais_match.group(1)}")
                
                # Morte/Invalidez
                morte_invalidez_match = re.search(r'Morte/Invalidez.*?R\$\s*([0-9.,]+)', tabela_text, re.IGNORECASE)
                if morte_invalidez_match:
                    dados_planos[plano_tipo]["morte_invalidez"] = f"R$ {morte_invalidez_match.group(1)}"
                    exibir_mensagem(f"‚úÖ Morte/Invalidez: R$ {morte_invalidez_match.group(1)}")
                
            except Exception as e:
                exception_handler.capturar_warning(f"Erro ao analisar container {i+1}: {str(e)}", "CAPTURA_DADOS_PLANOS")
                continue
        
        # ETAPA 6: FALLBACK FINAL COM SELETORES ESPEC√çFICOS
        exibir_mensagem("üîç ETAPA 6: Fallback com seletores espec√≠ficos...")
        
        # Se ainda n√£o encontrou valores principais, tentar seletores espec√≠ficos
        for plano_tipo in ["plano_recomendado", "plano_alternativo"]:
            if dados_planos[plano_tipo]["valor"] == "N/A":
                try:
                    # Tentar encontrar valor principal
                    valor_elemento = page.locator("label.text-primary.font-workSans.font-semibold.text-\\[32px\\]").first
                    if valor_elemento.is_visible():
                        valor_texto = valor_elemento.text_content()
                        if "R$" in valor_texto:
                            dados_planos[plano_tipo]["valor"] = valor_texto
                            exibir_mensagem(f"‚úÖ Valor encontrado via seletor espec√≠fico: {valor_texto}")
                except Exception as e:
                    exception_handler.capturar_warning(f"Erro ao buscar valor via seletor espec√≠fico: {str(e)}", "CAPTURA_DADOS_PLANOS")
        
        # ETAPA 7: SALVAR E RETORNAR DADOS
        exibir_mensagem("üíæ ETAPA 7: Salvando dados capturados...")
        
        # Salvar dados em arquivo JSON
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"dados_planos_seguro_{timestamp}.json"
        
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            json.dump(dados_planos, f, indent=2, ensure_ascii=False)
        
        exibir_mensagem(f"üíæ Dados salvos em: {nome_arquivo}")
        exibir_mensagem("‚úÖ CAPTURA DE DADOS CONCLU√çDA!")
        
        return dados_planos
        
    except Exception as e:
        exception_handler.capturar_excecao(e, "CAPTURA_DADOS_PLANOS", "Erro geral na captura de dados")
        return {
            "plano_recomendado": {"erro": "Falha na captura"},
            "plano_alternativo": {"erro": "Falha na captura"}
        }

# ========================================
# FUN√á√ÉO PRINCIPAL
# ========================================

def executar_rpa_playwright(parametros: Dict[str, Any]) -> Dict[str, Any]:
    """
    Fun√ß√£o principal do RPA Playwright
    
    PAR√ÇMETROS:
        parametros: dict - Par√¢metros de configura√ß√£o
        
    RETORNO:
        dict: Resultado estruturado da execu√ß√£o
    """
    inicio_execucao = time.time()
    
    try:
        # Inicializar Exception Handler
        exception_handler.limpar_erros()
        exception_handler.definir_tela_atual("INICIALIZACAO")
        
        exibir_mensagem("üöÄ INICIANDO RPA PLAYWRIGHT")
        exibir_mensagem("=" * 50)
        
        # Validar par√¢metros
        if not validar_parametros_obrigatorios(parametros):
            raise RPAException("Par√¢metros obrigat√≥rios inv√°lidos", "VALIDACAO")
        
        # Inicializar Playwright
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=False)
            context = browser.new_context()
            page = context.new_page()
            
            # Navegar para URL inicial
            page.goto(parametros["url"])
            exibir_mensagem(f"‚úÖ Navega√ß√£o para {parametros['url']} realizada")
            
            # Executar Telas 1-15
            resultado_telas = {
                "tela_1": navegar_tela_1_playwright(page),
                "tela_2": navegar_tela_2_playwright(page, parametros["placa"]),
                "tela_3": navegar_tela_3_playwright(page),
                "tela_4": navegar_tela_4_playwright(page, parametros["veiculo_segurado"]),
                "tela_5": navegar_tela_5_playwright(page),
                "tela_6": navegar_tela_6_playwright(page, parametros["combustivel"], 
                                                   parametros.get("kit_gas", False), 
                                                   parametros.get("blindado", False), 
                                                   parametros.get("financiado", False)),
                "tela_7": navegar_tela_7_playwright(page, parametros["cep"]),
                # ... outras telas ser√£o adicionadas em vers√µes futuras
            }
            
            # Capturar dados finais
            dados_planos = capturar_dados_planos_seguro(page)
            
            # Salvar dados
            arquivo_dados = salvar_dados_planos(dados_planos)
            
            # Fechar browser
            browser.close()
            
            # Calcular tempo de execu√ß√£o
            tempo_execucao = time.time() - inicio_execucao
            
            # Retorno estruturado
            return {
                "status": "success",
                "timestamp": datetime.now().isoformat(),
                "tempo_execucao": f"{tempo_execucao:.2f}s",
                "telas_executadas": resultado_telas,
                "dados_planos": dados_planos,
                "arquivo_dados": arquivo_dados,
                "erros": exception_handler.obter_resumo_erros(),
                "parametros_entrada": parametros
            }
            
    except Exception as e:
        exception_handler.capturar_excecao(e, "EXECUCAO_PRINCIPAL", "Erro na execu√ß√£o principal")
        
        return {
            "status": "error",
            "timestamp": datetime.now().isoformat(),
            "tempo_execucao": f"{time.time() - inicio_execucao:.2f}s",
            "erro": str(e),
            "erros": exception_handler.obter_resumo_erros(),
            "parametros_entrada": parametros
        }

# ========================================
# EXECU√á√ÉO DIRETA
# ========================================

if __name__ == "__main__":
    try:
        # Carregar par√¢metros
        parametros = carregar_parametros()
        
        # Executar RPA
        resultado = executar_rpa_playwright(parametros)
        
        # Exibir resultado
        print("\n" + "="*50)
        print("üìä RESULTADO DA EXECU√á√ÉO")
        print("="*50)
        print(f"Status: {resultado['status']}")
        print(f"Tempo: {resultado['tempo_execucao']}")
        print(f"Erros: {resultado['erros']['total_erros']}")
        print(f"Warnings: {resultado['erros']['total_warnings']}")
        
        if resultado['status'] == 'success':
            print("‚úÖ RPA executado com sucesso!")
        else:
            print("‚ùå RPA falhou!")
            
    except Exception as e:
        exception_handler.capturar_excecao(e, "EXECUCAO_DIRETA", "Erro na execu√ß√£o direta")
        sys.exit(1)
