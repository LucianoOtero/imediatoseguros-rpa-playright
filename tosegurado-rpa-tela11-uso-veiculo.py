#!/usr/bin/env python3
"""
RPA T√¥ Segurado - TELA 11: Uso do Ve√≠culo + CAPTURA DADOS TELA 8
Continua√ß√£o do fluxo a partir da Tela 10 (Endere√ßo de Pernoite)
+ Captura dos dados da estimativa inicial (Tela 8)
"""

import time
import json
import re
from datetime import datetime
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Importar configura√ß√£o do Chrome do m√≥dulo separado
from chrome_config import (
    configurar_chrome, 
    limpar_chrome, 
    aguardar_carregamento_pagina,
    criar_diretorio_tela,
    salvar_estado_tela,
    log_tela
)

def capturar_dados_tela8(driver):
    """Captura os dados da estimativa inicial (Tela 8)"""
    print("\n **CAPTURANDO DADOS DA TELA 8 (ESTIMATIVA INICIAL)**")
    
    try:
        # Aguardar um pouco para garantir que os dados carregaram
        time.sleep(5)
        
        # Salvar estado da Tela 8 para an√°lise
        log_tela(driver, 8, "captura_dados", "Capturando dados da estimativa inicial")
        
        # Extrair dados da p√°gina
        page_source = driver.page_source
        
        # Dicion√°rio para armazenar os dados capturados
        dados_cobertura = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "tela": "Tela 8 - Estimativa Inicial",
            "cobertura": "Primeira Cobertura (Compreensiva)",
            "dados": {}
        }
        
        print(" **ANALISANDO DADOS DA COBERTURA:**")
        print("=" * 60)
        
        # Procurar por diferentes padr√µes de dados
        padroes_busca = {
            "nome_cobertura": [
                r"compreensiva",
                r"cobertura.*completa",
                r"plano.*recomendado",
                r"primeira.*cobertura"
            ],
            "valor_cobertura": [
                r"R\$\s*[\d.,]+",
                r"valor.*R\$\s*[\d.,]+",
                r"pre√ßo.*R\$\s*[\d.,]+"
            ],
            "franquia": [
                r"franquia.*R\$\s*[\d.,]+",
                r"R\$\s*[\d.,]+.*franquia"
            ],
            "valor_mercado": [
                r"valor.*mercado.*R\$\s*[\d.,]+",
                r"mercado.*R\$\s*[\d.,]+"
            ],
            "assistencia": [
                r"assist√™ncia.*100%",
                r"assistencia.*100%",
                r"100%.*assist√™ncia",
                r"100%.*assistencia"
            ],
            "vidros": [
                r"vidros.*100%",
                r"100%.*vidros"
            ],
            "carro_reserva": [
                r"carro.*reserva.*100%",
                r"100%.*carro.*reserva"
            ],
            "danos_materiais": [
                r"danos.*materiais.*R\$\s*[\d.,]+",
                r"R\$\s*[\d.,]+.*danos.*materiais"
            ],
            "danos_corporais": [
                r"danos.*corporais.*R\$\s*[\d.,]+",
                r"R\$\s*[\d.,]+.*danos.*corporais"
            ],
            "danos_morais": [
                r"danos.*morais.*R\$\s*[\d.,]+",
                r"R\$\s*[\d.,]+.*danos.*morais"
            ],
            "morte_invalidez": [
                r"morte.*invalidez.*R\$\s*[\d.,]+",
                r"invalidez.*R\$\s*[\d.,]+",
                r"R\$\s*[\d.,]+.*morte.*invalidez"
            ]
        }
        
        # Buscar cada padr√£o
        for campo, padroes in padroes_busca.items():
            valor_encontrado = None
            
            for padrao in padroes:
                match = re.search(padrao, page_source, re.IGNORECASE)
                if match:
                    valor_encontrado = match.group(0).strip()
                    break
            
            if valor_encontrado:
                dados_cobertura["dados"][campo] = valor_encontrado
                print(f"‚úÖ {campo.replace('_', ' ').title()}: {valor_encontrado}")
            else:
                dados_cobertura["dados"][campo] = "N√£o encontrado"
                print(f"‚ùå {campo.replace('_', ' ').title()}: N√£o encontrado")
        
        # Buscar dados espec√≠ficos por XPath ou seletores
        print("\nüîç **BUSCANDO DADOS ESPEC√çFICOS:**")
        
        try:
            # Procurar por elementos com valores monet√°rios
            elementos_valor = driver.find_elements(By.XPATH, "//*[contains(text(), 'R$')]")
            valores_encontrados = []
            
            for elemento in elementos_valor:
                texto = elemento.text.strip()
                if "R$" in texto and len(texto) < 100:  # Filtrar textos muito longos
                    valores_encontrados.append(texto)
            
            if valores_encontrados:
                print(f" Valores monet√°rios encontrados: {len(valores_encontrados)}")
                for i, valor in enumerate(valores_encontrados[:10]):  # Mostrar apenas os primeiros 10
                    print(f"   {i+1}. {valor}")
                
                dados_cobertura["dados"]["valores_monetarios"] = valores_encontrados[:10]
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao buscar valores espec√≠ficos: {e}")
        
        # Salvar dados capturados em JSON
        diretorio_tela8 = criar_diretorio_tela(8)
        caminho_json = f"{diretorio_tela8}/dados_cobertura_compreensiva.json"
        
        with open(caminho_json, "w", encoding="utf-8") as f:
            json.dump(dados_cobertura, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Dados salvos em JSON: {caminho_json}")
        
        # Salvar dados em formato leg√≠vel
        caminho_txt = f"{diretorio_tela8}/dados_cobertura_compreensiva.txt"
        with open(caminho_txt, "w", encoding="utf-8") as f:
            f.write("DADOS DA COBERTURA COMPREENSIVA - TELA 8\n")
            f.write("=" * 60 + "\n")
            f.write(f"Timestamp: {dados_cobertura['timestamp']}\n")
            f.write(f"Tela: {dados_cobertura['tela']}\n")
            f.write(f"Cobertura: {dados_cobertura['cobertura']}\n\n")
            
            for campo, valor in dados_cobertura["dados"].items():
                f.write(f"{campo.replace('_', ' ').title()}: {valor}\n")
        
        print(f" Dados salvos em TXT: {caminho_txt}")
        
        # Resumo dos dados capturados
        print(f"\n **RESUMO DOS DADOS CAPTURADOS:**")
        print("=" * 60)
        print(f"‚úÖ Total de campos analisados: {len(dados_cobertura['dados'])}")
        print(f"‚úÖ Dados encontrados: {sum(1 for v in dados_cobertura['dados'].values() if v != 'N√£o encontrado')}")
        print(f"‚ùå Dados n√£o encontrados: {sum(1 for v in dados_cobertura['dados'].values() if v == 'N√£o encontrado')}")
        
        return dados_cobertura
        
    except Exception as e:
        print(f"‚ùå **ERRO AO CAPTURAR DADOS DA TELA 8:** {e}")
        return None

def navegar_ate_tela10(driver):
    """Navega at√© a Tela 10 (√∫ltima tela funcionando)"""
    print("üöÄ **NAVEGANDO AT√â TELA 10 (ENDERE√áO DE PERNOITE)**")
    
    try:
        # Tela 1: Selecionar Carro
        print("\nüì± TELA 1: Selecionando Carro...")
        driver.get("https://www.app.tosegurado.com.br/cotacao")
        time.sleep(5)
        
        carro_button = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
        )
        carro_button.click()
        print("‚úÖ Carro selecionado")
        time.sleep(3)
        
        # Tela 2: Inserir placa
        print("\nüì± TELA 2: Inserindo placa...")
        placa_input = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        placa_input.clear()
        placa_input.send_keys("EED3D56")
        print("‚úÖ Placa EED3D56 inserida")
        time.sleep(2)
        
        # Tela 3: Clicar Continuar
        print("\nüì± TELA 3: Clicando Continuar...")
        continuar_button = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado")
        time.sleep(5)
        
        # Tela 5: Confirmar ve√≠culo
        print("\nüì± TELA 5: Confirmando ve√≠culo...")
        WebDriverWait(driver, 40).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'COROLLA')]"))
        )
        
        sim_radio = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//input[@value='Sim']"))
        )
        driver.execute_script("arguments[0].click();", sim_radio)
        print("‚úÖ Ve√≠culo confirmado")
        time.sleep(3)
        
        # Tela 6: Ve√≠culo segurado
        print("\nüì± TELA 6: Selecionando 'N√£o' para ve√≠culo segurado...")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "confirmarVeiculoTelaInformacoesVeiculo"))
        )
        
        nao_radio = driver.find_element(By.XPATH, "//input[@value='N√£o']")
        if not nao_radio.is_selected():
            driver.execute_script("arguments[0].click();", nao_radio)
            print("‚úÖ Radio 'N√£o' selecionado")
            time.sleep(2)
        
        continuar_button = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaInfosAutoContinuar"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 6")
        time.sleep(5)
        
        # Tela 7: Confirma√ß√£o n√£o segurado
        print("\n TELA 7: Aguardando confirma√ß√£o...")
        time.sleep(5)
        
        # Procurar bot√£o Continuar na Tela 7
        continuar_selectors = [
            "//button[contains(., 'Continuar')]",
            "//*[contains(., 'Continuar')]",
            "//button[contains(text(), 'Continuar')]",
            "//p[contains(., 'Continuar')]"
        ]
        
        continuar_button = None
        for selector in continuar_selectors:
            try:
                continuar_button = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, selector))
                )
                print(f"‚úÖ Bot√£o Continuar encontrado com selector: {selector}")
                break
            except:
                continue
        
        if continuar_button:
            continuar_button.click()
            print("‚úÖ Continuar clicado na Tela 7")
            time.sleep(5)
        else:
            print("‚ö†Ô∏è Bot√£o Continuar n√£o encontrado na Tela 7")
        
        # Tela 8: Estimativa inicial
        print("\n TELA 8: Aguardando estimativa inicial...")
        time.sleep(5)
        
        # Aguardar elementos da estimativa inicial
        WebDriverWait(driver, 60).until(
            lambda d: any([
                "estimativa" in d.page_source.lower(),
                "carrossel" in d.page_source.lower(),
                "cobertura" in d.page_source.lower(),
                "plano" in d.page_source.lower(),
                "franquia" in d.page_source.lower()
            ])
        )
        print("‚úÖ Tela 8 carregada - estimativa inicial detectada!")
        
        # Aguardar carregamento completo
        aguardar_carregamento_pagina(driver, 30)
        
        # Aguardar mais um pouco
        time.sleep(10)
        
        # CAPTURAR DADOS DA TELA 8 ANTES DE CONTINUAR
        dados_capturados = capturar_dados_tela8(driver)
        
        if dados_capturados:
            print("‚úÖ Dados da Tela 8 capturados com sucesso!")
        else:
            print("‚ö†Ô∏è Falha ao capturar dados da Tela 8")
        
        # Clicar em Continuar na Tela 8
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        continuar_button = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 8")
        
        # Aguardar carregamento da pr√≥xima p√°gina
        aguardar_carregamento_pagina(driver, 30)
        
        # Tela 9: Tipo de combust√≠vel
        print("\n TELA 9: Aguardando tipo de combust√≠vel...")
        time.sleep(5)
        
        # Aguardar elementos da Tela 9
        WebDriverWait(driver, 60).until(
            lambda d: any([
                "tipo.*combustivel" in d.page_source.lower(),
                "flex" in d.page_source.lower(),
                "gasolina" in d.page_source.lower(),
                "alcool" in d.page_source.lower(),
                "diesel" in d.page_source.lower(),
                "hibrido" in d.page_source.lower(),
                "eletrico" in d.page_source.lower()
            ])
        )
        print("‚úÖ Tela 9 carregada - tipo de combust√≠vel detectado!")
        
        # Aguardar carregamento completo
        aguardar_carregamento_pagina(driver, 20)
        
        # Aguardar mais um pouco
        time.sleep(5)
        
        # Clicar em Continuar na Tela 9
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        continuar_button = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 9")
        
        # Aguardar carregamento da pr√≥xima p√°gina
        aguardar_carregamento_pagina(driver, 30)
        
        # Tela 10: Endere√ßo de pernoite
        print("\n TELA 10: Aguardando endere√ßo de pernoite...")
        time.sleep(5)
        
        # Aguardar elementos da Tela 10
        WebDriverWait(driver, 60).until(
            lambda d: any([
                "endereco" in d.page_source.lower(),
                "pernoite" in d.page_source.lower(),
                "onde.*carro.*passa.*noite" in d.page_source.lower(),
                "cep" in d.page_source.lower(),
                "rua" in d.page_source.lower(),
                "bairro" in d.page_source.lower()
            ])
        )
        print("‚úÖ Tela 10 carregada - endere√ßo de pernoite detectado!")
        
        # Aguardar carregamento completo
        aguardar_carregamento_pagina(driver, 20)
        
        # Procurar campo CEP
        cep_input = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "enderecoTelaEndereco"))
        )
        
        # Inserir CEP
        cep_input.clear()
        cep_input.send_keys("03084-000")
        print("‚úÖ CEP 03084-000 inserido")
        time.sleep(5)
        
        # Tentar selecionar sugest√£o autom√°tica
        try:
            sugestao = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'S√£o Paulo')]"))
            )
            sugestao.click()
            print("‚úÖ Sugest√£o selecionada")
            time.sleep(3)
        except:
            print("‚ö†Ô∏è Sugest√£o n√£o encontrada - preenchendo manualmente")
            cep_input.clear()
            cep_input.send_keys("Rua Serra de Botucatu, Tatuap√© - S√£o Paulo/SP")
            time.sleep(3)
        
        # Clicar em Continuar na Tela 10
        continuar_button = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 10")
        
        # Aguardar carregamento da pr√≥xima p√°gina
        aguardar_carregamento_pagina(driver, 30)
        
        print("‚úÖ TELA 10 CARREGADA E CONTINUAR CLICADO!")
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO AO NAVEGAR AT√â TELA 10:** {e}")
        return False

def tela11_uso_veiculo(driver):
    """Tela 11: Uso do ve√≠culo"""
    print("\n **INICIANDO TELA 11: Uso do ve√≠culo**")
    
    try:
        # Aguardar Tela 11 carregar com timeout maior
        print("‚è≥ Aguardando Tela 11 carregar...")
        
        # Aguardar um pouco para a p√°gina carregar
        time.sleep(5)
        
        # Salvar estado inicial da Tela 11
        log_tela(driver, 11, "inicial", "Tela 11 carregada - aguardando uso do ve√≠culo")
        
        # Procurar elementos espec√≠ficos da Tela 11
        print("üîç Procurando elementos da Tela 11...")
        
        # Aguardar carregamento com timeout maior
        WebDriverWait(driver, 60).until(
            lambda d: any([
                "uso.*veiculo" in d.page_source.lower(),
                "finalidade.*veiculo" in d.page_source.lower(),
                "pessoal" in d.page_source.lower(),
                "profissional" in d.page_source.lower(),
                "motorista.*aplicativo" in d.page_source.lower(),
                "taxi" in d.page_source.lower()
            ])
        )
        print("‚úÖ Tela 11 carregada - uso do ve√≠culo detectado!")
        
        # Aguardar carregamento completo
        aguardar_carregamento_pagina(driver, 20)
        
        # Salvar estado da Tela 11
        log_tela(driver, 11, "uso_veiculo_carregado", "Uso do ve√≠culo carregado")
        
        # Procurar e selecionar "Pessoal"
        print("‚è≥ Aguardando radio 'Pessoal' aparecer...")
        try:
            # Tentar diferentes seletores para Pessoal
            pessoal_selectors = [
                "//input[@value='Pessoal']",
                "//input[contains(@value, 'Pessoal')]",
                "//input[@name='usoVeiculo']",
                "//input[@type='radio'][contains(@value, 'Pessoal')]"
            ]
            
            pessoal_radio = None
            for selector in pessoal_selectors:
                try:
                    pessoal_radio = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, selector))
                    )
                    print(f"‚úÖ Radio 'Pessoal' encontrado com selector: {selector}")
                    break
                except:
                    continue
            
            if pessoal_radio:
                # Salvar estado antes da sele√ß√£o
                log_tela(driver, 11, "antes_selecao_pessoal", "Antes de selecionar Pessoal")
                
                # Selecionar Pessoal
                if not pessoal_radio.is_selected():
                    driver.execute_script("arguments[0].click();", pessoal_radio)
                    print("‚úÖ Pessoal selecionado via JavaScript")
                else:
                    print("‚úÖ Pessoal j√° estava selecionado")
                time.sleep(3)
                
                # Salvar estado com Pessoal selecionado
                log_tela(driver, 11, "pessoal_selecionado", "Pessoal selecionado")
            else:
                print("‚ö†Ô∏è Radio 'Pessoal' n√£o encontrado - tentando prosseguir...")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao selecionar Pessoal: {e}")
            print("‚è≥ Tentando prosseguir...")
        
        # Salvar estado final da Tela 11
        log_tela(driver, 11, "configuracao_completa", "Configura√ß√£o completa da Tela 11")
        
        # Procurar bot√£o Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        try:
            continuar_selectors = [
                "//button[contains(., 'Continuar')]",
                "//*[contains(., 'Continuar')]",
                "//button[contains(text(), 'Continuar')]",
                "//p[contains(., 'Continuar')]"
            ]
            
            continuar_button = None
            for selector in continuar_selectors:
                try:
                    continuar_button = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    print(f"‚úÖ Bot√£o Continuar encontrado com selector: {selector}")
                    break
                except:
                    continue
            
            if continuar_button:
                # Salvar estado antes do clique
                log_tela(driver, 11, "antes_continuar", "Antes de clicar em Continuar")
                
                # Clicar
                continuar_button.click()
                print("‚úÖ Continuar clicado na Tela 11")
                
                # Aguardar carregamento da pr√≥xima p√°gina
                aguardar_carregamento_pagina(driver, 30)
                
                # Salvar estado ap√≥s clique
                log_tela(driver, 11, "apos_continuar", "Ap√≥s clicar em Continuar")
            else:
                print("‚ö†Ô∏è Bot√£o Continuar n√£o encontrado - tentando prosseguir...")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao procurar bot√£o Continuar: {e}")
            print("‚è≥ Aguardando carregamento autom√°tico...")
            time.sleep(10)
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 11:** {e}")
        log_tela(driver, 11, "erro", f"Erro: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ **RPA T√î SEGURADO - TELA 11: USO DO VE√çCULO + CAPTURA DADOS TELA 8**")
    print("=" * 80)
    print("üéØ OBJETIVO: Implementar Tela 11 (Uso do Ve√≠culo)")
    print("üìä BONUS: Capturar dados da estimativa inicial (Tela 8)")
    print("üìù NOTA: Continua√ß√£o do fluxo a partir da Tela 10")
    print("=" * 80)
    print(f"‚è∞ In√≠cio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome usando o m√≥dulo separado
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 10
        if not navegar_ate_tela10(driver):
            print("‚ùå **FALHA AO NAVEGAR AT√â TELA 10 - PARANDO**")
            return
        
        # Tela 11: Uso do ve√≠culo
        if tela11_uso_veiculo(driver):
            print("‚úÖ **TELA 11 IMPLEMENTADA COM SUCESSO!**")
        else:
            print("‚ùå **FALHA NA TELA 11 - PARANDO EXECU√á√ÉO**")
            return
        
        # Resumo final
        print(f"\n{'='*80}")
        print("üéâ **RPA EXECUTADO COM SUCESSO! TELA 11 IMPLEMENTADA!**")
        print(f"{'='*80}")
        print(f"‚úÖ Total de telas executadas: 11")
        print(f"‚úÖ Tela 11: Uso do ve√≠culo implementada")
        print(f"üìä BONUS: Dados da Tela 8 capturados para uso futuro")
        print(f"\nüìÅ Todos os arquivos salvos em: /opt/imediatoseguros-rpa/temp/")
        print(f"‚è∞ Fim: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        print(f"\n‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
        if driver:
            driver.save_screenshot("/opt/imediatoseguros-rpa/temp/erro-geral.png")
            print(" Screenshot do erro geral salvo")
    
    finally:
        # Limpar recursos usando o m√≥dulo separado
        limpar_chrome(driver, temp_dir)

if __name__ == "__main__":
    main()
