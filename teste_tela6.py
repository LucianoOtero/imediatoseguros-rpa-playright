#!/usr/bin/env python3
"""
Teste espec√≠fico da Tela 6 para identificar o erro
"""

import time
import json
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def configurar_driver():
    """Configura o driver do Chrome"""
    print("üîß Configurando Chrome...")
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    try:
        # Usar ChromeDriver local
        chromedriver_path = os.path.join(os.getcwd(), "chromedriver", "chromedriver-win64", "chromedriver.exe")
        
        if os.path.exists(chromedriver_path):
            print("‚úÖ Usando ChromeDriver local...")
            service = Service(chromedriver_path)
        else:
            print("‚ùå ChromeDriver local n√£o encontrado")
            return None
        
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("‚úÖ Driver configurado com sucesso")
        return driver
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar driver: {e}")
        return None

def carregar_parametros():
    """Carrega par√¢metros do JSON"""
    try:
        with open("parametros.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Erro ao carregar par√¢metros: {e}")
        return None

def testar_tela6(driver, parametros):
    """Testa especificamente a Tela 6"""
    print("\nüß™ TESTANDO TELA 6 ESPECIFICAMENTE")
    print("=" * 50)
    
    try:
        # Abrir p√°gina inicial
        print(f"üåê Abrindo: {parametros['url_base']}")
        driver.get(parametros['url_base'])
        time.sleep(5)
        
        # Simular navega√ß√£o at√© Tela 6 (pular telas 1-5)
        print("‚è≠Ô∏è Simulando navega√ß√£o at√© Tela 6...")
        
        # Aguardar elementos da Tela 6
        print("‚è≥ Aguardando elementos da Tela 6...")
        
        try:
            # Teste 1: Aguardar elemento com texto "combust√≠vel"
            print("üîç Teste 1: Procurando texto 'combust√≠vel'...")
            elemento = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'combust√≠vel')]"))
            )
            print("‚úÖ Elemento 'combust√≠vel' encontrado!")
            
        except Exception as e:
            print(f"‚ùå Teste 1 falhou: {e}")
            
            # Teste 2: Verificar HTML da p√°gina
            print("üîç Teste 2: Verificando HTML da p√°gina...")
            html = driver.page_source
            if "combust√≠vel" in html.lower():
                print("‚úÖ Texto 'combust√≠vel' encontrado no HTML")
            else:
                print("‚ùå Texto 'combust√≠vel' N√ÉO encontrado no HTML")
            
            # Teste 3: Listar todos os textos vis√≠veis
            print("üîç Teste 3: Listando textos vis√≠veis...")
            elementos = driver.find_elements(By.XPATH, "//*[text()]")
            textos = [elem.text.strip() for elem in elementos if elem.text.strip()]
            print(f"üìù Textos encontrados ({len(textos)}):")
            for i, texto in enumerate(textos[:10]):  # Primeiros 10
                print(f"   {i+1}: {texto}")
            if len(textos) > 10:
                print(f"   ... e mais {len(textos) - 10} textos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral na Tela 6: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE ESPEC√çFICO DA TELA 6")
    print("=" * 50)
    
    # Configurar driver
    driver = configurar_driver()
    if not driver:
        return
    
    try:
        # Carregar par√¢metros
        parametros = carregar_parametros()
        if not parametros:
            return
        
        # Testar Tela 6
        sucesso = testar_tela6(driver, parametros)
        
        if sucesso:
            print("\n‚úÖ Teste da Tela 6 conclu√≠do!")
        else:
            print("\n‚ùå Teste da Tela 6 falhou!")
            
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        
    finally:
        if driver:
            driver.quit()
            print("‚úÖ Driver fechado")

if __name__ == "__main__":
    main()
