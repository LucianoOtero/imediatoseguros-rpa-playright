#!/usr/bin/env python3
"""
Teste espec√≠fico para detectar elementos da Tela 7
"""

import time
import json
import os
import tempfile
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def configurar_driver():
    """Configura o driver do Chrome"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    try:
        chromedriver_path = os.path.join(os.getcwd(), "chromedriver", "chromedriver-win64", "chromedriver.exe")
        
        if os.path.exists(chromedriver_path):
            print("‚úÖ Usando ChromeDriver local...")
            service = Service(chromedriver_path)
        else:
            print("‚ùå ChromeDriver local n√£o encontrado")
            return None, None
        
        print(" Criando driver do Chrome...")
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("‚úÖ Driver configurado com sucesso")
        return driver, temp_dir
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar driver: {e}")
        return None, None

def aguardar_estabilizacao(driver, segundos=15):
    """Aguarda a estabiliza√ß√£o da p√°gina"""
    print(f"‚è≥ Aguardando estabiliza√ß√£o da p√°gina ({segundos}s)...")
    time.sleep(segundos)

def clicar_com_delay_extremo(driver, by, value, descricao="elemento", timeout=30):
    """Clica em um elemento com delay extremo"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        aguardar_estabilizacao(driver, 15)
        
        try:
            elemento = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((by, value))
            )
        except:
            print(f"‚ö†Ô∏è {descricao} n√£o est√° mais clic√°vel, tentando JavaScript...")
            if by == By.XPATH:
                driver.execute_script(f"document.evaluate('{value}', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click();")
            else:
                driver.execute_script(f"document.querySelector('{by}={value}').click();")
            print(f"‚úÖ {descricao} clicado via JavaScript")
            return True
        
        driver.execute_script("arguments[0].scrollIntoView(true);", elemento)
        time.sleep(2)
        elemento.click()
        print(f"‚úÖ {descricao} clicado com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao clicar em {descricao}: {e}")
        return False

def clicar_radio_via_javascript(driver, texto_radio, descricao="radio", timeout=30):
    """Clica em um radio button via JavaScript"""
    try:
        print(f"‚è≥ Aguardando radio {descricao} aparecer...")
        aguardar_estabilizacao(driver, 15)
        
        script = f"""
        var elementos = document.querySelectorAll('input[type="radio"], label, span, div');
        var radioEncontrado = null;
        
        for (var i = 0; i < elementos.length; i++) {{
            var elemento = elementos[i];
            if (elemento.textContent && elemento.textContent.includes('{texto_radio}')) {{
                radioEncontrado = elemento;
                break;
            }}
        }}
        
        if (radioEncontrado) {{
            if (radioEncontrado.tagName === 'LABEL') {{
                var inputId = radioEncontrado.getAttribute('for');
                if (inputId) {{
                    var input = document.getElementById(inputId);
                    if (input) {{
                        input.click();
                        return 'Radio clicado via label: ' + inputId;
                    }}
                }}
            }}
            
            radioEncontrado.click();
            return 'Radio clicado diretamente: ' + radioEncontrado.outerHTML.substring(0, 100);
        }} else {{
            return 'Radio n√£o encontrado';
        }}
        """
        
        resultado = driver.execute_script(script)
        print(f"üéØ {resultado}")
        
        if "Radio clicado" in resultado:
            print(f"‚úÖ Radio {descricao} clicado via JavaScript")
            return True
        else:
            print(f"‚ùå Radio {descricao} n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao clicar radio {descricao}: {e}")
        return False

def carregar_parametros():
    """Carrega par√¢metros do JSON"""
    try:
        with open("parametros.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Erro ao carregar par√¢metros: {e}")
        return None

def navegar_ate_tela6(driver, parametros):
    """Navega at√© a Tela 6"""
    print("\nüß≠ NAVEGANDO AT√â TELA 6...")
    
    try:
        # TELA 1: P√°gina inicial
        print("\nüì± TELA 1: Selecionando tipo de seguro...")
        driver.get(parametros['url_base'])
        time.sleep(5)
        
        # Clicar em "Carro"
        print("‚è≥ Clicando no bot√£o Carro...")
        if not clicar_com_delay_extremo(driver, By.XPATH, "//*[contains(text(), 'Carro')]", "bot√£o Carro"):
            return False
        
        time.sleep(5)
        
        # TELA 2: Inserir placa
        print("\nüì± TELA 2: Inserindo placa...")
        aguardar_estabilizacao(driver, 3)
        
        campo_placa = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        campo_placa.clear()
        campo_placa.send_keys(parametros['placa'])
        print(f"‚úÖ Placa {parametros['placa']} inserida")
        
        aguardar_estabilizacao(driver, 3)
        
        # TELA 3: Confirmar ve√≠culo
        print("\nüì± TELA 3: Confirmando ve√≠culo...")
        aguardar_estabilizacao(driver, 5)
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//*[contains(text(), 'Continuar')]", "bot√£o Continuar"):
            return False
        
        time.sleep(15)
        aguardar_estabilizacao(driver, 10)
        
        # TELA 4: Ve√≠culo j√° segurado
        print("\nüì± TELA 4: Ve√≠culo j√° segurado...")
        aguardar_estabilizacao(driver, 5)
        
        try:
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'segurado') or contains(text(), 'Segurado')]"))
            )
            print("‚úÖ Tela 4 carregada!")
        except:
            print("‚ùå Tela 4 n√£o carregou")
            return False
        
        if not clicar_radio_via_javascript(driver, "N√£o", "N√£o para ve√≠culo segurado"):
            return False
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//*[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 4"):
            return False
        
        time.sleep(15)
        aguardar_estabilizacao(driver, 10)
        
        # TELA 5: Estimativa inicial
        print("\nüì± TELA 5: Estimativa inicial...")
        aguardar_estabilizacao(driver, 5)
        
        try:
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Continuar') or contains(text(), 'Pr√≥ximo')]"))
            )
            print("‚úÖ Tela 5 carregada!")
        except:
            print("‚ùå Tela 5 n√£o carregou")
            return False
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//*[contains(text(), 'Continuar')]", "bot√£o Continuar"):
            return False
        
        time.sleep(15)
        aguardar_estabilizacao(driver, 10)
        
        # TELA 6: Cobertura/Estimativa
        print("\nüì± TELA 6: Cobertura/Estimativa...")
        aguardar_estabilizacao(driver, 5)
        
        try:
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'estimativa') or contains(text(), 'cobertura') or contains(text(), 'Compreensiva') or contains(text(), 'R$')]"))
            )
            print("‚úÖ Tela 6 carregada!")
        except:
            print("‚ùå Tela 6 n√£o carregou")
            return False
        
        # Selecionar cobertura
        if not clicar_radio_via_javascript(driver, "Compreensiva", "Cobertura Compreensiva"):
            print("‚ö†Ô∏è Cobertura n√£o selecionada - prosseguindo...")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//*[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 6"):
            return False
        
        time.sleep(15)
        aguardar_estabilizacao(driver, 10)
        
        print("‚úÖ **NAVEGA√á√ÉO AT√â TELA 6 CONCLU√çDA!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na navega√ß√£o: {e}")
        return False

def analisar_tela7(driver):
    """Analisa o que est√° sendo exibido na Tela 7"""
    print("\nüîç ANALISANDO TELA 7...")
    print("=" * 60)
    
    try:
        # Aguardar estabiliza√ß√£o
        aguardar_estabilizacao(driver, 5)
        
        # Verificar URL atual
        print(f"üìç URL atual: {driver.current_url}")
        
        # Verificar t√≠tulo da p√°gina
        try:
            titulo = driver.title
            print(f"üìÑ T√≠tulo da p√°gina: {titulo}")
        except:
            print("‚ùå N√£o foi poss√≠vel obter o t√≠tulo")
        
        # Verificar HTML da p√°gina
        print("\nüîç ANALISANDO HTML DA P√ÅGINA...")
        html = driver.page_source
        
        # Procurar por palavras-chave espec√≠ficas
        palavras_chave = [
            "email", "Email", "celular", "Celular", "contato", "Contato",
            "dados", "Dados", "informa√ß√µes", "Informa√ß√µes", "pessoal", "Pessoal",
            "nome", "Nome", "CPF", "cpf", "data", "Data", "nascimento", "Nascimento"
        ]
        
        print("\nüéØ PALAVRAS-CHAVE ENCONTRADAS:")
        for palavra in palavras_chave:
            if palavra.lower() in html.lower():
                print(f"   ‚úÖ '{palavra}' encontrado no HTML")
            else:
                print(f"   ‚ùå '{palavra}' N√ÉO encontrado no HTML")
        
        # Listar todos os textos vis√≠veis
        print("\nüìù TEXTOS VIS√çVEIS NA P√ÅGINA:")
        elementos = driver.find_elements(By.XPATH, "//*[text()]")
        textos = [elem.text.strip() for elem in elementos if elem.text.strip()]
        
        print(f"üìä Total de textos encontrados: {len(textos)}")
        
        # Mostrar primeiros 20 textos
        for i, texto in enumerate(textos[:20]):
            print(f"   {i+1:2d}: {texto}")
        
        if len(textos) > 20:
            print(f"   ... e mais {len(textos) - 20} textos")
        
        # Procurar por bot√µes
        print("\nüîò BOT√ïES ENCONTRADOS:")
        botoes = driver.find_elements(By.XPATH, "//button | //input[@type='button'] | //a[contains(@class, 'btn')]")
        for i, botao in enumerate(botoes[:10]):
            texto = botao.text.strip() if botao.text else "Sem texto"
            classe = botao.get_attribute("class") or "Sem classe"
            print(f"   {i+1}: '{texto}' (classe: {classe})")
        
        # Procurar por inputs
        print("\nüìù INPUTS ENCONTRADOS:")
        inputs = driver.find_elements(By.XPATH, "//input")
        for i, inp in enumerate(inputs[:10]):
            tipo = inp.get_attribute("type") or "Sem tipo"
            placeholder = inp.get_attribute("placeholder") or "Sem placeholder"
            id_attr = inp.get_attribute("id") or "Sem ID"
            print(f"   {i+1}: tipo='{tipo}', placeholder='{placeholder}', id='{id_attr}'")
        
        # Salvar HTML para an√°lise
        with open("tela7_analise.html", "w", encoding="utf-8") as f:
            f.write(html)
        print(f"\nüíæ HTML salvo em: tela7_analise.html")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao analisar Tela 7: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîç TESTE DE DETEC√á√ÉO DA TELA 7")
    print("=" * 60)
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar driver
        driver, temp_dir = configurar_driver()
        if not driver:
            return
        
        # Carregar par√¢metros
        parametros = carregar_parametros()
        if not parametros:
            return
        
        # Navegar at√© Tela 6
        if not navegar_ate_tela6(driver, parametros):
            print("‚ùå Falha ao navegar at√© Tela 6")
            return
        
        # Analisar Tela 7
        if not analisar_tela7(driver):
            print("‚ùå Falha ao analisar Tela 7")
            return
        
        print("\n‚úÖ **AN√ÅLISE DA TELA 7 CONCLU√çDA!**")
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        
    finally:
        if driver:
            driver.quit()
        
        if temp_dir and os.path.exists(temp_dir):
            try:
                import shutil
                shutil.rmtree(temp_dir)
            except:
                pass

if __name__ == "__main__":
    main()
