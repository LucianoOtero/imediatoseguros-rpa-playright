#!/usr/bin/env python3
"""
Teste corrigido da Tela 4 (Ve√≠culo j√° segurado)
"""

import time
import json
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def configurar_driver():
    """Configura o driver do Chrome"""
    print("üîß Configurando Chrome...")
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    try:
        chromedriver_path = os.path.join(os.getcwd(), "chromedriver", "chromedriver-win64", "chromedriver.exe")
        
        if os.path.exists(chromedriver_path):
            print("‚úÖ Usando ChromeDriver local...")
            service = Service(chromedriver_path)
        else:
            print("‚ùå ChromeDriver local n√£o encontrado")
            return None
        
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("‚úÖ Driver configurado com sucesso")
        return driver
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar driver: {e}")
        return None

def carregar_parametros():
    """Carrega par√¢metros do JSON"""
    try:
        with open("parametros.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Erro ao carregar par√¢metros: {e}")
        return None

def navegar_ate_tela4(driver, parametros):
    """Navega at√© a Tela 4"""
    print("\nüß≠ NAVEGANDO AT√â TELA 4")
    print("=" * 50)
    
    try:
        # TELA 1: P√°gina inicial
        print("\nüì± TELA 1: P√°gina inicial...")
        driver.get(parametros['url_base'])
        time.sleep(5)
        
        # Clicar em "Carro"
        print("‚è≥ Clicando em 'Carro'...")
        botao_carro = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Carro')]"))
        )
        botao_carro.click()
        print("‚úÖ Bot√£o Carro clicado")
        time.sleep(5)
        
        # TELA 2: Inserir placa
        print("\nüì± TELA 2: Inserindo placa...")
        campo_placa = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        campo_placa.clear()
        campo_placa.send_keys(parametros['placa'])
        print(f"‚úÖ Placa {parametros['placa']} inserida")
        time.sleep(3)
        
        # TELA 3: Confirmar ve√≠culo
        print("\nüì± TELA 3: Confirmando ve√≠culo...")
        time.sleep(5)
        
        botao_continuar = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Continuar')]"))
        )
        botao_continuar.click()
        print("‚úÖ Bot√£o Continuar clicado na Tela 3")
        time.sleep(10)
        
        print("‚úÖ Chegamos na Tela 4!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao navegar at√© Tela 4: {e}")
        return False

def corrigir_tela4(driver):
    """Corrige especificamente a Tela 4"""
    print("\nüîß CORRIGINDO TELA 4")
    print("=" * 50)
    
    try:
        # Aguardar carregamento
        print("‚è≥ Aguardando carregamento da Tela 4...")
        time.sleep(5)
        
        # ESTRAT√âGIA 1: Tentar encontrar radio "N√£o" via JavaScript
        print("üîç Estrat√©gia 1: Procurando radio 'N√£o' via JavaScript...")
        
        script_radio = """
        var radios = document.querySelectorAll('input[type="radio"]');
        var radioNao = null;
        
        for (var i = 0; i < radios.length; i++) {
            var radio = radios[i];
            var label = document.querySelector('label[for="' + radio.id + '"]');
            
            if (label && label.textContent.includes('N√£o')) {
                radioNao = radio;
                break;
            }
            
            if (radio.value && radio.value.includes('N√£o')) {
                radioNao = radio;
                break;
            }
        }
        
        if (radioNao) {
            radioNao.checked = true;
            radioNao.click();
            return 'Radio N√£o encontrado e selecionado: ' + radioNao.id;
        } else {
            return 'Radio N√£o n√£o encontrado';
        }
        """
        
        resultado = driver.execute_script(script_radio)
        print(f"üéØ Resultado: {resultado}")
        
        if "Radio N√£o encontrado" in resultado:
            print("‚úÖ Radio 'N√£o' selecionado com sucesso!")
            
            # ESTRAT√âGIA 2: Procurar bot√£o Continuar
            print("üîç Estrat√©gia 2: Procurando bot√£o Continuar...")
            
            script_continuar = """
            var botoes = document.querySelectorAll('button, input[type="button"], a, div[role="button"]');
            var botaoContinuar = null;
            
            for (var i = 0; i < botoes.length; i++) {
                var botao = botoes[i];
                if (botao.textContent && botao.textContent.toLowerCase().includes('continuar')) {
                    botaoContinuar = botao;
                    break;
                }
            }
            
            if (botaoContinuar) {
                botaoContinuar.click();
                return 'Bot√£o Continuar encontrado e clicado: ' + botaoContinuar.textContent;
            } else {
                return 'Bot√£o Continuar n√£o encontrado';
            }
            """
            
            resultado_continuar = driver.execute_script(script_continuar)
            print(f"üéØ Resultado Continuar: {resultado_continuar}")
            
            if "Bot√£o Continuar encontrado" in resultado_continuar:
                print("‚úÖ Bot√£o Continuar clicado com sucesso!")
                
                # Aguardar carregamento da pr√≥xima p√°gina
                print("‚è≥ Aguardando carregamento da pr√≥xima p√°gina...")
                time.sleep(10)
                
                # Verificar se chegamos na Tela 5
                html = driver.page_source
                if "estimativa" in html.lower() or "pr√≥ximo" in html.lower():
                    print("‚úÖ TELA 5 ALCAN√áADA! Texto 'estimativa' ou 'pr√≥ximo' encontrado!")
                    return True
                else:
                    print("‚ùå TELA 5 N√ÉO ALCAN√áADA!")
                    print("üìù √öltimos textos encontrados:")
                    elementos = driver.find_elements(By.XPATH, "//*[text()]")
                    textos = [elem.text.strip() for elem in elementos if elem.text.strip()]
                    for i, texto in enumerate(textos[-10:]):
                        print(f"   {i+1}: {texto}")
                    return False
            else:
                print("‚ùå Bot√£o Continuar n√£o encontrado")
                return False
        else:
            print("‚ùå Radio 'N√£o' n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao corrigir Tela 4: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß TESTE DE CORRE√á√ÉO DA TELA 4")
    print("=" * 50)
    
    # Configurar driver
    driver = configurar_driver()
    if not driver:
        return
    
    try:
        # Carregar par√¢metros
        parametros = carregar_parametros()
        if not parametros:
            return
        
        # Navegar at√© Tela 4
        if navegar_ate_tela4(driver, parametros):
            # Corrigir Tela 4
            sucesso = corrigir_tela4(driver)
            
            if sucesso:
                print("\nüéâ TELA 4 CORRIGIDA E TELA 5 ALCAN√áADA!")
            else:
                print("\n‚ùå TELA 4 N√ÉO FOI CORRIGIDA!")
        else:
            print("\n‚ùå N√ÉO FOI POSS√çVEL CHEGAR NA TELA 4!")
            
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        
    finally:
        if driver:
            driver.quit()
            print("‚úÖ Driver fechado")

if __name__ == "__main__":
    main()
