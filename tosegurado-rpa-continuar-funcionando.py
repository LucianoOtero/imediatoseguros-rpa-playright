#!/usr/bin/env python3
"""
RPA T√¥ Segurado - CONTINUANDO COM O QUE FUNCIONAVA
Usando o script que estava funcionando perfeitamente at√© Tela 11
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def aguardar_carregamento_pagina(driver, timeout=30):
    """Aguarda o carregamento completo da p√°gina"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def salvar_estado_tela(driver, tela_num, acao, temp_dir):
    """Salva o estado atual da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    tela_dir = f"temp/tela_{tela_num:02d}"
    os.makedirs(tela_dir, exist_ok=True)
    
    html_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(driver.page_source)
    
    screenshot_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.png"
    driver.save_screenshot(screenshot_file)
    
    info_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"TELA {tela_num:02d}: {acao}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"Arquivos salvos em: {os.path.abspath(tela_dir)}\n")
    
    print(f"==================================================================================")
    print(f"Ô∏è  **TELA {tela_num:02d}: {acao}** - {timestamp}")
    print(f"==================================================================================")
    print(f"üåê URL: {driver.current_url}")
    print(f"üìÑ T√≠tulo: {driver.title}")
    print(f" A√ß√£o: {acao}")
    print(f" Arquivos salvos em: {os.path.abspath(tela_dir)}")
    
    return tela_dir

def navegar_ate_tela11(driver):
    """Navega o RPA at√© a Tela 11 (Uso do Ve√≠culo) - M√âTODO QUE FUNCIONAVA"""
    print("üöÄ **NAVEGANDO AT√â TELA 11 (USO DO VE√çCULO) - M√âTODO FUNCIONANDO**")
    
    # TELA 1: Sele√ß√£o do tipo de seguro
    print("\nüì± TELA 1: Selecionando Carro...")
    driver.get("https://www.app.tosegurado.com.br/cotacao")
    
    if not aguardar_carregamento_pagina(driver):
        print("‚ùå Erro: P√°gina n√£o carregou")
        return False
    
    salvar_estado_tela(driver, 1, "inicial", None)
    
    # Clicar no bot√£o Carro - M√âTODO ORIGINAL QUE FUNCIONAVA
    try:
        carro_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
        )
        salvar_estado_tela(driver, 1, "antes_clique", None)
        carro_btn.click()
        print("‚úÖ Carro selecionado")
        
        if not aguardar_carregamento_pagina(driver):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s selecionar Carro")
            return False
        
        salvar_estado_tela(driver, 1, "apos_clique", None)
    except Exception as e:
        print(f"‚ùå Erro ao selecionar Carro: {e}")
        return False
    
    # TELA 2: Inser√ß√£o da placa
    print("\nüì± TELA 2: Inserindo placa...")
    try:
        placa_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        salvar_estado_tela(driver, 2, "inicial", None)
        
        placa_input.clear()
        placa_input.send_keys("EED3D56")
        print("‚úÖ Placa EED3D56 inserida")
        
        salvar_estado_tela(driver, 2, "placa_inserida", None)
    except Exception as e:
        print(f"‚ùå Erro ao inserir placa: {e}")
        return False
    
    # TELA 3: Clicar em Continuar
    print("\nüì± TELA 3: Clicando Continuar...")
    try:
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar"))
        )
        continuar_btn.click()
        print("‚úÖ Continuar clicado")
        
        if not aguardar_carregamento_pagina(driver):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s clicar Continuar")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao clicar Continuar: {e}")
        return False
    
    # TELA 5: Confirma√ß√£o do ve√≠culo
    print("\nüì± TELA 5: Confirmando ve√≠culo...")
    try:
        sim_radio = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "confirmacaoVeiculo"))
        )
        driver.execute_script("arguments[0].click();", sim_radio)
        
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_btn.click()
        print("‚úÖ Ve√≠culo confirmado")
        
        if not aguardar_carregamento_pagina(driver):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s confirmar ve√≠culo")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao confirmar ve√≠culo: {e}")
        return False
    
    # TELA 6: Pergunta se ve√≠culo j√° est√° segurado
    print("\nüì± TELA 6: Selecionando 'N√£o' para ve√≠culo segurado...")
    try:
        nao_radio = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "jaSegurado"))
        )
        driver.execute_script("arguments[0].click();", nao_radio)
        
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_btn.click()
        print("‚úÖ Radio 'N√£o' selecionado")
        print("‚úÖ Continuar clicado na Tela 6")
        
        if not aguardar_carregamento_pagina(driver):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s Tela 6")
            return False
    except Exception as e:
        print(f"‚ùå Erro na Tela 6: {e}")
        return False
    
    # TELA 7: Confirma√ß√£o que ve√≠culo n√£o est√° segurado
    print("\n TELA 7: Aguardando confirma√ß√£o...")
    try:
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_btn.click()
        print("‚úÖ Continuar clicado na Tela 7")
        
        if not aguardar_carregamento_pagina(driver):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s Tela 7")
            return False
    except Exception as e:
        print(f"‚ùå Erro na Tela 7: {e}")
        return False
    
    # TELA 8: Estimativa inicial
    print("\n TELA 8: Aguardando estimativa inicial...")
    try:
        # Aguardar elementos da estimativa
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'estimativa') or contains(text(), 'inicial')]"))
        )
        print("‚úÖ Tela 8 carregada - estimativa inicial detectada!")
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        # Clicar em Continuar
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_btn.click()
        print("‚úÖ Continuar clicado na Tela 8")
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s Tela 8")
            return False
    except Exception as e:
        print(f"‚ùå Erro na Tela 8: {e}")
        return False
    
    # TELA 9: Tipo de combust√≠vel
    print("\n TELA 9: Aguardando tipo de combust√≠vel...")
    try:
        # Aguardar elementos do tipo de combust√≠vel
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'combust√≠vel') or contains(text(), 'Combust√≠vel')]"))
        )
        print("‚úÖ Tela 9 carregada - tipo de combust√≠vel detectado!")
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        # Clicar em Continuar
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_btn.click()
        print("‚úÖ Continuar clicado na Tela 9")
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s Tela 9")
            return False
    except Exception as e:
        print(f"‚ùå Erro na Tela 9: {e}")
        return False
    
    # TELA 10: Endere√ßo de pernoite
    print("\n TELA 10: Aguardando endere√ßo de pernoite...")
    try:
        # Aguardar elementos do endere√ßo
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'endere√ßo') or contains(text(), 'Endere√ßo') or contains(text(), 'CEP')]"))
        )
        print("‚úÖ Tela 10 carregada - endere√ßo de pernoite detectado!")
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        # Inserir CEP
        cep_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "enderecoTelaEndereco"))
        )
        cep_input.clear()
        cep_input.send_keys("03084-000")
        print("‚úÖ CEP 03084-000 inserido")
        
        # Aguardar sugest√£o e selecionar
        time.sleep(2)
        sugestao = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Rua Santa')]"))
        )
        sugestao.click()
        print("‚úÖ Sugest√£o selecionada")
        
        # Clicar em Continuar
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_btn.click()
        print("‚úÖ Continuar clicado na Tela 10")
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s Tela 10")
            return False
    except Exception as e:
        print(f"‚ùå Erro na Tela 10: {e}")
        return False
    
    # TELA 11: Uso do ve√≠culo
    print("\n TELA 11: Aguardando uso do ve√≠culo...")
    try:
        # Aguardar elementos do uso do ve√≠culo
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'uso') or contains(text(), 'Uso') or contains(text(), 've√≠culo')]"))
        )
        print("‚úÖ Tela 11 carregada - uso do ve√≠culo detectado!")
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        # Clicar em Continuar (assumindo que Pessoal √© padr√£o)
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_btn.click()
        print("‚úÖ Continuar clicado na Tela 11")
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s Tela 11")
            return False
        
        print("‚úÖ TELA 11 CARREGADA E CONTINUAR CLICADO!")
    except Exception as e:
        print(f"‚ùå Erro na Tela 11: {e}")
        return False
    
    return True

def implementar_tela12(driver):
    """Implementa a Tela 12 (Dados Pessoais)"""
    print("\n **INICIANDO TELA 12: Dados pessoais**")
    
    # Aguardar Tela 12 carregar
    print("‚è≥ Aguardando Tela 12 carregar...")
    
    try:
        # Aguardar elementos dos dados pessoais
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Nome') or contains(text(), 'CPF') or contains(text(), 'nascimento')]"))
        )
        print("‚úÖ Tela 12 carregada - dados pessoais detectados!")
        
        salvar_estado_tela(driver, 12, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 12, "dados_pessoais_carregados", None)
        
        # Preencher Nome Completo
        print("‚è≥ Preenchendo Nome Completo...")
        try:
            nome_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Nome') or contains(@placeholder, 'nome')]"))
            )
            nome_input.clear()
            nome_input.send_keys("LUCIANO OTERO")
            print("‚úÖ Nome Completo preenchido")
        except:
            print("‚ö†Ô∏è Campo Nome n√£o encontrado - tentando prosseguir...")
        
        # Preencher CPF
        print("‚è≥ Preenchendo CPF...")
        try:
            cpf_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'CPF') or contains(@placeholder, 'cpf')]"))
            )
            cpf_input.clear()
            cpf_input.send_keys("085.546.078-48")
            print("‚úÖ CPF preenchido")
        except:
            print("‚ö†Ô∏è Campo CPF n√£o encontrado - tentando prosseguir...")
        
        # Preencher Data de Nascimento
        print("‚è≥ Preenchendo Data de Nascimento...")
        try:
            data_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Data') or contains(@placeholder, 'nascimento') or contains(@placeholder, 'Nascimento')]"))
            )
            data_input.clear()
            data_input.send_keys("09/02/1965")
            print("‚úÖ Data de Nascimento preenchida")
        except:
            print("‚ö†Ô∏è Campo Data n√£o encontrado - tentando prosseguir...")
        
        # Selecionar Sexo
        print("‚è≥ Selecionando Sexo...")
        try:
            masculino_radio = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'masculino') or contains(text(), 'Masculino')]"))
            )
            driver.execute_script("arguments[0].click();", masculino_radio)
            print("‚úÖ Sexo masculino selecionado")
        except:
            print("‚ö†Ô∏è Radio masculino n√£o encontrado - tentando prosseguir...")
        
        # Selecionar Estado Civil
        print("‚è≥ Selecionando Estado Civil...")
        try:
            casado_radio = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'casado') or contains(text(), 'Casado')]"))
            )
            driver.execute_script("arguments[0].click();", casado_radio)
            print("‚úÖ Estado civil casado selecionado")
        except:
            print("‚ö†Ô∏è Radio casado n√£o encontrado - tentando prosseguir...")
        
        # Preencher E-mail
        print("‚è≥ Preenchendo E-mail...")
        try:
            email_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'E-mail') or contains(@placeholder, 'email') or contains(@type, 'email')]"))
            )
            email_input.clear()
            email_input.send_keys("lrotero@gmail.com")
            print("‚úÖ E-mail preenchido")
        except:
            print("‚ö†Ô∏è Campo E-mail n√£o encontrado - tentando prosseguir...")
        
        # Preencher Celular
        print("‚è≥ Preenchendo Celular...")
        try:
            celular_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Celular') or contains(@placeholder, 'celular') or contains(@placeholder, 'Telefone')]"))
            )
            celular_input.clear()
            celular_input.send_keys("(11) 97668-7668")
            print("‚úÖ Celular preenchido")
        except:
            print("‚ö†Ô∏è Campo Celular n√£o encontrado - tentando prosseguir...")
        
        salvar_estado_tela(driver, 12, "configuracao_completa", None)
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        try:
            continuar_btn = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
            )
            print("‚úÖ Bot√£o Continuar encontrado")
            
            salvar_estado_tela(driver, 12, "antes_continuar", None)
            continuar_btn.click()
            print("‚úÖ Continuar clicado na Tela 12")
            
            if not aguardar_carregamento_pagina(driver, 30):
                print("‚ùå Erro: P√°gina n√£o carregou ap√≥s Tela 12")
                return False
            
            salvar_estado_tela(driver, 12, "apos_continuar", None)
            print("‚úÖ **TELA 12 IMPLEMENTADA COM SUCESSO!**")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao clicar Continuar: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na Tela 12: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ **RPA T√î SEGURADO - CONTINUANDO COM O QUE FUNCIONAVA**")
    print("=" * 80)
    print("üéØ OBJETIVO: Implementar Tela 12 (Dados Pessoais)")
    print("üîß M√âTODO: Usando o script que funcionava perfeitamente at√© Tela 11")
    print("üìù NOTA: Continua√ß√£o do fluxo a partir da Tela 11 (Uso do Ve√≠culo)")
    print("=" * 80)
    
    inicio = datetime.now()
    print(f"‚è∞ In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 11 usando o m√©todo que funcionava
        if not navegar_ate_tela11(driver):
            print("‚ùå Erro: Falha ao navegar at√© Tela 11")
            return
        
        # Implementar Tela 12
        if implementar_tela12(driver):
            print("\n" + "=" * 80)
            print("üéâ **RPA EXECUTADO COM SUCESSO! TELA 12 IMPLEMENTADA!**")
            print("=" * 80)
            print(f"‚úÖ Total de telas executadas: 12")
            print(f"‚úÖ Tela 12: Dados pessoais implementada")
            print(f"üìÅ Todos os arquivos salvos em: /opt/imediatoseguros-rpa/temp/")
        else:
            print("‚ùå Erro: Falha ao implementar Tela 12")
    
    except Exception as e:
        print(f"‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
    
    finally:
        # Limpeza
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")
        
        fim = datetime.now()
        print(f"‚è∞ Fim: {fim.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
