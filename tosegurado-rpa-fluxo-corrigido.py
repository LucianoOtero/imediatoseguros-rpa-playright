#!/usr/bin/env python3
"""
RPA T√¥ Segurado - FLUXO CORRIGIDO
Implementa o fluxo correto conforme especifica√ß√£o do usu√°rio
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def aguardar_carregamento_pagina(driver, timeout=60):
    """Aguarda o carregamento completo da p√°gina"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def aguardar_estabilizacao(driver, segundos=15):
    """Aguarda a estabiliza√ß√£o da p√°gina"""
    print(f"‚è≥ Aguardando estabiliza√ß√£o da p√°gina ({segundos}s)...")
    time.sleep(segundos)

def clicar_com_delay_extremo(driver, by, value, descricao="elemento", timeout=30):
    """Clica em um elemento com delay extremo"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        aguardar_estabilizacao(driver, 15)
        
        try:
            elemento = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((by, value))
            )
        except:
            print(f"‚ö†Ô∏è {descricao} n√£o est√° mais clic√°vel, tentando JavaScript...")
            if by == By.XPATH:
                driver.execute_script(f"document.evaluate('{value}', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click();")
            else:
                driver.execute_script(f"document.querySelector('{by}={value}').click();")
            print(f"‚úÖ {descricao} clicado via JavaScript")
            return True
        
        driver.execute_script("arguments[0].scrollIntoView(true);", elemento)
        time.sleep(2)
        elemento.click()
        print(f"‚úÖ {descricao} clicado com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao clicar em {descricao}: {e}")
        return False

def preencher_com_delay_extremo(driver, by, value, texto, descricao="campo", timeout=30):
    """Preenche um campo com delay extremo"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        aguardar_estabilizacao(driver, 10)
        
        try:
            elemento = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((by, value))
            )
        except:
            print(f"‚ö†Ô∏è {descricao} n√£o est√° mais presente, tentando JavaScript...")
            if by == By.ID:
                driver.execute_script(f"document.getElementById('{value}').value = '{texto}';")
            else:
                driver.execute_script(f"document.querySelector('{by}={value}').value = '{texto}';")
            print(f"‚úÖ {descricao} preenchido via JavaScript")
            return True
        
        elemento.clear()
        time.sleep(1)
        elemento.send_keys(texto)
        print(f"‚úÖ {descricao} preenchido: {texto}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao preencher {descricao}: {e}")
        return False

def clicar_radio_via_javascript(driver, texto_radio, descricao="radio", timeout=30):
    """Clica em um radio button via JavaScript"""
    try:
        print(f"‚è≥ Aguardando radio {descricao} aparecer...")
        aguardar_estabilizacao(driver, 15)
        
        script = f"""
        var elementos = document.querySelectorAll('input[type="radio"], label, span, div');
        var radioEncontrado = null;
        
        for (var i = 0; i < elementos.length; i++) {{
            var elemento = elementos[i];
            if (elemento.textContent && elemento.textContent.includes('{texto_radio}')) {{
                radioEncontrado = elemento;
                break;
            }}
        }}
        
        if (radioEncontrado) {{
            if (radioEncontrado.tagName === 'LABEL') {{
                var inputId = radioEncontrado.getAttribute('for');
                if (inputId) {{
                    var input = document.getElementById(inputId);
                    if (input) {{
                        input.click();
                        return 'Radio clicado via label: ' + inputId;
                    }}
                }}
            }}
            
            radioEncontrado.click();
            return 'Radio clicado diretamente: ' + radioEncontrado.outerHTML.substring(0, 100);
        }} else {{
            return 'Radio n√£o encontrado';
        }}
        """
        
        resultado = driver.execute_script(script)
        print(f"üéØ {resultado}")
        
        if "Radio clicado" in resultado:
            print(f"‚úÖ Radio {descricao} clicado via JavaScript")
            return True
        else:
            print(f"‚ùå Radio {descricao} n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao clicar radio {descricao}: {e}")
        return False

def salvar_estado_tela(driver, tela_num, acao, temp_dir):
    """Salva o estado atual da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    tela_dir = f"temp/tela_{tela_num:02d}"
    os.makedirs(tela_dir, exist_ok=True)
    
    html_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(driver.page_source)
    
    screenshot_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.png"
    driver.save_screenshot(screenshot_file)
    
    info_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"TELA {tela_num:02d}: {acao}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"Arquivos salvos em: {os.path.abspath(tela_dir)}\n")
    
    print(f"==================================================================================")
    print(f"üì± **TELA {tela_num:02d}: {acao}** - {timestamp}")
    print(f"==================================================================================")
    print(f"üåê URL: {driver.current_url}")
    print(f"üìÑ T√≠tulo: {driver.title}")
    print(f"ÔøΩÔøΩ A√ß√£o: {acao}")
    print(f"ÔøΩÔøΩ Arquivos salvos em: {os.path.abspath(tela_dir)}")
    
    return tela_dir

def navegar_ate_tela3(driver):
    """Navega o RPA at√© a Tela 3 com fluxo correto"""
    print("üöÄ **NAVEGANDO AT√â TELA 3 COM FLUXO CORRETO**")
    
    # TELA 1: Sele√ß√£o do tipo de seguro
    print("\nüì± TELA 1: Selecionando Carro...")
    driver.get("https://www.app.tosegurado.com.br/cotacao")
    
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ùå Erro: P√°gina n√£o carregou")
        return False
    
    salvar_estado_tela(driver, 1, "inicial", None)
    aguardar_estabilizacao(driver, 20)
    
    salvar_estado_tela(driver, 1, "antes_clique", None)
    
    if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Carro')]", "bot√£o Carro"):
        print("‚ùå Erro: Falha ao clicar no bot√£o Carro")
        return False
    
    print("‚è≥ Aguardando carregamento completo da p√°gina...")
    time.sleep(10)
    
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ùå Erro: P√°gina n√£o carregou ap√≥s selecionar Carro")
        return False
    
    aguardar_estabilizacao(driver, 20)
    salvar_estado_tela(driver, 1, "apos_clique", None)
    
    # TELA 2: Inser√ß√£o da placa CORRETA
    print("\nüì± TELA 2: Inserindo placa KVA-1791...")
    aguardar_estabilizacao(driver, 15)
    salvar_estado_tela(driver, 2, "inicial", None)
    
    # PLACA CORRETA: KVA-1791
    if not preencher_com_delay_extremo(driver, By.ID, "placaTelaDadosPlaca", "KVA-1791", "placa"):
        print("‚ùå Erro: Falha ao preencher placa")
        return False
    
    aguardar_estabilizacao(driver, 15)
    salvar_estado_tela(driver, 2, "placa_inserida", None)
    
    # TELA 3: Clicar em Continuar
    print("\nüì± TELA 3: Clicando Continuar...")
    
    if not clicar_com_delay_extremo(driver, By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar", "bot√£o Continuar Tela 3"):
        print("‚ùå Erro: Falha ao clicar Continuar na Tela 3")
        return False
    
    print("‚è≥ Aguardando carregamento da p√°gina...")
    time.sleep(15)
    
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
    
    aguardar_estabilizacao(driver, 20)
    salvar_estado_tela(driver, 3, "apos_clique", None)
    
    print("‚úÖ **NAVEGA√á√ÉO AT√â TELA 3 CONCLU√çDA COM SUCESSO!**")
    return True

def implementar_tela3_corrigida(driver):
    """Implementa a Tela 3 CORRETA: Confirma√ß√£o do ve√≠culo ECOSPORT"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 3 CORRIGIDA: Confirma√ß√£o do ve√≠culo ECOSPORT**")
    
    try:
        # Aguardar elementos da confirma√ß√£o do ECOSPORT
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'ECOSPORT')]"))
        )
        print("‚úÖ Tela 3 carregada - confirma√ß√£o do ECOSPORT detectada!")
        
        salvar_estado_tela(driver, 3, "confirmacao_ecosport", None)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 3, "confirmacao_carregada", None)
        
        # Selecionar "Sim" para confirma√ß√£o do ve√≠culo
        print("‚è≥ Selecionando 'Sim' para confirma√ß√£o do ve√≠culo...")
        
        if not clicar_radio_via_javascript(driver, "Sim", "Sim para confirma√ß√£o"):
            print("‚ö†Ô∏è Radio 'Sim' n√£o encontrado - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Continuar')]", "bot√£o Continuar Tela 3"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 3")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(15)
        
        if not aguardar_carregamento_pagina(driver, 60):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 20)
        salvar_estado_tela(driver, 3, "apos_continuar", None)
        print("‚úÖ **TELA 3 CORRIGIDA IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 3 corrigida: {e}")
        return False

def implementar_tela4_corrigida(driver):
    """Implementa a Tela 4 CORRETA: Ve√≠culo j√° est√° segurado?"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 4 CORRIGIDA: Ve√≠culo j√° est√° segurado?""")
    
    try:
        # Aguardar elementos da pergunta sobre ve√≠culo segurado
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'segurado') or contains(text(), 'Segurado')]"))
        )
        print("‚úÖ Tela 4 carregada - pergunta sobre ve√≠culo segurado detectada!")
        
        salvar_estado_tela(driver, 4, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 4, "pergunta_carregada", None)
        
        # Selecionar "N√£o" para ve√≠culo j√° segurado
        print("‚è≥ Selecionando 'N√£o' para ve√≠culo j√° segurado...")
        
        if not clicar_radio_via_javascript(driver, "N√£o", "N√£o para ve√≠culo segurado"):
            print("‚ö†Ô∏è Radio 'N√£o' n√£o encontrado - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Continuar')]", "bot√£o Continuar Tela 4"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 4")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(15)
        
        if not aguardar_carregamento_pagina(driver, 60):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 20)
        salvar_estado_tela(driver, 4, "apos_continuar", None)
        print("‚úÖ **TELA 4 CORRIGIDA IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 4 corrigida: {e}")
        return False

def implementar_tela5_corrigida(driver):
    """Implementa a Tela 5 CORRETA: Estimativa inicial (carrossel de coberturas)"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 5 CORRIGIDA: Estimativa inicial**")
    
    try:
        # Aguardar elementos da estimativa inicial
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'estimativa') or contains(text(), 'inicial') or contains(text(), 'carrossel') or contains(text(), 'cobertura')]"))
        )
        print("‚úÖ Tela 5 carregada - estimativa inicial detectada!")
        
        salvar_estado_tela(driver, 5, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 5, "estimativa_carregada", None)
        
        # CAPTURAR DADOS DA ESTIMATIVA INICIAL
        print("üìä CAPTURANDO DADOS DA ESTIMATIVA INICIAL...")
        
        # Salvar dados espec√≠ficos
        try:
            # Procurar por pre√ßos ou coberturas
            precos = driver.find_elements(By.XPATH, "//*[contains(text(), 'R$') or contains(text(), 'reais')]")
            if precos:
                print(f"ÔøΩÔøΩ Pre√ßos encontrados: {len(precos)}")
                for i, preco in enumerate(precos[:5]):  # Primeiros 5
                    print(f"   {i+1}: {preco.text}")
            
            # Procurar por nomes de seguradoras
            seguradoras = driver.find_elements(By.XPATH, "//*[contains(text(), 'Seguradora') or contains(text(), 'seguro')]")
            if seguradoras:
                print(f"ÔøΩÔøΩ Seguradoras encontradas: {len(seguradoras)}")
                for i, seguradora in enumerate(seguradoras[:5]):  # Primeiros 5
                    print(f"   {i+1}: {seguradora.text}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao capturar dados: {e}")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Continuar')]", "bot√£o Continuar Tela 5"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 5")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(15)
        
        if not aguardar_carregamento_pagina(driver, 60):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 20)
        salvar_estado_tela(driver, 5, "apos_continuar", None)
        print("‚úÖ **TELA 5 CORRIGIDA IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 5 corrigida: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ **RPA T√î SEGURADO - FLUXO CORRIGIDO**")
    print("=" * 80)
    print("üéØ OBJETIVO: Implementar fluxo CORRETO conforme especifica√ß√£o")
    print("üîß M√âTODO: Delays extremos + fluxo correto de telas")
    print("üìù NOTA: Placa KVA-1791, ve√≠culo ECOSPORT, fluxo correto")
    print("=" * 80)
    
    inicio = datetime.now()
    print(f"‚è∞ In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 3
        if not navegar_ate_tela3(driver):
            print("‚ùå Erro: Falha ao navegar at√© Tela 3")
            return
        
        # Implementar Tela 3 CORRIGIDA
        if not implementar_tela3_corrigida(driver):
            print("‚ùå Erro: Falha ao implementar Tela 3 corrigida")
            return
        
        # Implementar Tela 4 CORRIGIDA
        if not implementar_tela4_corrigida(driver):
            print("‚ùå Erro: Falha ao implementar Tela 4 corrigida")
            return
        
        # Implementar Tela 5 CORRIGIDA (Estimativa inicial)
        if not implementar_tela5_corrigida(driver):
            print("‚ùå Erro: Falha ao implementar Tela 5 corrigida")
            return
        
        print("\n" + "=" * 80)
        print("üéâ **RPA EXECUTADO COM SUCESSO! FLUXO CORRETO IMPLEMENTADO!**")
        print("=" * 80)
        print(f"‚úÖ Total de telas executadas: 5")
        print(f"‚úÖ Tela 1: Sele√ß√£o Carro")
        print(f"‚úÖ Tela 2: Inser√ß√£o placa KVA-1791")
        print(f"‚úÖ Tela 3: Confirma√ß√£o ECOSPORT ‚Üí Sim")
        print(f"‚úÖ Tela 4: Ve√≠culo segurado ‚Üí N√£o")
        print(f"‚úÖ Tela 5: Estimativa inicial (DADOS CAPTURADOS)")
        print(f"üìÅ Todos os arquivos salvos em: /opt/imediatoseguros-rpa/temp/")
        
    except Exception as e:
        print(f"‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
    
    finally:
        # Limpeza
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")
        
        fim = datetime.now()
        print(f"‚è∞ Fim: {fim.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
