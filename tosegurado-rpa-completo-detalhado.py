#!/usr/bin/env python3
"""
RPA T√¥ Segurado - COMPLETO COM LOGS DETALHADOS
Executa todo o fluxo com logs, screenshots e HTML de cada tela
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # Criar diret√≥rio tempor√°rio √∫nico
    temp_dir = tempfile.mkdtemp()
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    return driver, temp_dir

def criar_diretorio_tela(numero_tela):
    """Cria diret√≥rio para salvar arquivos da tela"""
    diretorio = f"/opt/imediatoseguros-rpa/temp/tela_{numero_tela:02d}"
    os.makedirs(diretorio, exist_ok=True)
    return diretorio

def salvar_estado_tela(driver, numero_tela, descricao, sufixo=""):
    """Salva o estado completo da tela"""
    diretorio = criar_diretorio_tela(numero_tela)
    
    # Salvar HTML
    nome_html = f"tela_{numero_tela:02d}_{descricao}{sufixo}.html"
    caminho_html = os.path.join(diretorio, nome_html)
    with open(caminho_html, "w", encoding="utf-8") as f:
        f.write(driver.page_source)
    
    # Salvar screenshot
    nome_screenshot = f"tela_{numero_tela:02d}_{descricao}{sufixo}.png"
    caminho_screenshot = os.path.join(diretorio, nome_screenshot)
    driver.save_screenshot(caminho_screenshot)
    
    # Salvar informa√ß√µes da p√°gina
    nome_info = f"tela_{numero_tela:02d}_{descricao}{sufixo}.txt"
    caminho_info = os.path.join(diretorio, nome_info)
    with open(caminho_info, "w", encoding="utf-8") as f:
        f.write(f"TELA {numero_tela:02d}: {descricao}\n")
        f.write(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"HTML salvo em: {caminho_html}\n")
        f.write(f"Screenshot salvo em: {caminho_screenshot}\n")
    
    return diretorio

def log_tela(driver, numero_tela, descricao, acao=""):
    """Registra log detalhado da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    url = driver.current_url
    titulo = driver.title
    
    print(f"\n{'='*80}")
    print(f"ÔøΩÔøΩÔ∏è  **TELA {numero_tela:02d}: {descricao}** - {timestamp}")
    print(f"{'='*80}")
    print(f"üåê URL: {url}")
    print(f"üìÑ T√≠tulo: {titulo}")
    
    if acao:
        print(f"üéØ A√ß√£o: {acao}")
    
    # Salvar estado da tela
    diretorio = salvar_estado_tela(driver, numero_tela, descricao)
    print(f"ÔøΩÔøΩ Arquivos salvos em: {diretorio}")
    
    return diretorio

def tela1_selecionar_carro(driver):
    """Tela 1: Selecionar tipo de seguro (Carro)"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 1: Sele√ß√£o do tipo de seguro**")
    
    # Navegar para a p√°gina
    driver.get("https://www.app.tosegurado.com.br/cotacao")
    time.sleep(5)
    
    # Salvar estado inicial
    log_tela(driver, 1, "inicial", "P√°gina carregada")
    
    # Procurar e clicar no bot√£o Carro
    try:
        carro_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
        )
        print("‚úÖ Bot√£o Carro encontrado e clic√°vel")
        
        # Salvar estado antes do clique
        log_tela(driver, 1, "antes_clique", "Antes de clicar no Carro")
        
        # Clicar no bot√£o
        carro_button.click()
        print("‚úÖ Clique no bot√£o Carro realizado")
        time.sleep(3)
        
        # Salvar estado ap√≥s clique
        log_tela(driver, 1, "apos_clique", "Ap√≥s clicar no Carro")
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 1:** {e}")
        log_tela(driver, 1, "erro", f"Erro: {e}")
        return False

def tela2_inserir_placa(driver):
    """Tela 2: Inserir placa do ve√≠culo"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 2: Inser√ß√£o da placa**")
    
    try:
        # Aguardar campo de placa aparecer
        placa_input = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.ID, "placaTelaPlaca"))
        )
        print("‚úÖ Campo de placa encontrado")
        
        # Salvar estado inicial da Tela 2
        log_tela(driver, 2, "inicial", "Campo de placa encontrado")
        
        # Inserir placa
        placa_input.clear()
        placa_input.send_keys("EED3D56")
        print("‚úÖ Placa EED3D56 inserida")
        time.sleep(2)
        
        # Salvar estado com placa inserida
        log_tela(driver, 2, "placa_inserida", "Placa EED3D56 inserida")
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 2:** {e}")
        log_tela(driver, 2, "erro", f"Erro: {e}")
        return False

def tela3_clicar_continuar(driver):
    """Tela 3: Clicar em Continuar ap√≥s inserir placa"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 3: Clicar em Continuar**")
    
    try:
        # Procurar bot√£o Continuar
        continuar_button = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.XPATH, "//p[text()='Continuar']"))
        )
        print("‚úÖ Bot√£o Continuar encontrado")
        
        # Salvar estado antes do clique
        log_tela(driver, 3, "antes_clique", "Antes de clicar em Continuar")
        
        # Clicar em Continuar
        continuar_button.click()
        print("‚úÖ Continuar clicado")
        time.sleep(3)
        
        # Salvar estado ap√≥s clique
        log_tela(driver, 3, "apos_clique", "Ap√≥s clicar em Continuar")
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 3:** {e}")
        log_tela(driver, 3, "erro", f"Erro: {e}")
        return False

def tela5_confirmar_veiculo(driver):
    """Tela 5: Confirmar informa√ß√µes do ve√≠culo"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 5: Confirma√ß√£o do ve√≠culo**")
    
    try:
        # Aguardar Tela 5 carregar
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'COROLLA')]"))
        )
        print("‚úÖ Tela 5 carregada - ve√≠culo COROLLA detectado")
        
        # Salvar estado inicial da Tela 5
        log_tela(driver, 5, "inicial", "Tela 5 carregada - ve√≠culo COROLLA")
        
        # Procurar e clicar no radio "Sim"
        sim_radio = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//input[@value='Sim']"))
        )
        print("‚úÖ Radio 'Sim' encontrado")
        
        # Salvar estado antes da confirma√ß√£o
        log_tela(driver, 5, "antes_confirmacao", "Antes de confirmar ve√≠culo")
        
        # Clicar via JavaScript
        driver.execute_script("arguments[0].click();", sim_radio)
        print("‚úÖ Ve√≠culo confirmado via JavaScript")
        time.sleep(2)
        
        # Salvar estado ap√≥s confirma√ß√£o
        log_tela(driver, 5, "apos_confirmacao", "Ap√≥s confirmar ve√≠culo")
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 5:** {e}")
        log_tela(driver, 5, "erro", f"Erro: {e}")
        return False

def tela6_veiculo_segurado(driver):
    """Tela 6: Informar se ve√≠culo j√° est√° segurado"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 6: Ve√≠culo j√° segurado**")
    
    try:
        # Aguardar Tela 6 carregar
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'j√° est√° segurado')]"))
        )
        print("‚úÖ Tela 6 carregada - pergunta sobre seguro vigente")
        
        # Salvar estado inicial da Tela 6
        log_tela(driver, 6, "inicial", "Tela 6 carregada - seguro vigente")
        
        # Verificar se "N√£o" j√° est√° selecionado
        try:
            nao_radio = driver.find_element(By.XPATH, "//input[@value='N√£o']")
            if nao_radio.is_selected():
                print("‚úÖ Radio 'N√£o' j√° estava selecionado")
            else:
                print("‚ö†Ô∏è Radio 'N√£o' n√£o estava selecionado - selecionando...")
                driver.execute_script("arguments[0].click();", nao_radio)
                time.sleep(1)
        except:
            print("‚ö†Ô∏è Radio 'N√£o' n√£o encontrado - procurando alternativas...")
        
        # Salvar estado antes de continuar
        log_tela(driver, 6, "antes_continuar", "Antes de clicar em Continuar")
        
        # Clicar em Continuar
        continuar_button = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 6")
        time.sleep(3)
        
        # Salvar estado ap√≥s clique
        log_tela(driver, 6, "apos_continuar", "Ap√≥s clicar em Continuar")
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 6:** {e}")
        log_tela(driver, 6, "erro", f"Erro: {e}")
        return False

def tela7_estimativa_inicial(driver):
    """Tela 7: Aguardar carregamento da estimativa inicial"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 7: Estimativa inicial**")
    
    try:
        # Aguardar Tela 7 carregar
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'estimativa inicial')]"))
        )
        print("‚úÖ Tela 7 carregada - estimativa inicial detectada")
        
        # Salvar estado da Tela 7
        log_tela(driver, 7, "estimativa_carregada", "Estimativa inicial carregada")
        
        # Aguardar um pouco para garantir que carregou completamente
        time.sleep(5)
        
        # Salvar estado ap√≥s carregamento completo
        log_tela(driver, 7, "carregamento_completo", "Carregamento completo da estimativa")
        
        # Clicar em Continuar
        continuar_button = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 7")
        time.sleep(3)
        
        # Salvar estado ap√≥s clique
        log_tela(driver, 7, "apos_continuar", "Ap√≥s clicar em Continuar")
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 7:** {e}")
        log_tela(driver, 7, "erro", f"Erro: {e}")
        return False

def tela8_tipo_combustivel(driver):
    """Tela 8: Selecionar tipo de combust√≠vel"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 8: Tipo de combust√≠vel**")
    
    try:
        # Aguardar Tela 8 carregar
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Tipo de Combust√≠vel')]"))
        )
        print("‚úÖ Tela 8 carregada - tipo de combust√≠vel")
        
        # Salvar estado inicial da Tela 8
        log_tela(driver, 8, "inicial", "Tela 8 carregada - tipo de combust√≠vel")
        
        # Selecionar Flex
        flex_radio = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.XPATH, "//input[@value='Flex']"))
        )
        flex_radio.click()
        print("‚úÖ Flex selecionado")
        time.sleep(2)
        
        # Salvar estado com Flex selecionado
        log_tela(driver, 8, "flex_selecionado", "Flex selecionado")
        
        # Clicar em Continuar
        continuar_button = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 8")
        time.sleep(3)
        
        # Salvar estado ap√≥s clique
        log_tela(driver, 8, "apos_continuar", "Ap√≥s clicar em Continuar")
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 8:** {e}")
        log_tela(driver, 8, "erro", f"Erro: {e}")
        return False

def tela9_endereco_pernoite(driver):
    """Tela 9: Endere√ßo onde o carro passa a noite"""
    print("\nÔøΩÔøΩ **INICIANDO TELA 9: Endere√ßo onde o carro passa a noite**")
    
    try:
        # Aguardar Tela 9 carregar
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Onde o carro passa a noite')]"))
        )
        print("‚úÖ Tela 9 carregada - endere√ßo onde o carro passa a noite")
        
        # Salvar estado inicial da Tela 9
        log_tela(driver, 9, "inicial", "Tela 9 carregada - endere√ßo pernoite")
        
        # Encontrar campo CEP
        cep_input = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.ID, "enderecoTelaEndereco"))
        )
        print("‚úÖ Campo CEP encontrado")
        
        # Salvar estado com campo CEP encontrado
        log_tela(driver, 9, "campo_cep_encontrado", "Campo CEP encontrado")
        
        # Inserir CEP
        cep_input.clear()
        cep_input.send_keys("03084-000")
        print("‚úÖ CEP 03084-000 inserido")
        time.sleep(3)
        
        # Salvar estado com CEP inserido
        log_tela(driver, 9, "cep_inserido", "CEP inserido - aguardando autocomplete")
        
        # Tentar selecionar sugest√£o autom√°tica
        try:
            sugestao = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'S√£o Paulo')]"))
            )
            print("‚úÖ Sugest√£o de endere√ßo detectada")
            sugestao.click()
            print("‚úÖ Sugest√£o selecionada")
            time.sleep(2)
            
            # Salvar estado com sugest√£o selecionada
            log_tela(driver, 9, "sugestao_selecionada", "Sugest√£o de endere√ßo selecionada")
            
        except:
            print("‚ö†Ô∏è N√£o foi poss√≠vel selecionar sugest√£o - preenchendo manualmente")
            cep_input.clear()
            cep_input.send_keys("Rua Serra de Botucatu, Tatuap√© - S√£o Paulo/SP")
            print("‚úÖ Endere√ßo preenchido manualmente")
            time.sleep(2)
            
            # Salvar estado com endere√ßo manual
            log_tela(driver, 9, "endereco_manual", "Endere√ßo preenchido manualmente")
        
        # Verificar endere√ßo preenchido
        endereco_preenchido = cep_input.get_attribute("value")
        print(f"üìù Endere√ßo preenchido: {endereco_preenchido}")
        
        # Salvar estado final da Tela 9
        log_tela(driver, 9, "endereco_completo", f"Endere√ßo completo: {endereco_preenchido}")
        
        # Clicar em Continuar
        continuar_button = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaPernoiteVeiculoContinuar"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 9")
        time.sleep(3)
        
        # Salvar estado ap√≥s clique
        log_tela(driver, 9, "apos_continuar", "Ap√≥s clicar em Continuar")
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 9:** {e}")
        log_tela(driver, 9, "erro", f"Erro: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ **RPA T√î SEGURADO - COMPLETO COM LOGS DETALHADOS**")
    print("=" * 80)
    print(f"‚è∞ In√≠cio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Executar fluxo completo
        telas_executadas = []
        
        # Tela 1: Selecionar Carro
        if tela1_selecionar_carro(driver):
            telas_executadas.append("Tela 1: Carro selecionado")
        else:
            print("‚ùå **FALHA NA TELA 1 - PARANDO EXECU√á√ÉO**")
            return
        
        # Tela 2: Inserir placa
        if tela2_inserir_placa(driver):
            telas_executadas.append("Tela 2: Placa inserida")
        else:
            print("‚ùå **FALHA NA TELA 2 - PARANDO EXECU√á√ÉO**")
            return
        
        # Tela 3: Clicar Continuar
        if tela3_clicar_continuar(driver):
            telas_executadas.append("Tela 3: Continuar clicado")
        else:
            print("‚ùå **FALHA NA TELA 3 - PARANDO EXECU√á√ÉO**")
            return
        
        # Tela 5: Confirmar ve√≠culo
        if tela5_confirmar_veiculo(driver):
            telas_executadas.append("Tela 5: Ve√≠culo confirmado")
        else:
            print("‚ùå **FALHA NA TELA 5 - PARANDO EXECU√á√ÉO**")
            return
        
        # Tela 6: Ve√≠culo segurado
        if tela6_veiculo_segurado(driver):
            telas_executadas.append("Tela 6: Seguro vigente informado")
        else:
            print("‚ùå **FALHA NA TELA 6 - PARANDO EXECU√á√ÉO**")
            return
        
        # Tela 7: Estimativa inicial
        if tela7_estimativa_inicial(driver):
            telas_executadas.append("Tela 7: Estimativa inicial carregada")
        else:
            print("‚ùå **FALHA NA TELA 7 - PARANDO EXECU√á√ÉO**")
            return
        
        # Tela 8: Tipo de combust√≠vel
        if tela8_tipo_combustivel(driver):
            telas_executadas.append("Tela 8: Tipo de combust√≠vel selecionado")
        else:
            print("‚ùå **FALHA NA TELA 8 - PARANDO EXECU√á√ÉO**")
            return
        
        # Tela 9: Endere√ßo pernoite
        if tela9_endereco_pernoite(driver):
            telas_executadas.append("Tela 9: Endere√ßo preenchido")
        else:
            print("‚ùå **FALHA NA TELA 9 - PARANDO EXECU√á√ÉO**")
            return
        
        # Resumo final
        print(f"\n{'='*80}")
        print("üéâ **RPA EXECUTADO COM SUCESSO!**")
        print(f"{'='*80}")
        print(f"‚úÖ Total de telas executadas: {len(telas_executadas)}")
        for tela in telas_executadas:
            print(f"   ‚úÖ {tela}")
        print(f"\nüìÅ Todos os arquivos salvos em: /opt/imediatoseguros-rpa/temp/")
        print(f"‚è∞ Fim: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        print(f"\n‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
        if driver:
            driver.save_screenshot("/opt/imediatoseguros-rpa/temp/erro-geral.png")
            print(" Screenshot do erro geral salvo")
    
    finally:
        if driver:
            driver.quit()
        if temp_dir:
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")

if __name__ == "__main__":
    main()
