#!/usr/bin/env python3
"""
TESTE AVAN√áADO - EXCEPTION HANDLER
==================================

Este arquivo testa o sistema completo de exception handler,
simulando m√∫ltiplas tentativas de retry e diferentes tipos de erro.
"""

from exception_handler import (
    handle_selenium_exception,
    handle_retry_attempt,
    format_success_message,
    set_session_info
)
from selenium.common.exceptions import (
    ElementNotInteractableException,
    ElementClickInterceptedException,
    TimeoutException
)

def simular_tela_estado_civil():
    """Simula a implementa√ß√£o da Tela de Estado Civil com retry"""
    
    print("üé≠ SIMULANDO TELA DE ESTADO CIVIL")
    print("=" * 50)
    
    # Configurar informa√ß√µes da sess√£o
    set_session_info({
        "tela": "Estado Civil Condutor",
        "elemento": "estadoCivilTelaCondutorPrincipal",
        "valor": "Casado ou Uni√£o Est√°vel"
    })
    
    print("üìç Contexto configurado para logging")
    print()
    
    # Simular Tentativa 1 - Falha
    print("üîÑ TENTATIVA 1: CSS Selector direto")
    try:
        raise ElementNotInteractableException("element not interactable")
    except Exception as e1:
        message = handle_retry_attempt(1, 3, e1, "Campo Estado Civil")
        print(message)
        print()
    
    # Simular Tentativa 2 - Falha
    print("üîÑ TENTATIVA 2: JavaScript click")
    try:
        raise ElementClickInterceptedException("element click intercepted")
    except Exception as e2:
        message = handle_retry_attempt(2, 3, e2, "Campo Estado Civil")
        print(message)
        print()
    
    # Simular Tentativa 3 - Sucesso
    print("üîÑ TENTATIVA 3: ActionChains")
    try:
        # Simular sucesso
        message = format_success_message("Campo Estado Civil selecionado", "ActionChains")
        print(message)
        print()
        
    except Exception as e3:
        message = handle_retry_attempt(3, 3, e3, "Campo Estado Civil")
        print(message)
        print()
    
    print("‚úÖ Simula√ß√£o conclu√≠da!")
    print()

def simular_diferentes_tipos_erro():
    """Simula diferentes tipos de erro Selenium"""
    
    print("üîç TESTANDO DIFERENTES TIPOS DE ERRO")
    print("=" * 50)
    
    # Configurar contexto
    set_session_info({
        "tela": "Teste M√∫ltiplos Erros",
        "elemento": "botao_continuar",
        "valor": "teste"
    })
    
    # ElementNotInteractableException
    print("1Ô∏è‚É£ ElementNotInteractableException:")
    try:
        raise ElementNotInteractableException("element not interactable")
    except Exception as e:
        message = handle_selenium_exception(e, "Bot√£o Continuar")
        print(message)
        print()
    
    # ElementClickInterceptedException
    print("2Ô∏è‚É£ ElementClickInterceptedException:")
    try:
        raise ElementClickInterceptedException("element click intercepted")
    except Exception as e:
        message = handle_selenium_exception(e, "Campo de Texto")
        print(message)
        print()
    
    # TimeoutException
    print("3Ô∏è‚É£ TimeoutException:")
    try:
        raise TimeoutException("timeout")
    except Exception as e:
        message = handle_selenium_exception(e, "Carregamento da P√°gina")
        print(message)
        print()

def simular_sistema_retry_completo():
    """Simula um sistema de retry completo com 3 tentativas"""
    
    print("üîÑ SISTEMA DE RETRY COMPLETO (3 TENTATIVAS)")
    print("=" * 50)
    
    set_session_info({
        "tela": "Sistema de Retry",
        "elemento": "elemento_complexo",
        "valor": "retry_test"
    })
    
    max_attempts = 3
    success = False
    
    for attempt in range(1, max_attempts + 1):
        print(f"üéØ TENTATIVA {attempt} de {max_attempts}")
        
        try:
            if attempt == 3:  # Sucesso na terceira tentativa
                message = format_success_message("Elemento processado com sucesso", f"Tentativa {attempt}")
                print(message)
                success = True
                break
            else:
                # Simular falha
                raise ElementNotInteractableException(f"element not interactable - tentativa {attempt}")
                
        except Exception as e:
            if attempt < max_attempts:
                message = handle_retry_attempt(attempt, max_attempts, e, "Elemento Complexo")
                print(message)
                print("    ‚è≥ Aguardando 2 segundos...")
                print()
            else:
                message = handle_retry_attempt(attempt, max_attempts, e, "Elemento Complexo")
                print(message)
                print()
    
    if success:
        print("üéâ Sistema de retry funcionou perfeitamente!")
    else:
        print("‚ùå Todas as tentativas falharam")
    
    print()

if __name__ == "__main__":
    print("üöÄ TESTE AVAN√áADO - EXCEPTION HANDLER")
    print("=" * 60)
    print()
    
    # Executar testes
    simular_tela_estado_civil()
    simular_diferentes_tipos_erro()
    simular_sistema_retry_completo()
    
    print("üìä RESUMO DOS TESTES:")
    print("‚úÖ Sistema de exce√ß√µes funcionando")
    print("‚úÖ Formata√ß√£o de mensagens limpa")
    print("‚úÖ Sistema de retry operacional")
    print("‚úÖ Logging detalhado ativo")
    print("‚úÖ Compatibilidade com PHP mantida")
    print()
    print("üìã Verifique 'rpa_exceptions.log' para detalhes completos")
    print("üíª Terminal limpo e profissional")
    print("üîç Debugging completo nos logs")
    print()
    print("üéØ Sistema pronto para implementa√ß√£o no RPA!")
