#!/usr/bin/env python3
"""
Script de Versionamento Autom√°tico para RPA T√¥ Segurado
=======================================================

Este script automatiza o processo de versionamento:
1. Copia o arquivo executar_rpa_imediato.py para uma vers√£o numerada
2. Facilita o controle de vers√µes para compara√ß√£o
3. Mant√©m sempre o executar_rpa_imediato.py como arquivo oficial

USO:
====
python versionar_rpa.py <versao>

EXEMPLO:
========
python versionar_rpa.py 2.5.1
"""

import os
import sys
import shutil
from datetime import datetime

def versionar_rpa(versao):
    """
    Cria uma nova vers√£o do RPA baseada na vers√£o especificada
    
    Args:
        versao (str): N√∫mero da vers√£o (ex: "2.5.1")
    """
    
    # Arquivos base
    arquivo_oficial = "executar_rpa_imediato.py"
    arquivo_versao = f"executar_rpa_imediato_v{versao}.py"
    
    print(f"üöÄ **VERSIONANDO RPA T√î SEGURADO v{versao}**")
    print("=" * 60)
    
    # Verificar se o arquivo oficial existe
    if not os.path.exists(arquivo_oficial):
        print(f"‚ùå Erro: Arquivo oficial '{arquivo_oficial}' n√£o encontrado!")
        print("   Certifique-se de que o arquivo existe antes de versionar.")
        return False
    
    # Verificar se a vers√£o j√° existe
    if os.path.exists(arquivo_versao):
        print(f"‚ö†Ô∏è  Aviso: Vers√£o v{versao} j√° existe!")
        resposta = input("   Deseja sobrescrever? (s/N): ").strip().lower()
        if resposta != 's':
            print("   Versionamento cancelado.")
            return False
    
    try:
        # Copiar arquivo oficial para vers√£o numerada
        shutil.copy2(arquivo_oficial, arquivo_versao)
        
        # Verificar se a c√≥pia foi bem-sucedida
        if os.path.exists(arquivo_versao):
            # Obter informa√ß√µes dos arquivos
            stat_oficial = os.stat(arquivo_oficial)
            stat_versao = os.stat(arquivo_versao)
            
            print(f"‚úÖ **VERS√ÉO v{versao} CRIADA COM SUCESSO!**")
            print(f"üìÅ Arquivo oficial: {arquivo_oficial}")
            print(f"üìÅ Nova vers√£o: {arquivo_versao}")
            print(f"üìä Tamanho: {stat_versao.st_size:,} bytes")
            print(f"‚è∞ Timestamp: {datetime.fromtimestamp(stat_versao.st_mtime)}")
            
            # Verificar se os arquivos s√£o id√™nticos
            if stat_oficial.st_size == stat_versao.st_size:
                print("üîç **VERIFICA√á√ÉO**: Arquivos id√™nticos ‚úì")
            else:
                print("‚ö†Ô∏è  **ATEN√á√ÉO**: Arquivos com tamanhos diferentes!")
            
            print("\nüéØ **PR√ìXIMOS PASSOS RECOMENDADOS:**")
            print("1. Testar a nova vers√£o se necess√°rio")
            print("2. Fazer commit no GitHub")
            print("3. Continuar desenvolvendo no arquivo oficial")
            print("4. Usar este script para criar novas vers√µes")
            
            return True
            
        else:
            print(f"‚ùå Erro: Falha ao criar vers√£o v{versao}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante versionamento: {str(e)}")
        return False

def listar_versoes():
    """
    Lista todas as vers√µes dispon√≠veis
    """
    print("üìã **VERS√ïES DISPON√çVEIS:**")
    print("=" * 40)
    
    arquivos = [f for f in os.listdir('.') if f.startswith('executar_rpa_imediato_v') and f.endswith('.py')]
    
    if not arquivos:
        print("   Nenhuma vers√£o encontrada.")
        return
    
    # Ordenar vers√µes
    arquivos.sort()
    
    for arquivo in arquivos:
        # Extrair vers√£o do nome do arquivo
        versao = arquivo.replace('executar_rpa_imediato_v', '').replace('.py', '')
        
        # Obter informa√ß√µes do arquivo
        stat = os.stat(arquivo)
        tamanho = stat.st_size
        timestamp = datetime.fromtimestamp(stat.st_mtime)
        
        print(f"   üìÅ {arquivo}")
        print(f"      üè∑Ô∏è  Vers√£o: {versao}")
        print(f"      üìä Tamanho: {tamanho:,} bytes")
        print(f"      ‚è∞ Criado: {timestamp}")
        print()

def main():
    """
    Fun√ß√£o principal do script
    """
    print("üöÄ **SCRIPT DE VERSIONAMENTO RPA T√î SEGURADO**")
    print("=" * 60)
    
    if len(sys.argv) < 2:
        print("‚ùå Erro: Vers√£o n√£o especificada!")
        print("\nüìñ **USO:**")
        print("   python versionar_rpa.py <versao>")
        print("\nüìñ **EXEMPLOS:**")
        print("   python versionar_rpa.py 2.5.1")
        print("   python versionar_rpa.py 2.6.0")
        print("   python versionar_rpa.py 3.0.0")
        print("\nüìã **COMANDOS ADICIONAIS:**")
        print("   python versionar_rpa.py --list    # Listar vers√µes existentes")
        print("   python versionar_rpa.py --help    # Mostrar esta ajuda")
        return
    
    # Verificar comandos especiais
    if sys.argv[1] == '--list' or sys.argv[1] == '-l':
        listar_versoes()
        return
    
    if sys.argv[1] == '--help' or sys.argv[1] == '-h':
        print(__doc__)
        return
    
    # Extrair vers√£o dos argumentos
    versao = sys.argv[1].strip()
    
    # Validar formato da vers√£o
    if not versao.replace('.', '').replace('-', '').replace('_', '').isdigit():
        print(f"‚ö†Ô∏è  Aviso: Formato de vers√£o '{versao}' pode n√£o ser padr√£o")
        resposta = input("   Continuar mesmo assim? (s/N): ").strip().lower()
        if resposta != 's':
            print("   Versionamento cancelado.")
            return
    
    # Executar versionamento
    sucesso = versionar_rpa(versao)
    
    if sucesso:
        print(f"\nüéâ **VERSIONAMENTO v{versao} CONCLU√çDO COM SUCESSO!**")
        print("   O arquivo oficial continua dispon√≠vel para desenvolvimento.")
    else:
        print(f"\n‚ùå **VERSIONAMENTO v{versao} FALHOU!**")
        print("   Verifique os erros acima e tente novamente.")

if __name__ == "__main__":
    main()
