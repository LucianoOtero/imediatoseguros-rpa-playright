#!/usr/bin/env python3
"""
TESTE DO LOGIN AUTOM√ÅTICO
=========================

OBJETIVO:
- Testar a funcionalidade de login autom√°tico implementada
- Verificar se detecta e preenche os campos corretamente
- Validar se os par√¢metros de autentica√ß√£o est√£o sendo lidos

FUNCIONALIDADES TESTADAS:
- Leitura dos par√¢metros de autentica√ß√£o do JSON
- Detec√ß√£o da janela de login
- Preenchimento autom√°tico de email e senha
- Clique nos bot√µes necess√°rios
- Tratamento de erros
"""

import json
import sys
import os

def testar_parametros_autenticacao():
    """Testa se os par√¢metros de autentica√ß√£o est√£o configurados corretamente"""
    print("üîç TESTANDO PAR√ÇMETROS DE AUTENTICA√á√ÉO...")
    
    try:
        # Carregar par√¢metros
        with open('parametros.json', 'r', encoding='utf-8') as f:
            parametros = json.load(f)
        
        # Verificar se existe se√ß√£o de autentica√ß√£o
        if "autenticacao" not in parametros:
            print("‚ùå ERRO: Se√ß√£o 'autenticacao' n√£o encontrada no JSON")
            return False
        
        # Verificar campos obrigat√≥rios
        autenticacao = parametros["autenticacao"]
        
        if "email_login" not in autenticacao:
            print("‚ùå ERRO: Campo 'email_login' n√£o encontrado")
            return False
            
        if "senha_login" not in autenticacao:
            print("‚ùå ERRO: Campo 'senha_login' n√£o encontrado")
            return False
        
        # Verificar se os campos n√£o est√£o vazios
        email = autenticacao["email_login"]
        senha = autenticacao["senha_login"]
        
        if not email or email.strip() == "":
            print("‚ùå ERRO: Campo 'email_login' est√° vazio")
            return False
            
        if not senha or senha.strip() == "":
            print("‚ùå ERRO: Campo 'senha_login' est√° vazio")
            return False
        
        print(f"‚úÖ Email configurado: {email}")
        print(f"‚úÖ Senha configurada: {'*' * len(senha)}")
        print(f"‚úÖ Manter login atual: {autenticacao.get('manter_login_atual', True)}")
        
        return True
        
    except FileNotFoundError:
        print("‚ùå ERRO: Arquivo 'parametros.json' n√£o encontrado")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå ERRO: JSON inv√°lido: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False

def testar_elementos_login():
    """Testa se os elementos de login est√£o definidos corretamente"""
    print("\nüîç TESTANDO ELEMENTOS DE LOGIN...")
    
    elementos_esperados = [
        "emailTelaLogin",
        "senhaTelaLogin", 
        "gtm-telaLoginBotaoAcessar",
        "manterLoginAtualModalAssociarUsuario"
    ]
    
    print("‚úÖ Elementos esperados:")
    for elemento in elementos_esperados:
        print(f"   - {elemento}")
    
    return True

def testar_importacao_funcao():
    """Testa se a fun√ß√£o de login pode ser importada"""
    print("\nüîç TESTANDO IMPORTA√á√ÉO DA FUN√á√ÉO...")
    
    try:
        # Tentar importar a fun√ß√£o do arquivo principal
        sys.path.append(os.getcwd())
        
        # Verificar se o arquivo existe
        if not os.path.exists('executar_rpa_imediato.py'):
            print("‚ùå ERRO: Arquivo 'executar_rpa_imediato.py' n√£o encontrado")
            return False
        
        # Verificar se a fun√ß√£o existe no arquivo
        with open('executar_rpa_imediato.py', 'r', encoding='utf-8') as f:
            conteudo = f.read()
            
        if 'def realizar_login_automatico' not in conteudo:
            print("‚ùå ERRO: Fun√ß√£o 'realizar_login_automatico' n√£o encontrada no arquivo")
            return False
        
        print("‚úÖ Fun√ß√£o 'realizar_login_automatico' encontrada no arquivo")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False

def testar_estrutura_completa():
    """Testa a estrutura completa da implementa√ß√£o"""
    print("\nüîç TESTANDO ESTRUTURA COMPLETA...")
    
    # Verificar se todos os arquivos necess√°rios existem
    arquivos_necessarios = [
        'parametros.json',
        'executar_rpa_imediato.py',
        'converter_unicode_ascii_robusto.py',
        'exception_handler.py'
    ]
    
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo} - OK")
        else:
            print(f"‚ùå {arquivo} - N√ÉO ENCONTRADO")
            return False
    
    return True

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ TESTE DO LOGIN AUTOM√ÅTICO")
    print("=" * 50)
    
    testes = [
        ("Par√¢metros de Autentica√ß√£o", testar_parametros_autenticacao),
        ("Elementos de Login", testar_elementos_login),
        ("Importa√ß√£o da Fun√ß√£o", testar_importacao_funcao),
        ("Estrutura Completa", testar_estrutura_completa)
    ]
    
    resultados = []
    
    for nome_teste, funcao_teste in testes:
        print(f"\nüìã {nome_teste.upper()}")
        print("-" * 30)
        
        try:
            resultado = funcao_teste()
            resultados.append((nome_teste, resultado))
            
            if resultado:
                print(f"‚úÖ {nome_teste}: PASSOU")
            else:
                print(f"‚ùå {nome_teste}: FALHOU")
                
        except Exception as e:
            print(f"‚ùå {nome_teste}: ERRO - {e}")
            resultados.append((nome_teste, False))
    
    # Resumo final
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    testes_passaram = sum(1 for _, resultado in resultados if resultado)
    total_testes = len(resultados)
    
    for nome_teste, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{nome_teste}: {status}")
    
    print(f"\nüéØ RESULTADO: {testes_passaram}/{total_testes} testes passaram")
    
    if testes_passaram == total_testes:
        print("üéâ TODOS OS TESTES PASSARAM! Login autom√°tico est√° pronto para uso.")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("   1. Execute o RPA principal: python executar_rpa_imediato.py")
        print("   2. O login ser√° verificado automaticamente")
        print("   3. Os valores reais do pr√™mio estar√£o dispon√≠veis")
    else:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM. Verifique as configura√ß√µes.")
        print("\nüîß CORRE√á√ïES NECESS√ÅRIAS:")
        for nome_teste, resultado in resultados:
            if not resultado:
                print(f"   - {nome_teste}")

if __name__ == "__main__":
    main()
