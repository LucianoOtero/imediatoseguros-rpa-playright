#!/usr/bin/env python3
"""
Script de investiga√ß√£o espec√≠fico para a tela final
Vai tentar navegar at√© a tela final e capturar dados com tempos de espera maiores
"""

import json
import time
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def configurar_chrome():
    """Configura o Chrome para investiga√ß√£o"""
    try:
        chrome_options = Options()
        # N√£o usar headless para investiga√ß√£o
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        chromedriver_path = os.path.join(os.getcwd(), "chromedriver", "chromedriver-win64", "chromedriver.exe")
        service = Service(chromedriver_path)
        
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        return driver
    except Exception as e:
        print(f"‚ùå Erro ao configurar Chrome: {str(e)}")
        return None

def aguardar_carregamento_pagina(driver, timeout=60):
    """Aguarda o carregamento completo da p√°gina"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def investigar_tela_final():
    """Investiga especificamente a tela final"""
    
    print("üîç **INVESTIGA√á√ÉO DA TELA FINAL**")
    print("="*50)
    
    # Ler par√¢metros
    try:
        with open('parametros.json', 'r', encoding='utf-8') as f:
            parametros = json.load(f)
        print("‚úÖ Par√¢metros carregados")
    except Exception as e:
        print(f"‚ùå Erro ao carregar par√¢metros: {str(e)}")
        return
    
    driver = configurar_chrome()
    if not driver:
        return
    
    try:
        # 1. Navegar para a URL base
        url_base = parametros['url_base']
        print(f"üåê Navegando para: {url_base}")
        driver.get(url_base)
        
        # Aguardar carregamento inicial
        aguardar_carregamento_pagina(driver, 30)
        time.sleep(5)
        
        print(f"üìÑ T√≠tulo atual: {driver.title}")
        print(f"üîó URL atual: {driver.current_url}")
        
        # 2. Tentar encontrar elementos da tela inicial
        print("\nüîç **PROCURANDO ELEMENTOS DA TELA INICIAL**")
        
        # Procurar por elementos que indicam que estamos na tela inicial
        elementos_iniciais = [
            "Fa√ßa agora sua cota√ß√£o",
            "cota√ß√£o de Seguro Auto",
            "Selecione o tipo de ve√≠culo",
            "Carro"
        ]
        
        for elemento in elementos_iniciais:
            try:
                elementos = driver.find_elements(By.XPATH, f"//*[contains(text(), '{elemento}')]")
                if elementos:
                    print(f"‚úÖ Encontrado: '{elemento}' ({len(elementos)} elementos)")
                    for i, elem in enumerate(elementos[:3]):  # Mostrar apenas os primeiros 3
                        print(f"   {i+1}. Texto: '{elem.text[:100]}...'")
                else:
                    print(f"‚ùå N√£o encontrado: '{elemento}'")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao procurar '{elemento}': {str(e)}")
        
        # 3. Verificar se h√° bot√µes ou links para continuar
        print("\nüîç **PROCURANDO BOT√ïES/LINKS PARA CONTINUAR**")
        
        botoes = driver.find_elements(By.TAG_NAME, "button")
        links = driver.find_elements(By.TAG_NAME, "a")
        
        print(f"üìä Bot√µes encontrados: {len(botoes)}")
        print(f"üìä Links encontrados: {len(links)}")
        
        # Mostrar texto dos bot√µes
        for i, botao in enumerate(botoes[:10]):  # Primeiros 10 bot√µes
            try:
                texto = botao.text.strip()
                if texto:
                    print(f"   Bot√£o {i+1}: '{texto}'")
            except:
                pass
        
        # Mostrar texto dos links
        for i, link in enumerate(links[:10]):  # Primeiros 10 links
            try:
                texto = link.text.strip()
                if texto:
                    print(f"   Link {i+1}: '{texto}'")
            except:
                pass
        
        # 4. Verificar se h√° formul√°rios
        print("\nüîç **PROCURANDO FORMUL√ÅRIOS**")
        
        forms = driver.find_elements(By.TAG_NAME, "form")
        inputs = driver.find_elements(By.TAG_NAME, "input")
        selects = driver.find_elements(By.TAG_NAME, "select")
        
        print(f"üìä Formul√°rios: {len(forms)}")
        print(f"üìä Inputs: {len(inputs)}")
        print(f"üìä Selects: {len(selects)}")
        
        # 5. Salvar screenshot e HTML para an√°lise
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Screenshot
        screenshot_path = f"temp/investigacao_tela_final_{timestamp}.png"
        driver.save_screenshot(screenshot_path)
        print(f"üì∏ Screenshot salvo: {screenshot_path}")
        
        # HTML
        html_path = f"temp/investigacao_tela_final_{timestamp}.html"
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(driver.page_source)
        print(f"üìÑ HTML salvo: {html_path}")
        
        # 6. Verificar se h√° JavaScript executando
        print("\nüîç **VERIFICANDO JAVASCRIPT**")
        
        try:
            # Verificar se h√° elementos sendo carregados dinamicamente
            elementos_dinamicos = driver.find_elements(By.XPATH, "//*[contains(@class, 'loading') or contains(@class, 'spinner') or contains(@class, 'skeleton')]")
            if elementos_dinamicos:
                print(f"üîÑ Elementos din√¢micos encontrados: {len(elementos_dinamicos)}")
                for elem in elementos_dinamicos[:5]:
                    print(f"   - Classe: {elem.get_attribute('class')}")
            else:
                print("‚úÖ Nenhum elemento din√¢mico detectado")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar elementos din√¢micos: {str(e)}")
        
        # 7. Tentar aguardar mais tempo para ver se algo carrega
        print("\n‚è≥ **AGUARDANDO CARREGAMENTO ADICIONAL (30s)**")
        
        for i in range(6):  # 30 segundos em intervalos de 5s
            time.sleep(5)
            print(f"   Aguardando... {i+1}/6")
            
            # Verificar se algo mudou
            try:
                elementos_novos = driver.find_elements(By.XPATH, "//*[contains(text(), 'Parab√©ns') or contains(text(), 'resultado final')]")
                if elementos_novos:
                    print(f"üéâ **ELEMENTOS DA TELA FINAL DETECTADOS!** ({len(elementos_novos)} elementos)")
                    for elem in elementos_novos:
                        print(f"   - Texto: '{elem.text[:200]}...'")
                    break
            except:
                pass
        
        # 8. Verifica√ß√£o final
        print(f"\nüìä **VERIFICA√á√ÉO FINAL**")
        print(f"   T√≠tulo: {driver.title}")
        print(f"   URL: {driver.current_url}")
        print(f"   Elementos na p√°gina: {len(driver.find_elements(By.XPATH, '//*'))}")
        
        # Verificar se chegamos √† tela final
        if "Parab√©ns" in driver.page_source or "resultado final" in driver.page_source.lower():
            print("üéâ **SUCESSO: TELA FINAL DETECTADA!**")
        else:
            print("‚ùå **PROBLEMA: TELA FINAL N√ÉO DETECTADA**")
            print("   Poss√≠veis causas:")
            print("   - O RPA n√£o chegou at√© a tela final")
            print("   - A tela final demora muito para carregar")
            print("   - Os elementos da tela final t√™m nomes diferentes")
            print("   - H√° um modal ou popup bloqueando")
        
    except Exception as e:
        print(f"‚ùå **ERRO NA INVESTIGA√á√ÉO**: {str(e)}")
    
    finally:
        print("\nüîö **FINALIZANDO INVESTIGA√á√ÉO**")
        driver.quit()

if __name__ == "__main__":
    # Criar diret√≥rio temp se n√£o existir
    os.makedirs("temp", exist_ok=True)
    
    investigar_tela_final()
