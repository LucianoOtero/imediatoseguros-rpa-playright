#!/usr/bin/env python3
"""
M√≥dulo de Retorno Estruturado para RPA T√¥ Segurado
===================================================

Este m√≥dulo implementa fun√ß√µes para criar retornos estruturados
padronizados para frontend/API, incluindo c√≥digos de erro e sucesso.

VERS√ÉO: 2.4.0
DATA: 29/08/2025
"""

import json
import time
from datetime import datetime
import os

def criar_retorno_estruturado(status, codigo_erro=None, dados_extras=None, logs_recentes=None):
    """
    Cria um retorno estruturado para o frontend com c√≥digos de sucesso/erro padronizados

    Args:
        status: 'sucesso' ou 'erro'
        codigo_erro: C√≥digo de erro da tabela (1000-9999)
        dados_extras: Dicion√°rio com dados adicionais
        logs_recentes: Lista de logs recentes para incluir no retorno

    Returns:
        Dicion√°rio estruturado com retorno completo
    """

    # C√≥digos de sucesso e mensagens
    CODIGOS_SUCESSO = {
        9001: "Tela executada com sucesso",
        9002: "RPA executado com sucesso",
        9003: "Elemento encontrado e processado",
        9004: "A√ß√£o realizada com sucesso"
    }

    # C√≥digos de erro e mensagens compreensivas
    CODIGOS_ERRO = {
        # Erros de configura√ß√£o (1000-1999)
        1001: "Erro ao carregar arquivo de configura√ß√£o - Verifique se o arquivo parametros.json existe e est√° v√°lido",
        1002: "Configura√ß√£o inv√°lida ou incompleta - Verifique a estrutura do arquivo de configura√ß√£o",
        1003: "Erro no ChromeDriver - Verifique se o ChromeDriver est√° instalado e acess√≠vel",
        1004: "Erro ao inicializar navegador - Verifique as configura√ß√µes do Chrome e permiss√µes",

        # Erros de navega√ß√£o (2000-2999)
        2001: "Timeout na navega√ß√£o - A p√°gina demorou muito para carregar, verifique a conex√£o",
        2002: "Elemento n√£o encontrado na p√°gina - A estrutura da p√°gina pode ter mudado",
        2003: "Elemento n√£o est√° clic√°vel - O elemento existe mas n√£o pode ser interagido",
        2004: "P√°gina n√£o carregou completamente - Aguarde mais tempo ou verifique a conex√£o",
        2005: "Erro no redirecionamento - Problema na navega√ß√£o entre p√°ginas",

        # Erros de automa√ß√£o (3000-3999)
        3001: "Falha ao clicar no elemento - Elemento pode estar sobreposto ou n√£o vis√≠vel",
        3002: "Falha ao inserir dados no campo - Campo pode estar desabilitado ou inv√°lido",
        3003: "Timeout aguardando elemento - Elemento n√£o apareceu no tempo esperado",
        3004: "Elemento obsoleto (stale) - A p√°gina foi recarregada, tente novamente",
        3005: "Erro na execu√ß√£o de JavaScript - Problema na intera√ß√£o com a p√°gina",

        # Erros de sistema (4000-4999)
        4001: "Erro de conex√£o de rede - Verifique sua conex√£o com a internet",
        4002: "Erro de mem√≥ria insuficiente - Feche outros programas e tente novamente",
        4003: "Erro de disco/arquivo - Verifique o espa√ßo em disco e permiss√µes",
        4004: "Erro de permiss√£o - Execute como administrador se necess√°rio",

        # Erros de valida√ß√£o (5000-5999)
        5001: "Dados inv√°lidos fornecidos - Verifique os dados de entrada",
        5002: "Formato de dados incorreto - Verifique o formato dos dados",
        5003: "Valida√ß√£o falhou - Dados n√£o passaram na valida√ß√£o"
    }

    # Estrutura base do retorno
    retorno = {
        "status": status,
        "timestamp": datetime.now().isoformat(),
        "versao": "2.4.0",
        "sistema": "RPA T√¥ Segurado"
    }

    if status == "sucesso":
        # Retorno de sucesso
        if codigo_erro and codigo_erro in CODIGOS_SUCESSO:
            retorno.update({
                "codigo": codigo_erro,
                "mensagem": CODIGOS_SUCESSO[codigo_erro],
                "tipo": "sucesso"
            })
        else:
            retorno.update({
                "codigo": 9002,
                "mensagem": "RPA executado com sucesso",
                "tipo": "sucesso"
            })

        # Adicionar dados extras se fornecidos
        if dados_extras:
            retorno["dados"] = dados_extras

        # Adicionar logs recentes se solicitado
        if logs_recentes:
            retorno["logs"] = logs_recentes

    else:
        # Retorno de erro
        if codigo_erro and codigo_erro in CODIGOS_ERRO:
            retorno.update({
                "codigo": codigo_erro,
                "mensagem": CODIGOS_ERRO[codigo_erro],
                "tipo": "erro"
            })
        else:
            retorno.update({
                "codigo": 4001,
                "mensagem": "Erro desconhecido durante a execu√ß√£o",
                "tipo": "erro"
            })

        # Adicionar dados extras se fornecidos
        if dados_extras:
            retorno["dados"] = dados_extras

    return retorno

def obter_logs_recentes(max_linhas=10):
    """
    Obt√©m os logs mais recentes do arquivo de log

    Args:
        max_linhas: N√∫mero m√°ximo de linhas de log a retornar

    Returns:
        Lista de logs recentes ou None se n√£o dispon√≠vel
    """
    try:
        # Tentar obter logs do sistema de logging se dispon√≠vel
        try:
            from utils.logger_rpa import rpa_logger
            log_file = rpa_logger.get_log_file_path()
            if log_file and os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    linhas = f.readlines()
                    # Retornar as √∫ltimas linhas
                    return [linha.strip() for linha in linhas[-max_linhas:]] if len(linhas) > max_linhas else [linha.strip() for linha in linhas]
        except ImportError:
            pass

        # Fallback: procurar por arquivos de log comuns
        arquivos_log = [
            "rpa.log",
            "logs/rpa.log",
            "temp/rpa.log"
        ]
        
        for arquivo in arquivos_log:
            if os.path.exists(arquivo):
                try:
                    with open(arquivo, 'r', encoding='utf-8') as f:
                        linhas = f.readlines()
                        return [linha.strip() for linha in linhas[-max_linhas:]] if len(linhas) > max_linhas else [linha.strip() for linha in linhas]
                except:
                    continue

        return None

    except Exception:
        return None

def main():
    """Fun√ß√£o principal para teste do m√≥dulo"""
    print("üß™ **TESTE DO M√ìDULO DE RETORNO ESTRUTURADO**")
    print("=" * 60)
    
    # Teste 1: Retorno de sucesso
    print("\nüü¢ **TESTE 1: RETORNO DE SUCESSO**")
    print("-" * 40)
    
    dados_extras = {
        "telas_executadas": 8,
        "tempo_execucao": "85.2s",
        "placa_processada": "ABC1234",
        "url_final": "https://www.app.tosegurado.com.br/cotacao/resultado"
    }
    
    retorno_sucesso = criar_retorno_estruturado(
        status="sucesso",
        codigo_erro=9002,
        dados_extras=dados_extras
    )
    
    print("üì§ JSON de retorno para o frontend:")
    print(json.dumps(retorno_sucesso, indent=2, ensure_ascii=False))
    
    # Teste 2: Retorno de erro
    print("\nüî¥ **TESTE 2: RETORNO DE ERRO**")
    print("-" * 40)
    
    dados_extras_erro = {
        "tela_falhou": 6,
        "elemento_nao_encontrado": "//button[contains(., 'Continuar')]",
        "tentativas_realizadas": 3,
        "ultimo_url": "https://www.app.tosegurado.com.br/cotacao/tela5"
    }
    
    retorno_erro = criar_retorno_estruturado(
        status="erro",
        codigo_erro=2002,
        dados_extras=dados_extras_erro
    )
    
    print("üì§ JSON de retorno para o frontend:")
    print(json.dumps(retorno_erro, indent=2, ensure_ascii=False))
    
    # Teste 3: Obter logs recentes
    print("\nüìù **TESTE 3: LOGS RECENTES**")
    print("-" * 40)
    
    logs = obter_logs_recentes(5)
    if logs:
        print(f"‚úÖ Logs encontrados: {len(logs)} linhas")
        for i, log in enumerate(logs, 1):
            print(f"   {i}: {log[:100]}...")
    else:
        print("‚ö†Ô∏è Nenhum log encontrado")
    
    print(f"\n‚è∞ Teste conclu√≠do em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
