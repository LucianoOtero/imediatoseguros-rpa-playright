#!/usr/bin/env python3
"""
INVESTIGA√á√ÉO ESPEC√çFICA DA TRANSI√á√ÉO TELA 3 ‚Üí TELA 4
===============================================================================
üéØ OBJETIVO: Identificar por que a Tela 4 n√£o carrega ap√≥s Tela 3
‚ö° M√âTODO: Aguardar mais tempo + Verificar elementos + Debug detalhado
üìä RESULTADO: Capturar estado exato da transi√ß√£o
===============================================================================
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def salvar_estado_tela(driver, tela_num, acao, temp_dir):
    """Salva o estado atual da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    tela_dir = f"temp/tela_{tela_num:02d}"
    os.makedirs(tela_dir, exist_ok=True)
    
    html_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(driver.page_source)
    
    screenshot_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.png"
    driver.save_screenshot(screenshot_file)
    
    info_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"TELA {tela_num:02d}: {acao}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"Arquivos salvos em: {os.path.abspath(tela_dir)}\n")
    
    print(f"==================================================================================")
    print(f"üì± **TELA {tela_num:02d}: {acao}** - {timestamp}")
    print(f"==================================================================================")
    print(f"üåê URL: {driver.current_url}")
    print(f"üìÑ T√≠tulo: {driver.title}")
    print(f" A√ß√£o: {acao}")
    print(f" Arquivos salvos em: {os.path.abspath(tela_dir)}")
    
    return tela_dir

def investigar_transicao_tela3_tela4():
    """Investiga a transi√ß√£o da Tela 3 para Tela 4"""
    print("üîç **INVESTIGANDO TRANSI√á√ÉO TELA 3 ‚Üí TELA 4**")
    print("=" * 80)
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 3
        print("\nÔøΩÔøΩ Navegando at√© Tela 3...")
        driver.get("https://www.app.tosegurado.com.br/cotacao")
        
        # Tela 1: Selecionar Carro
        print("\nüì± TELA 1: Selecionando Carro...")
        time.sleep(5)
        
        botao_carro = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
        )
        botao_carro.click()
        print("‚úÖ Carro selecionado")
        
        time.sleep(10)
        salvar_estado_tela(driver, 1, "apos_carro", temp_dir)
        
        # Tela 2: Inserir placa
        print("\nüì± TELA 2: Inserindo placa...")
        time.sleep(5)
        
        campo_placa = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        campo_placa.clear()
        campo_placa.send_keys("EED3D56")
        print("‚úÖ Placa inserida")
        
        time.sleep(5)
        salvar_estado_tela(driver, 2, "placa_inserida", temp_dir)
        
        # Tela 3: Clicar Continuar
        print("\nüì± TELA 3: Clicando Continuar...")
        time.sleep(5)
        
        botao_continuar = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar"))
        )
        botao_continuar.click()
        print("‚úÖ Continuar clicado")
        
        # AGUARDAR MAIS TEMPO PARA TRANSI√á√ÉO
        print("\n‚è≥ AGUARDANDO TRANSI√á√ÉO PARA TELA 4...")
        print("‚è∞ Aguardando 30 segundos para transi√ß√£o completa...")
        
        for i in range(30):
            print(f"‚è≥ Aguardando... {i+1}/30 segundos")
            time.sleep(1)
            
            # Verificar se mudou para Tela 4
            try:
                # Procurar por elementos da Tela 4
                elementos_tela4 = driver.find_elements(By.XPATH, "//*[contains(text(), 'segurado') or contains(text(), 'Segurado')]")
                if elementos_tela4:
                    print(f"üéØ TELA 4 DETECTADA no segundo {i+1}!")
                    salvar_estado_tela(driver, 4, "detectada_automaticamente", temp_dir)
                    break
            except:
                pass
        
        # Salvar estado final
        print("\nüì∏ Salvando estado final...")
        salvar_estado_tela(driver, 3, "estado_final_apos_continuar", temp_dir)
        
        # Verificar elementos da p√°gina atual
        print("\nÔøΩÔøΩ ANALISANDO ELEMENTOS DA P√ÅGINA ATUAL...")
        print(f"ÔøΩÔøΩ URL atual: {driver.current_url}")
        print(f"üìÑ T√≠tulo atual: {driver.title}")
        
        # Procurar por elementos espec√≠ficos
        elementos_segurado = driver.find_elements(By.XPATH, "//*[contains(text(), 'segurado') or contains(text(), 'Segurado')]")
        print(f"üéØ Elementos 'segurado' encontrados: {len(elementos_segurado)}")
        
        if elementos_segurado:
            for i, elem in enumerate(elementos_segurado[:3]):  # Primeiros 3
                print(f"  {i+1}. Texto: {elem.text[:100]}...")
        
        # Procurar por bot√µes
        botoes = driver.find_elements(By.TAG_NAME, "button")
        print(f"ÔøΩÔøΩ Bot√µes encontrados: {len(botoes)}")
        
        for i, botao in enumerate(botoes[:5]):  # Primeiros 5
            try:
                texto = botao.text.strip()
                if texto:
                    print(f"  {i+1}. Bot√£o: '{texto}'")
            except:
                pass
        
        print("\n‚úÖ **INVESTIGA√á√ÉO CONCLU√çDA!**")
        print("üìÅ Verifique os arquivos salvos em: /opt/imediatoseguros-rpa/temp/")
        
    except Exception as e:
        print(f"‚ùå **ERRO DURANTE INVESTIGA√á√ÉO:** {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)

if __name__ == "__main__":
    investigar_transicao_tela3_tela4()
