#!/usr/bin/env python3
"""
RPA T√¥ Segurado - TELA 9: Tipo de Combust√≠vel
Continua√ß√£o do fluxo a partir da Tela 8 (Estimativa Inicial)
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # Criar diret√≥rio tempor√°rio √∫nico
    temp_dir = tempfile.mkdtemp()
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    
    # Configurar o driver
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    return driver, temp_dir

def criar_diretorio_tela(numero_tela):
    """Cria diret√≥rio para salvar arquivos da tela"""
    diretorio = f"/opt/imediatoseguros-rpa/temp/tela_{numero_tela:02d}"
    os.makedirs(diretorio, exist_ok=True)
    return diretorio

def salvar_estado_tela(driver, numero_tela, descricao, sufixo=""):
    """Salva o estado completo da tela"""
    diretorio = criar_diretorio_tela(numero_tela)
    
    # Salvar HTML
    nome_html = f"tela_{numero_tela:02d}_{descricao}{sufixo}.html"
    caminho_html = os.path.join(diretorio, nome_html)
    with open(caminho_html, "w", encoding="utf-8") as f:
        f.write(driver.page_source)
    
    # Salvar screenshot
    nome_screenshot = f"tela_{numero_tela:02d}_{descricao}{sufixo}.png"
    caminho_screenshot = os.path.join(diretorio, nome_screenshot)
    driver.save_screenshot(caminho_screenshot)
    
    # Salvar informa√ß√µes da p√°gina
    nome_info = f"tela_{numero_tela:02d}_{descricao}{sufixo}.txt"
    caminho_info = os.path.join(diretorio, nome_info)
    with open(caminho_info, "w", encoding="utf-8") as f:
        f.write(f"TELA {numero_tela:02d}: {descricao}\n")
        f.write(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"HTML salvo em: {caminho_html}\n")
        f.write(f"Screenshot salvo em: {caminho_screenshot}\n")
    
    return diretorio

def log_tela(driver, numero_tela, descricao, acao=""):
    """Registra log detalhado da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    url = driver.current_url
    titulo = driver.title
    
    print(f"\n{'='*80}")
    print(f"Ô∏è  **TELA {numero_tela:02d}: {descricao}** - {timestamp}")
    print(f"{'='*80}")
    print(f"üåê URL: {url}")
    print(f"üìÑ T√≠tulo: {titulo}")
    
    if acao:
        print(f"üéØ A√ß√£o: {acao}")
    
    # Salvar estado da tela
    diretorio = salvar_estado_tela(driver, numero_tela, descricao)
    print(f" Arquivos salvos em: {diretorio}")
    
    return diretorio

def aguardar_carregamento_pagina(driver, timeout=30):
    """Aguarda a p√°gina carregar completamente"""
    print(f"‚è≥ Aguardando carregamento da p√°gina (timeout: {timeout}s)...")
    
    # Aguardar at√© que a p√°gina esteja pronta
    WebDriverWait(driver, timeout).until(
        lambda d: d.execute_script("return document.readyState") == "complete"
    )
    
    # Aguardar um pouco mais para garantir que tudo carregou
    time.sleep(3)
    print("‚úÖ P√°gina carregada completamente")

def navegar_ate_tela8(driver):
    """Navega at√© a Tela 8 (√∫ltima tela funcionando)"""
    print("üöÄ **NAVEGANDO AT√â TELA 8 (ESTIMATIVA INICIAL)**")
    
    try:
        # Tela 1: Selecionar Carro
        print("\nüì± TELA 1: Selecionando Carro...")
        driver.get("https://www.app.tosegurado.com.br/cotacao")
        time.sleep(5)
        
        carro_button = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
        )
        carro_button.click()
        print("‚úÖ Carro selecionado")
        time.sleep(3)
        
        # Tela 2: Inserir placa
        print("\nüì± TELA 2: Inserindo placa...")
        placa_input = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        placa_input.clear()
        placa_input.send_keys("EED3D56")
        print("‚úÖ Placa EED3D56 inserida")
        time.sleep(2)
        
        # Tela 3: Clicar Continuar
        print("\nüì± TELA 3: Clicando Continuar...")
        continuar_button = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado")
        time.sleep(5)
        
        # Tela 5: Confirmar ve√≠culo
        print("\nüì± TELA 5: Confirmando ve√≠culo...")
        WebDriverWait(driver, 40).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'COROLLA')]"))
        )
        
        sim_radio = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//input[@value='Sim']"))
        )
        driver.execute_script("arguments[0].click();", sim_radio)
        print("‚úÖ Ve√≠culo confirmado")
        time.sleep(3)
        
        # Tela 6: Ve√≠culo segurado
        print("\nüì± TELA 6: Selecionando 'N√£o' para ve√≠culo segurado...")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "confirmarVeiculoTelaInformacoesVeiculo"))
        )
        
        nao_radio = driver.find_element(By.XPATH, "//input[@value='N√£o']")
        if not nao_radio.is_selected():
            driver.execute_script("arguments[0].click();", nao_radio)
            print("‚úÖ Radio 'N√£o' selecionado")
            time.sleep(2)
        
        continuar_button = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaInfosAutoContinuar"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 6")
        time.sleep(5)
        
        # Tela 7: Confirma√ß√£o n√£o segurado
        print("\nÔøΩÔøΩ TELA 7: Aguardando confirma√ß√£o...")
        time.sleep(5)
        
        # Procurar bot√£o Continuar na Tela 7
        continuar_selectors = [
            "//button[contains(., 'Continuar')]",
            "//*[contains(., 'Continuar')]",
            "//button[contains(text(), 'Continuar')]",
            "//p[contains(., 'Continuar')]"
        ]
        
        continuar_button = None
        for selector in continuar_selectors:
            try:
                continuar_button = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, selector))
                )
                print(f"‚úÖ Bot√£o Continuar encontrado com selector: {selector}")
                break
            except:
                continue
        
        if continuar_button:
            continuar_button.click()
            print("‚úÖ Continuar clicado na Tela 7")
            time.sleep(5)
        else:
            print("‚ö†Ô∏è Bot√£o Continuar n√£o encontrado na Tela 7")
        
        # Tela 8: Estimativa inicial
        print("\nÔøΩÔøΩ TELA 8: Aguardando estimativa inicial...")
        time.sleep(5)
        
        # Aguardar elementos da estimativa inicial
        WebDriverWait(driver, 60).until(
            lambda d: any([
                "estimativa" in d.page_source.lower(),
                "carrossel" in d.page_source.lower(),
                "cobertura" in d.page_source.lower(),
                "plano" in d.page_source.lower(),
                "franquia" in d.page_source.lower()
            ])
        )
        print("‚úÖ Tela 8 carregada - estimativa inicial detectada!")
        
        # Aguardar carregamento completo
        aguardar_carregamento_pagina(driver, 30)
        
        # Salvar estado da Tela 8
        log_tela(driver, 8, "estimativa_carregada", "Estimativa inicial carregada")
        
        # Aguardar mais um pouco
        time.sleep(10)
        
        # Clicar em Continuar na Tela 8
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        continuar_button = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Continuar')]"))
        )
        continuar_button.click()
        print("‚úÖ Continuar clicado na Tela 8")
        
        # Aguardar carregamento da pr√≥xima p√°gina
        aguardar_carregamento_pagina(driver, 30)
        
        print("‚úÖ TELA 8 CARREGADA E CONTINUAR CLICADO!")
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO AO NAVEGAR AT√â TELA 8:** {e}")
        return False

def tela9_tipo_combustivel(driver):
    """Tela 9: Selecionar tipo de combust√≠vel"""
    print("\n **INICIANDO TELA 9: Tipo de combust√≠vel**")
    
    try:
        # Aguardar Tela 9 carregar com timeout maior
        print("‚è≥ Aguardando Tela 9 carregar...")
        
        # Aguardar um pouco para a p√°gina carregar
        time.sleep(5)
        
        # Salvar estado inicial da Tela 9
        log_tela(driver, 9, "inicial", "Tela 9 carregada - aguardando tipo combust√≠vel")
        
        # Procurar elementos espec√≠ficos da Tela 9
        print("üîç Procurando elementos da Tela 9...")
        
        # Aguardar carregamento com timeout maior
        WebDriverWait(driver, 60).until(
            lambda d: any([
                "tipo.*combustivel" in d.page_source.lower(),
                "flex" in d.page_source.lower(),
                "gasolina" in d.page_source.lower(),
                "alcool" in d.page_source.lower(),
                "diesel" in d.page_source.lower(),
                "hibrido" in d.page_source.lower(),
                "eletrico" in d.page_source.lower()
            ])
        )
        print("‚úÖ Tela 9 carregada - tipo de combust√≠vel detectado!")
        
        # Aguardar carregamento completo
        aguardar_carregamento_pagina(driver, 20)
        
        # Salvar estado da Tela 9
        log_tela(driver, 9, "tipo_combustivel_carregado", "Tipo de combust√≠vel carregado")
        
        # Procurar e selecionar Flex
        print("‚è≥ Aguardando radio Flex aparecer...")
        try:
            # Tentar diferentes seletores para Flex
            flex_selectors = [
                "//input[@value='Flex']",
                "//input[contains(@value, 'Flex')]",
                "//input[@name='tipoCombustivel']",
                "//input[@type='radio'][contains(@value, 'Flex')]"
            ]
            
            flex_radio = None
            for selector in flex_selectors:
                try:
                    flex_radio = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, selector))
                    )
                    print(f"‚úÖ Radio Flex encontrado com selector: {selector}")
                    break
                except:
                    continue
            
            if flex_radio:
                # Salvar estado antes da sele√ß√£o
                log_tela(driver, 9, "antes_selecao_flex", "Antes de selecionar Flex")
                
                # Selecionar Flex
                if not flex_radio.is_selected():
                    driver.execute_script("arguments[0].click();", flex_radio)
                    print("‚úÖ Flex selecionado via JavaScript")
                else:
                    print("‚úÖ Flex j√° estava selecionado")
                time.sleep(3)
                
                # Salvar estado com Flex selecionado
                log_tela(driver, 9, "flex_selecionado", "Flex selecionado")
            else:
                print("‚ö†Ô∏è Radio Flex n√£o encontrado - tentando prosseguir...")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao selecionar Flex: {e}")
            print("‚è≥ Tentando prosseguir...")
        
        # Verificar checkboxes (Kit G√°s, Blindado, Financiado)
        print("\nüîç Verificando checkboxes...")
        try:
            # Procurar checkboxes
            checkbox_patterns = [
                "kit.*gas",
                "blindado",
                "financiado"
            ]
            
            for pattern in checkbox_patterns:
                try:
                    checkbox = driver.find_element(By.XPATH, f"//input[contains(@name, '{pattern}') or contains(@id, '{pattern}')]")
                    if checkbox.is_selected():
                        print(f"‚ö†Ô∏è Checkbox '{pattern}' estava selecionado - desmarcando...")
                        driver.execute_script("arguments[0].click();", checkbox)
                        print(f"‚úÖ Checkbox '{pattern}' desmarcado")
                    else:
                        print(f"‚úÖ Checkbox '{pattern}' j√° estava desmarcado")
                except:
                    print(f"‚ÑπÔ∏è Checkbox '{pattern}' n√£o encontrado")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar checkboxes: {e}")
        
        # Salvar estado final da Tela 9
        log_tela(driver, 9, "configuracao_completa", "Configura√ß√£o completa da Tela 9")
        
        # Procurar bot√£o Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        try:
            continuar_selectors = [
                "//button[contains(., 'Continuar')]",
                "//*[contains(., 'Continuar')]",
                "//button[contains(text(), 'Continuar')]",
                "//p[contains(., 'Continuar')]"
            ]
            
            continuar_button = None
            for selector in continuar_selectors:
                try:
                    continuar_button = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    print(f"‚úÖ Bot√£o Continuar encontrado com selector: {selector}")
                    break
                except:
                    continue
            
            if continuar_button:
                # Salvar estado antes do clique
                log_tela(driver, 9, "antes_continuar", "Antes de clicar em Continuar")
                
                # Clicar
                continuar_button.click()
                print("‚úÖ Continuar clicado na Tela 9")
                
                # Aguardar carregamento da pr√≥xima p√°gina
                aguardar_carregamento_pagina(driver, 30)
                
                # Salvar estado ap√≥s clique
                log_tela(driver, 9, "apos_continuar", "Ap√≥s clicar em Continuar")
            else:
                print("‚ö†Ô∏è Bot√£o Continuar n√£o encontrado - tentando prosseguir...")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao procurar bot√£o Continuar: {e}")
            print("‚è≥ Aguardando carregamento autom√°tico...")
            time.sleep(10)
        
        return True
        
    except Exception as e:
        print(f"‚ùå **ERRO NA TELA 9:** {e}")
        log_tela(driver, 9, "erro", f"Erro: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ **RPA T√î SEGURADO - TELA 9: TIPO DE COMBUST√çVEL**")
    print("=" * 80)
    print("üéØ OBJETIVO: Implementar Tela 9 (Tipo de Combust√≠vel)")
    print("üìù NOTA: Continua√ß√£o do fluxo a partir da Tela 8")
    print("=" * 80)
    print(f"‚è∞ In√≠cio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 8
        if not navegar_ate_tela8(driver):
            print("‚ùå **FALHA AO NAVEGAR AT√â TELA 8 - PARANDO**")
            return
        
        # Tela 9: Tipo de combust√≠vel
        if tela9_tipo_combustivel(driver):
            print("‚úÖ **TELA 9 IMPLEMENTADA COM SUCESSO!**")
        else:
            print("‚ùå **FALHA NA TELA 9 - PARANDO EXECU√á√ÉO**")
            return
        
        # Resumo final
        print(f"\n{'='*80}")
        print("üéâ **RPA EXECUTADO COM SUCESSO! TELA 9 IMPLEMENTADA!**")
        print(f"{'='*80}")
        print(f"‚úÖ Total de telas executadas: 9")
        print(f"‚úÖ Tela 9: Tipo de combust√≠vel implementada")
        print(f"\nüìÅ Todos os arquivos salvos em: /opt/imediatoseguros-rpa/temp/")
        print(f"‚è∞ Fim: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        print(f"\n‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
        if driver:
            driver.save_screenshot("/opt/imediatoseguros-rpa/temp/erro-geral.png")
            print(" Screenshot do erro geral salvo")
    
    finally:
        if driver:
            driver.quit()
        if temp_dir:
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")

if __name__ == "__main__":
    main()
