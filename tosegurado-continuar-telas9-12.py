#!/usr/bin/env python3
"""
RPA T√¥ Segurado - CONTINUANDO TELAS 9-12
Continua da Tela 8 para implementar as telas restantes
"""

import json
import sys
import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def carregar_parametros():
    """Carrega par√¢metros do JSON passado via linha de comando"""
    if len(sys.argv) != 2:
        print("‚ùå ERRO: Uso correto: python3 tosegurado-continuar-telas9-12.py 'JSON_PARAMETROS'")
        sys.exit(1)
    
    try:
        json_str = sys.argv[1]
        parametros = json.loads(json_str)
        print("‚úÖ Par√¢metros carregados com sucesso!")
        return parametros
    except Exception as e:
        print(f"‚ùå ERRO ao carregar par√¢metros: {e}")
        sys.exit(1)

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def aguardar_carregamento_pagina(driver, timeout=30):
    """Aguarda o carregamento completo da p√°gina"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def aguardar_estabilizacao(driver, segundos=3):
    """Aguarda a estabiliza√ß√£o da p√°gina"""
    print(f"‚è≥ Aguardando estabiliza√ß√£o da p√°gina ({segundos}s)...")
    time.sleep(segundos)

def clicar_continuar_corrigido(driver, descricao="Continuar", timeout=20):
    """Clica no bot√£o Continuar usando o seletor CORRETO (elemento <p>)"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        # ESTRAT√âGIA CORRIGIDA: Elemento <p> com texto 'Continuar'
        try:
            elemento_continuar = WebDriverWait(driver, timeout).until(
                EC.element_to_be_clickable((By.XPATH, "//p[text()='Continuar']"))
            )
            print(f"‚úÖ {descricao} encontrado (elemento <p>), aguardando estabiliza√ß√£o...")
            aguardar_estabilizacao(driver, 3)
            
            driver.execute_script("arguments[0].scrollIntoView(true);", elemento_continuar)
            time.sleep(1)
            elemento_continuar.click()
            print(f"‚úÖ {descricao} clicado com sucesso (elemento <p>)")
            return True
            
        except:
            print(f"‚ö†Ô∏è Elemento <p> 'Continuar' n√£o encontrado, tentando JavaScript...")
            
            # JavaScript como fallback
            resultado = driver.execute_script("""
                var elementos = document.querySelectorAll('p, button, div, span');
                var continuarEncontrado = null;
                
                for (var i = 0; i < elementos.length; i++) {
                    var elemento = elementos[i];
                    if (elemento.textContent && elemento.textContent.includes('Continuar')) {
                        continuarEncontrado = elemento;
                        break;
                    }
                }
                
                if (continuarEncontrado) {
                    continuarEncontrado.click();
                    return 'Continuar clicado via JavaScript: ' + continuarEncontrado.outerHTML.substring(0, 100);
                } else {
                    return 'Continuar n√£o encontrado';
                }
            """)
            
            print(f"üéØ {resultado}")
            
            if "Continuar clicado" in resultado:
                print(f"‚úÖ {descricao} clicado via JavaScript")
                return True
            else:
                print(f"‚ùå {descricao} n√£o encontrado via JavaScript")
                return False
        
    except Exception as e:
        print(f"‚ùå Erro ao clicar em {descricao}: {e}")
        return False

def preencher_com_delay_otimizado(driver, by, value, texto, descricao="campo", timeout=20):
    """Preenche um campo com delay otimizado"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        aguardar_estabilizacao(driver, 2)
        
        elemento.clear()
        time.sleep(0.5)
        elemento.send_keys(texto)
        print(f"‚úÖ {descricao} preenchido: {texto}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao preencher {descricao}: {e}")
        return False

def clicar_radio_via_javascript(driver, texto_radio, descricao="radio", timeout=20):
    """Clica em um radio button via JavaScript"""
    try:
        print(f"‚è≥ Aguardando radio {descricao} aparecer...")
        aguardar_estabilizacao(driver, 3)
        
        script = f"""
        var elementos = document.querySelectorAll('input[type="radio"], label, span, div');
        var radioEncontrado = null;
        
        for (var i = 0; i < elementos.length; i++) {{
            var elemento = elementos[i];
            if (elemento.textContent && elemento.textContent.includes('{texto_radio}')) {{
                radioEncontrado = elemento;
                break;
            }}
        }}
        
        if (radioEncontrado) {{
            if (radioEncontrado.tagName === 'LABEL') {{
                var inputId = radioEncontrado.getAttribute('for');
                if (inputId) {{
                    var input = document.getElementById(inputId);
                    if (input) {{
                        input.click();
                        return 'Radio clicado via label: ' + inputId;
                    }}
                }}
            }}
            
            radioEncontrado.click();
            return 'Radio clicado diretamente: ' + radioEncontrado.outerHTML.substring(0, 100);
        }} else {{
            return 'Radio n√£o encontrado';
        }}
        """
        
        resultado = driver.execute_script(script)
        print(f"üéØ {resultado}")
        
        if "Radio clicado" in resultado:
            print(f"‚úÖ Radio {descricao} clicado via JavaScript")
            return True
        else:
            print(f"‚ùå Radio {descricao} n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao clicar radio {descricao}: {e}")
        return False

def salvar_estado_tela(driver, tela_num, acao, temp_dir):
    """Salva o estado atual da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    tela_dir = f"temp/tela_{tela_num:02d}"
    os.makedirs(tela_dir, exist_ok=True)
    
    html_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(driver.page_source)
    
    screenshot_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.png"
    driver.save_screenshot(screenshot_file)
    
    info_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"TELA {tela_num:02d}: {acao}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"Arquivos salvos em: {os.path.abspath(tela_dir)}\n")
    
    print(f"==================================================================================")
    print(f"üì± **TELA {tela_num:02d}: {acao}** - {timestamp}")
    print(f"==================================================================================")
    print(f"üåê URL: {driver.current_url}")
    print(f"üìÑ T√≠tulo: {driver.title}")
    print(f" A√ß√£o: {acao}")
    print(f" Arquivos salvos em: {os.path.abspath(tela_dir)}")
    
    return tela_dir

def implementar_tela9(driver, parametros):
    """Implementa a Tela 9: Dados pessoais"""
    print("\n **INICIANDO TELA 9: Dados pessoais**")
    
    try:
        # Aguardar elementos dos dados pessoais
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'nome') or contains(text(), 'Nome') or contains(text(), 'CPF') or contains(text(), 'cpf')]"))
        )
        print("‚úÖ Tela 9 carregada - dados pessoais detectados!")
        
        salvar_estado_tela(driver, 9, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 9, "dados_carregados", None)
        
        # Preencher Nome
        print(f"‚è≥ Preenchendo nome: {parametros['nome']}...")
        
        # Tentar diferentes seletores para o campo nome
        try:
            if not preencher_com_delay_otimizado(driver, By.XPATH, "//input[contains(@placeholder, 'nome') or contains(@placeholder, 'Nome') or contains(@name, 'nome') or contains(@id, 'nome')]", parametros['nome'], "nome"):
                print("‚ö†Ô∏è Campo nome n√£o encontrado - tentando prosseguir...")
        except:
            print("‚ö†Ô∏è Erro ao preencher nome - tentando prosseguir...")
        
        # Preencher CPF
        print(f"‚è≥ Preenchendo CPF: {parametros['cpf']}...")
        
        try:
            if not preencher_com_delay_otimizado(driver, By.XPATH, "//input[contains(@placeholder, 'CPF') or contains(@placeholder, 'cpf') or contains(@name, 'cpf') or contains(@id, 'cpf')]", parametros['cpf'], "CPF"):
                print("‚ö†Ô∏è Campo CPF n√£o encontrado - tentando prosseguir...")
        except:
            print("‚ö†Ô∏è Erro ao preencher CPF - tentando prosseguir...")
        
        # Preencher Data de Nascimento
        print(f"‚è≥ Preenchendo data de nascimento: {parametros['data_nascimento']}...")
        
        try:
            if not preencher_com_delay_otimizado(driver, By.XPATH, "//input[contains(@placeholder, 'nascimento') or contains(@placeholder, 'Nascimento') or contains(@name, 'nascimento') or contains(@id, 'nascimento')]", parametros['data_nascimento'], "data de nascimento"):
                print("‚ö†Ô∏è Campo data de nascimento n√£o encontrado - tentando prosseguir...")
        except:
            print("‚ö†Ô∏è Erro ao preencher data de nascimento - tentando prosseguir...")
        
        # Selecionar Sexo
        print(f"‚è≥ Selecionando sexo: {parametros['sexo']}...")
        
        if not clicar_radio_via_javascript(driver, parametros['sexo'], f"{parametros['sexo']} como sexo"):
            print(f"‚ö†Ô∏è Radio '{parametros['sexo']}' n√£o encontrado - tentando prosseguir...")
        
        # Selecionar Estado Civil
        print(f"‚è≥ Selecionando estado civil: {parametros['estado_civil']}...")
        
        if not clicar_radio_via_javascript(driver, parametros['estado_civil'], f"{parametros['estado_civil']} como estado civil"):
            print(f"‚ö†Ô∏è Radio '{parametros['estado_civil']}' n√£o encontrado - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_continuar_corrigido(driver, "bot√£o Continuar Tela 9"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 9")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 9, "apos_continuar", None)
        print("‚úÖ **TELA 9 IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 9: {e}")
        return False

def implementar_tela10(driver, parametros):
    """Implementa a Tela 10: Contato"""
    print("\n **INICIANDO TELA 10: Contato**")
    
    try:
        # Aguardar elementos de contato
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'email') or contains(text(), 'Email') or contains(text(), 'telefone') or contains(text(), 'Telefone')]"))
        )
        print("‚úÖ Tela 10 carregada - contato detectado!")
        
        salvar_estado_tela(driver, 10, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 10, "contato_carregado", None)
        
        # Preencher Email
        print(f"‚è≥ Preenchendo email: {parametros['email']}...")
        
        try:
            if not preencher_com_delay_otimizado(driver, By.XPATH, "//input[contains(@placeholder, 'email') or contains(@placeholder, 'Email') or contains(@name, 'email') or contains(@id, 'email')]", parametros['email'], "email"):
                print("‚ö†Ô∏è Campo email n√£o encontrado - tentando prosseguir...")
        except:
            print("‚ö†Ô∏è Erro ao preencher email - tentando prosseguir...")
        
        # Preencher Telefone/Celular
        print(f"‚è≥ Preenchendo celular: {parametros['celular']}...")
        
        try:
            if not preencher_com_delay_otimizado(driver, By.XPATH, "//input[contains(@placeholder, 'telefone') or contains(@placeholder, 'Telefone') or contains(@placeholder, 'celular') or contains(@name, 'telefone') or contains(@id, 'telefone')]", parametros['celular'], "celular"):
                print("‚ö†Ô∏è Campo celular n√£o encontrado - tentando prosseguir...")
        except:
            print("‚ö†Ô∏è Erro ao preencher celular - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_continuar_corrigido(driver, "bot√£o Continuar Tela 10"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 10")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 10, "apos_continuar", None)
        print("‚úÖ **TELA 10 IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 10: {e}")
        return False

def implementar_tela11(driver, parametros):
    """Implementa a Tela 11: Coberturas adicionais"""
    print("\n **INICIANDO TELA 11: Coberturas adicionais**")
    
    try:
        # Aguardar elementos de coberturas
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'cobertura') or contains(text(), 'Cobertura') or contains(text(), 'seguro') or contains(text(), 'Seguro')]"))
        )
        print("‚úÖ Tela 11 carregada - coberturas adicionais detectadas!")
        
        salvar_estado_tela(driver, 11, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 11, "coberturas_carregadas", None)
        
        # Selecionar coberturas padr√£o (se dispon√≠veis)
        print("‚è≥ Verificando coberturas dispon√≠veis...")
        
        # Tentar selecionar coberturas comuns
        coberturas_comuns = ["Assist√™ncia 24h", "Carro reserva", "Vidros", "Roubo", "Furto"]
        
        for cobertura in coberturas_comuns:
            try:
                if clicar_radio_via_javascript(driver, cobertura, f"{cobertura} como cobertura"):
                    print(f"‚úÖ Cobertura {cobertura} selecionada")
                else:
                    print(f"‚ö†Ô∏è Cobertura {cobertura} n√£o encontrada")
            except:
                print(f"‚ö†Ô∏è Erro ao selecionar cobertura {cobertura}")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_continuar_corrigido(driver, "bot√£o Continuar Tela 11"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 11")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 11, "apos_continuar", None)
        print("‚úÖ **TELA 11 IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 11: {e}")
        return False

def implementar_tela12(driver, parametros):
    """Implementa a Tela 12: Finaliza√ß√£o e resultado"""
    print("\n **INICIANDO TELA 12: Finaliza√ß√£o e resultado**")
    
    try:
        # Aguardar elementos de finaliza√ß√£o
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'finalizar') or contains(text(), 'Finalizar') or contains(text(), 'resultado') or contains(text(), 'Resultado') or contains(text(), 'cota√ß√£o') or contains(text(), 'Cota√ß√£o')]"))
        )
        print("‚úÖ Tela 12 carregada - finaliza√ß√£o detectada!")
        
        salvar_estado_tela(driver, 12, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 12, "finalizacao_carregada", None)
        
        # Aguardar processamento da cota√ß√£o
        print("‚è≥ Aguardando processamento da cota√ß√£o...")
        time.sleep(10)
        
        salvar_estado_tela(driver, 12, "processamento_aguardado", None)
        
        # Verificar se h√° bot√£o para finalizar
        try:
            if clicar_continuar_corrigido(driver, "bot√£o Finalizar Tela 12"):
                print("‚úÖ Bot√£o Finalizar clicado com sucesso!")
            else:
                print("‚ö†Ô∏è Bot√£o Finalizar n√£o encontrado - cota√ß√£o pode estar completa")
        except:
            print("‚ö†Ô∏è Erro ao clicar Finalizar - tentando prosseguir...")
        
        # Aguardar resultado final
        print("‚è≥ Aguardando resultado final...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 60):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 12, "resultado_final", None)
        print("‚úÖ **TELA 12 IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 12: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ **RPA T√î SEGURADO - CONTINUANDO TELAS 9-12**")
    print("=" * 80)
    print("üéØ OBJETIVO: Continuar da Tela 8 para implementar telas 9-12")
    print("üîß M√âTODO: Script espec√≠fico para telas finais")
    print("üìù NOTA: Assumindo que j√° estamos na Tela 8")
    print("=" * 80)
    
    # Carregar par√¢metros
    print("ÔøΩÔøΩ CARREGANDO PAR√ÇMETROS...")
    parametros = carregar_parametros()
    
    # Exibir par√¢metros carregados
    print("\nüìä PAR√ÇMETROS CARREGADOS:")
    for key, value in parametros.items():
        print(f"   {key}: {value}")
    
    inicio = datetime.now()
    print(f"\n‚è∞ In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar para a URL e come√ßar da Tela 8
        print(f"\nüåê Navegando para {parametros['url']}...")
        driver.get(parametros['url'])
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou")
            return
        
        print("‚ö†Ô∏è ATEN√á√ÉO: Este script assume que voc√™ j√° est√° na Tela 8!")
        print("‚è≥ Se n√£o estiver, navegue manualmente at√© a Tela 8 primeiro...")
        time.sleep(5)
        
        # Implementar Tela 9
        if not implementar_tela9(driver, parametros):
            print("‚ùå Erro: Falha ao implementar Tela 9")
            return
        
        # Implementar Tela 10
        if not implementar_tela10(driver, parametros):
            print("‚ùå Erro: Falha ao implementar Tela 10")
            return
        
        # Implementar Tela 11
        if not implementar_tela11(driver, parametros):
            print("‚ùå Erro: Falha ao implementar Tela 11")
            return
        
        # Implementar Tela 12
        if not implementar_tela12(driver, parametros):
            print("‚ùå Erro: Falha ao implementar Tela 12")
            return
        
        print("\n" + "=" * 80)
        print("üéâ **RPA COMPLETO! TODAS AS 12 TELAS IMPLEMENTADAS!**")
        print("=" * 80)
        print(f"‚úÖ Total de telas executadas: 12")
        print(f"‚úÖ Telas 1-8: J√° implementadas anteriormente")
        print(f"‚úÖ Tela 9: Dados pessoais - {parametros['nome']}")
        print(f"‚úÖ Tela 10: Contato - {parametros['email']}")
        print(f"‚úÖ Tela 11: Coberturas adicionais")
        print(f"‚úÖ Tela 12: Finaliza√ß√£o e resultado")
        print(f"üìÅ Todos os arquivos salvos em: /opt/imediatoseguros-rpa/temp/")
        print(f"üîß Par√¢metros utilizados: {len(parametros)} par√¢metros do JSON")
        
    except Exception as e:
        print(f"‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
    
    finally:
        # Limpeza
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")
        
        fim = datetime.now()
        print(f"‚è∞ Fim: {fim.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
