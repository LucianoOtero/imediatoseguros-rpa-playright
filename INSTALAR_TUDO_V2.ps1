# ========================================
# üîß FUN√á√ïES AUXILIARES
# ========================================

function Write-ColorMessage {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Invoke-CommandWithCheck {
    param(
        [string]$Command,
        [string]$Description
    )
    
    Write-ColorMessage "üîÑ $Description..." "Cyan"
    
    try {
        $result = Invoke-Expression $Command
        if ($LASTEXITCODE -eq 0) {
            Write-ColorMessage "‚úÖ $Description conclu√≠do!" "Green"
            return $true
        } else {
            Write-ColorMessage "‚ùå Erro em $Description" "Red"
            return $false
        }
    }
    catch {
        Write-ColorMessage "‚ùå Erro em $Description`: $($_.Exception.Message)" "Red"
        return $false
    }
}

# ========================================
# üìÅ CONFIGURA√á√ÉO INICIAL
# ========================================

# Entrar no diret√≥rio
Set-Location "C:\Users\lucia\OneDrive - Imediato Solu√ß√µes em Seguros\Imediato\imediatoseguros-rpa-playwright"
if (-not $?) {
    Write-ColorMessage "‚ùå Erro ao entrar no diret√≥rio!" "Red"
    Read-Host "Pressione Enter para sair"
    exit 1
}

Write-ColorMessage "‚úÖ Reposit√≥rio clonado com sucesso!" "Green"
Write-Host ""

# ========================================
# üì¶ INSTALA√á√ÉO DE DEPEND√äNCIAS
# ========================================

Write-ColorMessage "üì¶ INSTALANDO DEPEND√äNCIAS..." "Yellow"
Write-Host ""

# Atualizar pip
if (-not (Invoke-CommandWithCheck "python -m pip install --upgrade pip" "Atualiza√ß√£o do pip")) {
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Instalar Playwright
if (-not (Invoke-CommandWithCheck "python -m pip install playwright==1.55.0" "Instala√ß√£o do Playwright")) {
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Instalar navegadores Playwright
if (-not (Invoke-CommandWithCheck "python -m playwright install" "Instala√ß√£o dos navegadores Playwright")) {
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Instalar depend√™ncias essenciais
$dependencies = @(
    "selenium==4.35.0",
    "requests==2.32.4",
    "pandas==2.3.2",
    "numpy==2.2.6",
    "beautifulsoup4==4.13.5",
    "pydantic==2.11.7",
    "psutil==7.0.0",
    "python-dotenv==1.1.1",
    "tqdm==4.67.1",
    "colorama==0.4.6",
    "lxml==6.0.1"
)

Write-ColorMessage "üì¶ Instalando depend√™ncias essenciais..." "Cyan"
foreach ($dep in $dependencies) {
    if (-not (Invoke-CommandWithCheck "python -m pip install $dep" "Instala√ß√£o de $dep")) {
        Write-ColorMessage "‚ö†Ô∏è Erro ao instalar $dep, continuando..." "Yellow"
    }
}

Write-ColorMessage "‚úÖ Depend√™ncias instaladas com sucesso!" "Green"
Write-Host ""

# ========================================
# üîß CONFIGURA√á√ÉO DO AMBIENTE
# ========================================

Write-ColorMessage "üîß CONFIGURANDO AMBIENTE..." "Yellow"
Write-Host ""

# Criar arquivo .env
Write-ColorMessage "üîß Criando arquivo .env..." "Cyan"
$envContent = @"
# üêç ARQUIVO DE CONFIGURA√á√ÉO DO AMBIENTE
# Data de Cria√ß√£o: $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')

# Configura√ß√µes Python
PYTHONPATH=.

# Configura√ß√µes Playwright
PLAYWRIGHT_BROWSERS_PATH=C:\Users\$env:USERNAME\AppData\Local\ms-playwright

# Configura√ß√µes do RPA
RPA_LOG_LEVEL=INFO
RPA_TIMEOUT=30
RPA_RETRY_ATTEMPTS=3

# Configura√ß√µes de Autentica√ß√£o (preencher conforme necess√°rio)
# EMAIL_LOGIN=seu_email@exemplo.com
# SENHA_LOGIN=sua_senha
"@

try {
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-ColorMessage "‚úÖ Arquivo .env criado com sucesso!" "Green"
}
catch {
    Write-ColorMessage "‚ùå Erro ao criar arquivo .env!" "Red"
    Read-Host "Pressione Enter para sair"
    exit 1
}

Write-Host ""

# ========================================
# üß™ TESTE DE FUNCIONAMENTO
# ========================================

Write-ColorMessage "üß™ TESTANDO INSTALA√á√ÉO..." "Yellow"
Write-Host ""

# Testar Python
if (-not (Invoke-CommandWithCheck "python --version" "Teste do Python")) {
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Testar Playwright
if (-not (Invoke-CommandWithCheck "python -m playwright --version" "Teste do Playwright")) {
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Testar RPA
if (-not (Invoke-CommandWithCheck "python executar_rpa_imediato_playwright.py --help" "Teste do RPA")) {
    Read-Host "Pressione Enter para sair"
    exit 1
}

Write-ColorMessage "‚úÖ Todos os testes passaram!" "Green"
Write-Host ""

# ========================================
# üìã INSTRU√á√ïES FINAIS
# ========================================

Write-Host "üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green
Write-Host ""
Write-ColorMessage "üìã PR√ìXIMOS PASSOS:" "Yellow"
Write-Host ""
Write-ColorMessage "1. Configure o arquivo parametros.json com seus dados:" "Cyan"
Write-Host "   - Abra o arquivo parametros.json"
Write-Host "   - Preencha com suas informa√ß√µes pessoais"
Write-Host "   - Salve o arquivo"
Write-Host ""
Write-ColorMessage "2. Teste o RPA:" "Cyan"
Write-Host "   python executar_rpa_imediato_playwright.py --help"
Write-Host ""
Write-ColorMessage "3. Execute o RPA:" "Cyan"
Write-Host "   python executar_rpa_imediato_playwright.py"
Write-Host ""
Write-ColorMessage "üìö DOCUMENTA√á√ÉO DISPON√çVEL:" "Yellow"
Write-Host "   - AMBIENTE_DE_DESENVOLVIMENTO_COMPLETO.md"
Write-Host "   - GUIA_MIGRACAO.md"
Write-Host "   - docs/CONTROLE_VERSAO.md"
Write-Host ""
Write-ColorMessage "üîß SUPORTE: lrotero@gmail.com" "Cyan"
Write-Host ""
Write-Host "========================================" -ForegroundColor Green
Write-Host "‚úÖ AMBIENTE 100% FUNCIONAL!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green
Write-Host ""

# ========================================
# üéØ ABRIR ARQUIVOS IMPORTANTES
# ========================================

Write-ColorMessage "üéØ ABRINDO ARQUIVOS IMPORTANTES..." "Yellow"
Write-Host ""

# Perguntar se quer abrir o parametros.json
$abrirParametros = Read-Host "Deseja abrir o arquivo parametros.json para configura√ß√£o? (s/n)"
if ($abrirParametros -eq "s" -or $abrirParametros -eq "S") {
    Write-ColorMessage "üìù Abrindo parametros.json..." "Cyan"
    Start-Process "notepad.exe" -ArgumentList "parametros.json"
}

# Perguntar se quer abrir a documenta√ß√£o
$abrirDoc = Read-Host "Deseja abrir a documenta√ß√£o? (s/n)"
if ($abrirDoc -eq "s" -or $abrirDoc -eq "S") {
    Write-ColorMessage "üìö Abrindo documenta√ß√£o..." "Cyan"
    Start-Process "AMBIENTE_DE_DESENVOLVIMENTO_COMPLETO.md"
}

Write-Host ""
Write-ColorMessage "üéâ INSTALA√á√ÉO FINALIZADA!" "Green"
Read-Host "Pressione Enter para sair"
