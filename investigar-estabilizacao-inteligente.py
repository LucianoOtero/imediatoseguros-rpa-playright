#!/usr/bin/env python3
"""
Investiga√ß√£o de M√©todos Inteligentes para Detectar Estabiliza√ß√£o da P√°gina
Alternativas aos delays fixos de 20 segundos
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # Usar ChromeDriver local que j√° baixamos
    chromedriver_path = os.path.join(os.getcwd(), "chromedriver", "chromedriver-win64", "chromedriver.exe")
    
    if os.path.exists(chromedriver_path):
        print("‚úÖ Usando ChromeDriver local...")
        service = Service(chromedriver_path)
    else:
        print("‚ùå ChromeDriver local n√£o encontrado")
        return None, None
    
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def aguardar_carregamento_pagina(driver, timeout=30):
    """Aguarda o carregamento completo da p√°gina"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def detectar_estabilizacao_por_dom(driver, timeout=10, intervalo=0.5):
    """
    Detecta estabiliza√ß√£o da p√°gina monitorando mudan√ßas no DOM
    Retorna True quando o DOM para de mudar
    """
    print("ÔøΩÔøΩ **DETECTANDO ESTABILIZACAO POR DOM**")
    
    try:
        # Capturar estado inicial do DOM
        dom_inicial = driver.execute_script("return document.documentElement.outerHTML")
        mudancas = 0
        max_mudancas = 3  # M√°ximo de mudan√ßas permitidas
        
        for i in range(int(timeout / intervalo)):
            time.sleep(intervalo)
            
            # Capturar estado atual do DOM
            dom_atual = driver.execute_script("return document.documentElement.outerHTML")
            
            if dom_atual != dom_inicial:
                mudancas += 1
                print(f"   ‚ö†Ô∏è Mudan√ßa {mudancas} detectada no DOM")
                dom_inicial = dom_atual
                
                if mudancas >= max_mudancas:
                    print(f"   ‚ùå Muitas mudan√ßas no DOM ({mudancas})")
                    return False
            
            # Se n√£o houve mudan√ßas por alguns intervalos, considerar est√°vel
            if mudancas == 0 and i >= 2:
                print(f"   ‚úÖ DOM est√°vel ap√≥s {i * intervalo:.1f}s")
                return True
        
        print(f"   ‚è∞ Timeout atingido ({timeout}s)")
        return False
        
    except Exception as e:
        print(f"   ‚ùå Erro ao detectar estabiliza√ß√£o por DOM: {e}")
        return False

def detectar_estabilizacao_por_network(driver, timeout=10, intervalo=0.5):
    """
    Detecta estabiliza√ß√£o da p√°gina monitorando requisi√ß√µes de rede
    Retorna True quando n√£o h√° mais requisi√ß√µes ativas
    """
    print("ÔøΩÔøΩ **DETECTANDO ESTABILIZACAO POR NETWORK**")
    
    try:
        # Verificar se h√° requisi√ß√µes de rede ativas
        for i in range(int(timeout / intervalo)):
            time.sleep(intervalo)
            
            # Verificar se h√° requisi√ß√µes pendentes
            requests_pendentes = driver.execute_script("""
                return window.performance.getEntriesByType('resource').filter(
                    resource => resource.responseEnd === 0
                ).length;
            """)
            
            if requests_pendentes == 0:
                print(f"   ‚úÖ Sem requisi√ß√µes pendentes ap√≥s {i * intervalo:.1f}s")
                return True
            else:
                print(f"   ‚è≥ {requests_pendentes} requisi√ß√µes pendentes...")
        
        print(f"   ‚è∞ Timeout atingido ({timeout}s)")
        return False
        
    except Exception as e:
        print(f"   ‚ùå Erro ao detectar estabiliza√ß√£o por network: {e}")
        return False

def detectar_estabilizacao_por_elementos(driver, xpath_alvo, timeout=10, intervalo=0.5):
    """
    Detecta estabiliza√ß√£o da p√°gina monitorando elementos espec√≠ficos
    Retorna True quando o elemento alvo para de mudar
    """
    print(f"ÔøΩÔøΩ **DETECTANDO ESTABILIZACAO POR ELEMENTO: {xpath_alvo}**")
    
    try:
        # Aguardar elemento aparecer
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, xpath_alvo))
        )
        
        # Capturar estado inicial do elemento
        estado_inicial = elemento.get_attribute('outerHTML')
        mudancas = 0
        max_mudancas = 2
        
        for i in range(int(timeout / intervalo)):
            time.sleep(intervalo)
            
            try:
                elemento = driver.find_element(By.XPATH, xpath_alvo)
                estado_atual = elemento.get_attribute('outerHTML')
                
                if estado_atual != estado_inicial:
                    mudancas += 1
                    print(f"   ‚ö†Ô∏è Mudan√ßa {mudancas} no elemento alvo")
                    estado_inicial = estado_atual
                    
                    if mudancas >= max_mudancas:
                        print(f"   ‚ùå Muitas mudan√ßas no elemento ({mudancas})")
                        return False
                
                # Se n√£o houve mudan√ßas por alguns intervalos, considerar est√°vel
                if mudancas == 0 and i >= 2:
                    print(f"   ‚úÖ Elemento est√°vel ap√≥s {i * intervalo:.1f}s")
                    return True
                    
            except:
                print(f"   ‚ö†Ô∏è Elemento n√£o encontrado na itera√ß√£o {i}")
                continue
        
        print(f"   ‚è∞ Timeout atingido ({timeout}s)")
        return False
        
    except Exception as e:
        print(f"   ‚ùå Erro ao detectar estabiliza√ß√£o por elemento: {e}")
        return False

def detectar_estabilizacao_por_javascript(driver, timeout=10, intervalo=0.5):
    """
    Detecta estabiliza√ß√£o da p√°gina usando JavaScript avan√ßado
    Retorna True quando a p√°gina est√° realmente est√°vel
    """
    print("‚ö° **DETECTANDO ESTABILIZACAO POR JAVASCRIPT**")
    
    try:
        script = """
        // Verificar m√∫ltiplos indicadores de estabiliza√ß√£o
        var indicadores = {
            readyState: document.readyState,
            loading: document.querySelectorAll('[class*="loading"], [class*="Loading"]').length,
            spinner: document.querySelectorAll('[class*="spinner"], [class*="Spinner"]').length,
            progress: document.querySelectorAll('[class*="progress"], [class*="Progress"]').length,
            overlay: document.querySelectorAll('[class*="overlay"], [class*="Overlay"]').length,
            requests: window.performance.getEntriesByType('resource').filter(r => r.responseEnd === 0).length,
            mutations: 0
        };
        
        // Verificar se h√° muta√ß√µes no DOM
        if (window.mutationObserver) {
            var observer = new MutationObserver(function(mutations) {
                indicadores.mutations += mutations.length;
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true
            });
        }
        
        return indicadores;
        """
        
        indicadores_iniciais = driver.execute_script(script)
        print(f"   ÔøΩÔøΩ Indicadores iniciais: {indicadores_iniciais}")
        
        for i in range(int(timeout / intervalo)):
            time.sleep(intervalo)
            
            indicadores_atual = driver.execute_script(script)
            
            # Verificar se os indicadores mudaram
            mudancas = 0
            for key in indicadores_iniciais:
                if indicadores_iniciais[key] != indicadores_atual[key]:
                    mudancas += 1
            
            if mudancas == 0 and i >= 2:
                print(f"   ‚úÖ P√°gina est√°vel ap√≥s {i * intervalo:.1f}s")
                print(f"   ÔøΩÔøΩ Indicadores finais: {indicadores_atual}")
                return True
            else:
                print(f"   ‚è≥ {mudancas} indicadores mudaram...")
        
        print(f"   ‚è∞ Timeout atingido ({timeout}s)")
        return False
        
    except Exception as e:
        print(f"   ‚ùå Erro ao detectar estabiliza√ß√£o por JavaScript: {e}")
        return False

def aguardar_estabilizacao_inteligente(driver, metodo="javascript", timeout=10):
    """
    Aguarda estabiliza√ß√£o da p√°gina usando m√©todo inteligente
    """
    print(f"ÔøΩÔøΩ **AGUARDANDO ESTABILIZACAO INTELLIGENTE - M√âTODO: {metodo.upper()}**")
    
    inicio = time.time()
    
    if metodo == "dom":
        resultado = detectar_estabilizacao_por_dom(driver, timeout)
    elif metodo == "network":
        resultado = detectar_estabilizacao_por_network(driver, timeout)
    elif metodo == "javascript":
        resultado = detectar_estabilizacao_por_javascript(driver, timeout)
    else:
        print(f"   ‚ùå M√©todo '{metodo}' n√£o reconhecido")
        return False
    
    duracao = time.time() - inicio
    print(f"   ‚è±Ô∏è Tempo total: {duracao:.1f}s")
    
    return resultado

def testar_metodos_estabilizacao():
    """Testa todos os m√©todos de estabiliza√ß√£o"""
    print("ÔøΩÔøΩ **TESTANDO M√âTODOS DE ESTABILIZACAO INTELLIGENTE**")
    print("=" * 70)
    
    driver = None
    temp_dir = None
    
    try:
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar para uma p√°gina de teste
        print("\nüåê Navegando para p√°gina de teste...")
        driver.get("https://www.app.tosegurado.com.br/cotacao")
        
        if not aguardar_carregamento_pagina(driver):
            print("‚ùå Erro: P√°gina n√£o carregou")
            return
        
        print("‚úÖ P√°gina carregada")
        
        # Testar m√©todo DOM
        print("\n" + "=" * 50)
        aguardar_estabilizacao_inteligente(driver, "dom", 15)
        
        # Testar m√©todo Network
        print("\n" + "=" * 50)
        aguardar_estabilizacao_inteligente(driver, "network", 15)
        
        # Testar m√©todo JavaScript
        print("\n" + "=" * 50)
        aguardar_estabilizacao_inteligente(driver, "javascript", 15)
        
        # Testar com elemento espec√≠fico
        print("\n" + "=" * 50)
        detectar_estabilizacao_por_elementos(driver, "//button[contains(., 'Carro')]", 15)
        
        print("\n" + "=" * 70)
        print("üéØ **TESTES CONCLU√çDOS!**")
        print("üìä Compare os resultados para escolher o melhor m√©todo")
        
    except Exception as e:
        print(f"‚ùå **ERRO DURANTE TESTES:** {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")

def main():
    """Fun√ß√£o principal"""
    print("üß† **INVESTIGA√á√ÉO DE ESTABILIZACAO INTELLIGENTE**")
    print("=" * 60)
    print("ÔøΩÔøΩ OBJETIVO: Substituir delays fixos por detec√ß√£o inteligente")
    print("üîß M√âTODOS: DOM, Network, JavaScript, Elementos espec√≠ficos")
    print("=" * 60)
    
    inicio = datetime.now()
    print(f"‚è∞ In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}")
    
    testar_metodos_estabilizacao()
    
    fim = datetime.now()
    print(f"‚è∞ Fim: {fim.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
