#!/usr/bin/env python3
"""
RPA COMPLETO HEADLESS - T√î SEGURADO - COTA√á√ÉO DE SEGURO AUTO
Navega por todas as 15 telas em modo headless
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
import json
import re
import tempfile
import shutil

class ToSeguradoRPAHeadless:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.cotacao_data = {}
        self.current_step = 0
        self.temp_dir = None
        
    def setup_driver(self):
        """Configura o Chrome WebDriver em modo headless"""
        print("üîß Configurando Chrome WebDriver HEADLESS...")
        
        # Configura√ß√µes CORRETAS para servidor headless
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # MODO HEADLESS
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # Diret√≥rio tempor√°rio √öNICO e COMPLETO
        self.temp_dir = tempfile.mkdtemp(prefix="tosegurado_rpa_")
        chrome_options.add_argument(f"--user-data-dir={self.temp_dir}")
        chrome_options.add_argument(f"--data-path={self.temp_dir}")
        chrome_options.add_argument(f"--homedir={self.temp_dir}")
        
        print(f"üìÅ Diret√≥rio tempor√°rio criado: {self.temp_dir}")
        
        try:
            # Instalar e configurar ChromeDriver
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            
            # Configurar timeout
            self.driver.set_page_load_timeout(30)
            self.driver.implicitly_wait(10)
            self.wait = WebDriverWait(self.driver, 20)
            
            print("‚úÖ Chrome WebDriver HEADLESS configurado com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar Chrome: {e}")
            return False
        
    def log_step(self, step, action, details=""):
        """Registra cada passo do processo"""
        self.current_step = step
        print(f" **Tela {step}:** {action}")
        if details:
            print(f"   üìù {details}")
        print()
        
    def save_screenshot(self, step):
        """Salva screenshot de cada tela"""
        try:
            filename = f"/opt/imediatoseguros-rpa/temp/tela_{step:02d}.png"
            self.driver.save_screenshot(filename)
            print(f"   üì∏ Screenshot salvo: {filename}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao salvar screenshot: {e}")
            
    def wait_for_element(self, by, value, timeout=20):
        """Aguarda elemento aparecer na tela"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, value))
            )
            return element
        except Exception as e:
            print(f"   ‚ö†Ô∏è Elemento n√£o encontrado: {value}")
            return None
            
    def wait_for_text(self, text, timeout=20):
        """Aguarda texto aparecer na tela"""
        try:
            WebDriverWait(self.driver, timeout).until(
                lambda driver: text in driver.page_source
            )
            return True
        except Exception as e:
            print(f"   ‚ö†Ô∏è Texto n√£o encontrado: {text}")
            return False
            
    def execute_complete_flow(self):
        """Executa o fluxo completo das 15 telas"""
        try:
            print("üöÄ **INICIANDO RPA COMPLETO HEADLESS - T√î SEGURADO**")
            print("=" * 70)
            
            # Configurar driver
            if not self.setup_driver():
                return False
                
            # TELA 1: Sele√ß√£o do tipo de seguro
            self.log_step(1, "Navegando para p√°gina inicial")
            self.driver.get("https://www.app.tosegurado.com.br/imediatosolucoes")
            self.save_screenshot(1)
            
            # Aguardar p√°gina carregar
            if not self.wait_for_text("Qual seguro voc√™ deseja cotar?"):
                print("   ‚ùå P√°gina inicial n√£o carregou corretamente")
                return False
                
            print("   ‚úÖ P√°gina inicial carregada")
            
            # TELA 2: Clicar no bot√£o "Carro"
            self.log_step(2, "Clicando no bot√£o 'Carro'")
            carro_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Carro')]")
            if carro_button:
                carro_button.click()
                print("   ‚úÖ Bot√£o 'Carro' clicado")
                time.sleep(3)
                self.save_screenshot(2)
            else:
                print("   ‚ùå Bot√£o 'Carro' n√£o encontrado")
                return False
                
            # TELA 3: Formul√°rio de placa
            self.log_step(3, "Preenchendo formul√°rio de placa")
            if not self.wait_for_text("Qual √© a placa do carro?"):
                print("   ‚ùå Tela de placa n√£o carregou")
                return False
                
            # Preencher placa
            placa_input = self.wait_for_element(By.XPATH, "//input[@placeholder='ABC-1D34']")
            if placa_input:
                placa_input.clear()
                placa_input.send_keys("EED3D56")
                print("   ‚úÖ Placa preenchida: EED3D56")
                
                # Clicar em Continuar
                continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                if continuar_button:
                    continuar_button.click()
                    print("   ‚úÖ Bot√£o 'Continuar' clicado")
                    time.sleep(3)
                    self.save_screenshot(3)
                else:
                    print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Campo de placa n√£o encontrado")
                return False
                
            # TELA 4: Confirma√ß√£o do ve√≠culo
            self.log_step(4, "Confirmando dados do ve√≠culo")
            if not self.wait_for_text("O ve√≠culo COROLLA XEI"):
                print("   ‚ùå Tela de confirma√ß√£o n√£o carregou")
                return False
                
            # Selecionar "Sim"
            sim_button = self.wait_for_element(By.XPATH, "//input[@type='radio' and @value='Sim']")
            if sim_button:
                sim_button.click()
                print("   ‚úÖ 'Sim' selecionado")
                
                # Clicar em Continuar
                continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                if continuar_button:
                    continuar_button.click()
                    print("   ‚úÖ Bot√£o 'Continuar' clicado")
                    time.sleep(3)
                    self.save_screenshot(4)
                else:
                    print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Radio button 'Sim' n√£o encontrado")
                return False
                
            # TELA 5: Ve√≠culo j√° segurado
            self.log_step(5, "Respondendo sobre seguro vigente")
            if not self.wait_for_text("Esse ve√≠culo j√° est√° segurado?"):
                print("   ‚ùå Tela de seguro vigente n√£o carregou")
                return False
                
            # Selecionar "N√£o"
            nao_button = self.wait_for_element(By.XPATH, "//input[@type='radio' and @value='N√£o']")
            if nao_button:
                nao_button.click()
                print("   ‚úÖ 'N√£o' selecionado")
                
                # Clicar em Continuar
                continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                if continuar_button:
                    continuar_button.click()
                    print("   ‚úÖ Bot√£o 'Continuar' clicado")
                    time.sleep(3)
                    self.save_screenshot(5)
                else:
                    print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Radio button 'N√£o' n√£o encontrado")
                return False
                
            # TELA 6: Carrossel de coberturas
            self.log_step(6, "Pulando carrossel de coberturas")
            time.sleep(5)  # Aguardar carrossel carregar
            
            # Clicar em Continuar
            continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
            if continuar_button:
                continuar_button.click()
                print("   ‚úÖ Carrossel pulado")
                time.sleep(3)
                self.save_screenshot(6)
            else:
                print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                return False
                
            # TELA 7: Question√°rio do ve√≠culo
            self.log_step(7, "Preenchendo question√°rio do ve√≠culo")
            if not self.wait_for_text("O carro possui alguns desses itens?"):
                print("   ‚ùå Question√°rio do ve√≠culo n√£o carregou")
                return False
                
            # Selecionar "Flex"
            flex_button = self.wait_for_element(By.XPATH, "//input[@type='radio' and @value='Flex']")
            if flex_button:
                flex_button.click()
                print("   ‚úÖ 'Flex' selecionado")
                
                # Clicar em Continuar
                continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                if continuar_button:
                    continuar_button.click()
                    print("   ‚úÖ Bot√£o 'Continuar' clicado")
                    time.sleep(3)
                    self.save_screenshot(7)
                else:
                    print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Radio button 'Flex' n√£o encontrado")
                return False
                
            # TELA 8: Endere√ßo noturno
            self.log_step(8, "Preenchendo endere√ßo noturno")
            if not self.wait_for_text("Onde o carro passa a noite?"):
                print("   ‚ùå Tela de endere√ßo n√£o carregou")
                return False
                
            # Preencher CEP
            endereco_input = self.wait_for_element(By.XPATH, "//input[@placeholder*='CEP']")
            if endereco_input:
                endereco_input.clear()
                endereco_input.send_keys("03317000")
                print("   ‚úÖ CEP preenchido: 03317000")
                time.sleep(3)
                
                # Selecionar endere√ßo no bal√£o
                endereco_sugestao = self.wait_for_element(By.XPATH, "//div[contains(text(), 'Rua Serra de Botucatu')]")
                if endereco_sugestao:
                    endereco_sugestao.click()
                    print("   ‚úÖ Endere√ßo selecionado")
                    
                    # Clicar em Continuar
                    continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                    if continuar_button:
                        continuar_button.click()
                        print("   ‚úÖ Bot√£o 'Continuar' clicado")
                        time.sleep(3)
                        self.save_screenshot(8)
                    else:
                        print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                        return False
                else:
                    print("   ‚ùå Sugest√£o de endere√ßo n√£o encontrada")
                    return False
            else:
                print("   ‚ùå Campo de endere√ßo n√£o encontrado")
                return False
                
            # TELA 9: Uso do ve√≠culo
            self.log_step(9, "Selecionando uso do ve√≠culo")
            if not self.wait_for_text("Qual √© o uso do ve√≠culo?"):
                print("   ‚ùå Tela de uso do ve√≠culo n√£o carregou")
                return False
                
            # Selecionar "Pessoal"
            pessoal_button = self.wait_for_element(By.XPATH, "//input[@type='radio' and @value='Pessoal']")
            if pessoal_button:
                pessoal_button.click()
                print("   ‚úÖ 'Pessoal' selecionado")
                
                # Clicar em Continuar
                continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                if continuar_button:
                    continuar_button.click()
                    print("   ‚úÖ Bot√£o 'Continuar' clicado")
                    time.sleep(3)
                    self.save_screenshot(9)
                else:
                    print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Radio button 'Pessoal' n√£o encontrado")
                return False
                
            # TELA 10: Dados pessoais
            self.log_step(10, "Preenchendo dados pessoais")
            if not self.wait_for_text("Nessa etapa, precisamos dos seus dados pessoais"):
                print("   ‚ùå Tela de dados pessoais n√£o carregou")
                return False
                
            # Preencher dados (se n√£o estiverem preenchidos)
            # Nome, CPF, Data, etc. podem estar preenchidos automaticamente
            
            # Clicar em Continuar
            continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
            if continuar_button:
                continuar_button.click()
                print("   ‚úÖ Bot√£o 'Continuar' clicado")
                time.sleep(3)
                self.save_screenshot(10)
            else:
                print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                return False
                
            # TELA 11: Condutor principal
            self.log_step(11, "Confirmando condutor principal")
            if not self.wait_for_text("Voc√™ ser√° o condutor principal do ve√≠culo?"):
                print("   ‚ùå Tela de condutor principal n√£o carregou")
                return False
                
            # Selecionar "Sim"
            sim_button = self.wait_for_element(By.XPATH, "//input[@type='radio' and @value='Sim']")
            if sim_button:
                sim_button.click()
                print("   ‚úÖ 'Sim' selecionado")
                
                # Clicar em Continuar
                continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                if continuar_button:
                    continuar_button.click()
                    print("   ‚úÖ Bot√£o 'Continuar' clicado")
                    time.sleep(3)
                    self.save_screenshot(11)
                else:
                    print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Radio button 'Sim' n√£o encontrado")
                return False
                
            # TELA 12: Local trabalho/estudo
            self.log_step(12, "Selecionando local trabalho/estudo")
            if not self.wait_for_text("O ve√≠culo √© utilizado para ir ao local de trabalho"):
                print("   ‚ùå Tela de local trabalho/estudo n√£o carregou")
                return False
                
            # Selecionar "Local de trabalho"
            trabalho_checkbox = self.wait_for_element(By.XPATH, "//input[@type='checkbox' and @value='Local de trabalho']")
            if trabalho_checkbox:
                trabalho_checkbox.click()
                print("   ‚úÖ 'Local de trabalho' selecionado")
                
                # Clicar em Continuar
                continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                if continuar_button:
                    continuar_button.click()
                    print("   ‚úÖ Bot√£o 'Continuar' clicado")
                    time.sleep(3)
                    self.save_screenshot(12)
                else:
                    print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Checkbox 'Local de trabalho' n√£o encontrado")
                return False
                
            # TELA 13: Garagem e port√£o
            self.log_step(13, "Selecionando garagem e port√£o")
            if not self.wait_for_text("Voc√™ possui uma garagem na sua resid√™ncia?"):
                print("   ‚ùå Tela de garagem e port√£o n√£o carregou")
                return False
                
            # Selecionar "Sim" para garagem
            sim_garagem = self.wait_for_element(By.XPATH, "//input[@type='radio' and @value='Sim']")
            if sim_garagem:
                sim_garagem.click()
                print("   ‚úÖ 'Sim' para garagem selecionado")
                
                # Selecionar "Eletr√¥nico" para port√£o
                eletronico_portao = self.wait_for_element(By.XPATH, "//input[@type='radio' and @value='Eletr√¥nico']")
                if eletronico_portao:
                    eletronico_portao.click()
                    print("   ‚úÖ 'Eletr√¥nico' para port√£o selecionado")
                    
                    # Clicar em Continuar
                    continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                    if continuar_button:
                        continuar_button.click()
                        print("   ‚úÖ Bot√£o 'Continuar' clicado")
                        time.sleep(3)
                        self.save_screenshot(13)
                    else:
                        print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                        return False
                else:
                    print("   ‚ùå Radio button 'Eletr√¥nico' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Radio button 'Sim' para garagem n√£o encontrado")
                return False
                
            # TELA 14: Reside com 18-26 anos
            self.log_step(14, "Respondendo sobre residentes 18-26 anos")
            if not self.wait_for_text("Voc√™ reside com algu√©m entre 18 e 26 anos?"):
                print("   ‚ùå Tela de residentes 18-26 anos n√£o carregou")
                return False
                
            # Selecionar "N√£o"
            nao_button = self.wait_for_element(By.XPATH, "//input[@type='radio' and @value='N√£o']")
            if nao_button:
                nao_button.click()
                print("   ‚úÖ 'N√£o' selecionado")
                
                # Clicar em Continuar
                continuar_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Continuar')]")
                if continuar_button:
                    continuar_button.click()
                    print("   ‚úÖ Bot√£o 'Continuar' clicado")
                    time.sleep(3)
                    self.save_screenshot(14)
                else:
                    print("   ‚ùå Bot√£o 'Continuar' n√£o encontrado")
                    return False
            else:
                print("   ‚ùå Radio button 'N√£o' n√£o encontrado")
                return False
                
            # TELA 15: Aguardar c√°lculo autom√°tico
            self.log_step(15, "Aguardando c√°lculo autom√°tico")
            if not self.wait_for_text("Por favor, aguarde. Estamos realizando o c√°lculo para voc√™!"):
                print("   ‚ùå Tela de c√°lculo n√£o carregou")
                return False
                
            print("   ‚è≥ Aguardando c√°lculo autom√°tico...")
            time.sleep(15)  # Aguardar in√≠cio do c√°lculo
            
            # Aguardar resultado final
            if not self.wait_for_text("Parab√©ns, chegamos ao resultado final da cota√ß√£o!", timeout=180):
                print("   ‚ùå Resultado final n√£o carregou")
                return False
                
            print("   ‚úÖ C√°lculo conclu√≠do!")
            self.save_screenshot(15)
            
            # Extrair dados das cota√ß√µes
            self.extract_cotacao_data()
            
            # Finalizar clicando em "Agora n√£o"
            agora_nao_button = self.wait_for_element(By.XPATH, "//button[contains(text(), 'Agora n√£o')]")
            if agora_nao_button:
                agora_nao_button.click()
                print("   ‚úÖ 'Agora n√£o' clicado - Finalizado!")
            else:
                print("   ‚ö†Ô∏è Bot√£o 'Agora n√£o' n√£o encontrado")
                
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante execu√ß√£o: {e}")
            return False
            
    def extract_cotacao_data(self):
        """Extrai dados das cota√ß√µes"""
        print("üìä Extraindo dados das cota√ß√µes...")
        
        try:
            # Procurar por valores de cota√ß√£o
            page_source = self.driver.page_source
            
            # Padr√µes para encontrar valores
            price_patterns = [
                r'R\$\s*([\d.,]+)',
                r'([\d.,]+)\s*anual',
                r'R\$\s*([\d.,]+)\s*anual'
            ]
            
            cotacoes = []
            for pattern in price_patterns:
                matches = re.findall(pattern, page_source)
                for match in matches:
                    try:
                        valor = float(match.replace('.', '').replace(',', '.'))
                        cotacoes.append(valor)
                    except ValueError:
                        continue
                        
            # Procurar por coberturas
            coberturas = []
            cobertura_keywords = ['Franquia', 'Valor de Mercado', 'Assist√™ncia', 'Vidros', 'Carro Reserva', 
                                 'Danos Materiais', 'Danos Corporais', 'Danos Morais', 'Morte/Invalidez']
            
            for keyword in cobertura_keywords:
                if keyword in page_source:
                    coberturas.append(keyword)
                    
            self.cotacao_data = {
                'cotacoes': cotacoes,
                'coberturas': coberturas,
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
            }
            
            print(f"   ‚úÖ {len(cotacoes)} cota√ß√µes encontradas")
            print(f"   ‚úÖ {len(coberturas)} coberturas encontradas")
            
            # Salvar dados
            json_path = "/opt/imediatoseguros-rpa/temp/dados_cotacao.json"
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(self.cotacao_data, f, indent=2, ensure_ascii=False)
            print(f"   Dados salvos em: {json_path}")
            
        except Exception as e:
            print(f"   ‚ùå Erro ao extrair dados: {e}")
            
    def close(self):
        """Fecha o navegador e limpa diret√≥rio tempor√°rio"""
        if self.driver:
            self.driver.quit()
            print("üîí Navegador fechado")
            
        # Limpar diret√≥rio tempor√°rio
        if self.temp_dir:
            try:
                shutil.rmtree(self.temp_dir, ignore_errors=True)
                print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {self.temp_dir}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao remover diret√≥rio tempor√°rio: {e}")

def main():
    """Fun√ß√£o principal"""
    rpa = ToSeguradoRPAHeadless()
    
    try:
        # Executar fluxo completo
        success = rpa.execute_complete_flow()
        
        if success:
            print("\nüéâ **SUCESSO! FLUXO COMPLETO EXECUTADO!**")
            print("=" * 70)
            print("‚úÖ Todas as 15 telas navegadas com sucesso!")
            print("‚úÖ Dados das cota√ß√µes extra√≠dos!")
            print("‚úÖ Processo finalizado!")
        else:
            print("\n‚ùå **FALHA NO FLUXO**")
            print("=" * 70)
            print("‚ùå Ocorreu um erro durante a execu√ß√£o")
            print("‚ùå Verifique os logs acima para identificar o problema")
            
    except Exception as e:
        print(f"\n‚ùå **ERRO CR√çTICO:** {e}")
        
    finally:
        # Fechar navegador e limpar
        rpa.close()

if __name__ == "__main__":
    main()
