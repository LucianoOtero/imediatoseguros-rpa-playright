#!/usr/bin/env python3
"""
TESTE TELAS 1 A 11 SEQUENCIAL - IMPLEMENTA√á√ÉO COMPLETA
Teste das Telas 1-11 usando Playwright com implementa√ß√£o da Tela 11

DESCRI√á√ÉO:
- Tela 1: Sele√ß√£o do tipo de seguro (Carro)
- Tela 2: Inser√ß√£o da placa
- Tela 3: Confirma√ß√£o do ve√≠culo
- Tela 4: Ve√≠culo segurado
- Tela 5: Estimativa inicial (captura de dados)
- Tela 6: Itens do carro (combust√≠vel e checkboxes)
- Tela 7: Endere√ßo de pernoite (CEP)
- Tela 8: Finalidade do ve√≠culo (uso do ve√≠culo)
- Tela 9: Dados pessoais do segurado
- Tela 10: Condutor principal
- Tela 11: Atividade do ve√≠culo (local de trabalho/estudo)

AUTOR: Luciano Otero
DATA: 2025-09-02
VERS√ÉO: 1.5.0
STATUS: Implementa√ß√£o completa das Telas 1-11
"""

import json
import time
import re
import os
from datetime import datetime
from playwright.sync_api import sync_playwright

def exibir_mensagem(mensagem):
    """
    Exibe mensagem formatada com timestamp
    
    PAR√ÇMETROS:
        mensagem (str): Mensagem a ser exibida
    
    COMPORTAMENTO:
        1. Formata mensagem com timestamp
        2. Exibe no terminal
        3. Formato: [HH:MM:SS] mensagem
    """
    timestamp = time.strftime('%H:%M:%S')
    print(f"[{timestamp}] {mensagem}")

def navegar_tela_1_playwright(page):
    """
    TELA 1: Sele√ß√£o do tipo de seguro (Carro)
    
    DESCRI√á√ÉO:
        Navega para a Tela 1 e seleciona "Carro" como tipo de seguro
    
    ELEMENTOS IDENTIFICADOS:
        - Bot√£o "Carro": button.group
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento inicial da p√°gina
        2. Localiza o bot√£o "Carro"
        3. Verifica se est√° vis√≠vel
        4. Clica no bot√£o
        5. Aguarda transi√ß√£o para pr√≥xima tela
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 1: Selecionando Carro..."
        - "‚úÖ Bot√£o 'Carro' clicado com sucesso"
        - "‚ùå Bot√£o 'Carro' n√£o est√° vis√≠vel" (se falhar)
        - "‚ùå ERRO na Tela 1: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 1
        exibir_mensagem("üì± TELA 1: Selecionando Carro...")
        
        # PASSO 2: Aguardar carregamento inicial da p√°gina
        time.sleep(3)
        
        # PASSO 3: Localizar o bot√£o "Carro"
        botao_carro = page.locator("button.group").first
        
        # PASSO 4: Verificar se o bot√£o est√° vis√≠vel
        if botao_carro.is_visible():
            # PASSO 5: Clicar no bot√£o "Carro"
            botao_carro.click()
            
            # PASSO 6: Confirmar sucesso da a√ß√£o
            exibir_mensagem("‚úÖ Bot√£o 'Carro' clicado com sucesso")
            
            # PASSO 7: Aguardar transi√ß√£o para pr√≥xima tela
            time.sleep(3)
            
            # PASSO 8: Retornar sucesso
            return True
        else:
            # PASSO 9: Tratar caso onde bot√£o n√£o est√° vis√≠vel
            exibir_mensagem("‚ùå Bot√£o 'Carro' n√£o est√° vis√≠vel")
            return False
            
    except Exception as e:
        # PASSO 10: Tratar exce√ß√µes durante a execu√ß√£o
        exibir_mensagem(f"‚ùå ERRO na Tela 1: {str(e)}")
        return False

def navegar_tela_2_playwright(page, placa):
    """
    TELA 2: Inser√ß√£o da placa
    
    DESCRI√á√ÉO:
        Preenche o campo de placa e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS:
        - Campo placa: #placaTelaDadosPlaca
        - Bot√£o continuar: #gtm-telaDadosAutoCotarComPlacaContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Localiza o campo de placa
        2. Clica no campo para focar
        3. Preenche com a placa fornecida
        4. Localiza o bot√£o "Continuar"
        5. Clica no bot√£o para avan√ßar
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        placa (str): Placa do ve√≠culo
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 2: Inserindo placa {placa}..."
        - "‚úÖ Placa {placa} inserida com sucesso"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Campo de placa n√£o encontrado" (se falhar)
        - "‚ùå ERRO na Tela 2: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 2
        exibir_mensagem(f"üì± TELA 2: Inserindo placa {placa}...")
        
        # PASSO 2: Localizar o campo de placa
        campo_placa = page.locator("#placaTelaDadosPlaca").first
        
        # PASSO 3: Clicar no campo para focar
        campo_placa.click()
        
        # PASSO 4: Preencher com a placa
        campo_placa.fill(placa)
        
        # PASSO 5: Confirmar preenchimento
        exibir_mensagem(f"‚úÖ Placa {placa} inserida com sucesso")
        
        # PASSO 6: Localizar o bot√£o "Continuar"
        botao_continuar = page.locator("#gtm-telaDadosAutoCotarComPlacaContinuar").first
        
        # PASSO 7: Clicar no bot√£o "Continuar"
        botao_continuar.click()
        
        # PASSO 8: Confirmar clique
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 9: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 10: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 11: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 2: {str(e)}")
        return False

def navegar_tela_3_playwright(page):
    """
    TELA 3: Confirma√ß√£o do ve√≠culo
    
    DESCRI√á√ÉO:
        Confirma as informa√ß√µes do ve√≠culo clicando em "Continuar"
    
    ELEMENTOS IDENTIFICADOS:
        - Bot√£o continuar: #gtm-telaInfosAutoContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Localiza o bot√£o "Continuar"
        2. Verifica se est√° vis√≠vel
        3. Clica no bot√£o
        4. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 3: Confirmando informa√ß√µes do ve√≠culo..."
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Bot√£o 'Continuar' n√£o encontrado" (se falhar)
        - "‚ùå ERRO na Tela 3: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 3
        exibir_mensagem("üì± TELA 3: Confirmando informa√ß√µes do ve√≠culo...")
        
        # PASSO 2: Localizar o bot√£o "Continuar"
        botao_continuar = page.locator("#gtm-telaInfosAutoContinuar").first
        
        # PASSO 3: Verificar se est√° vis√≠vel
        if botao_continuar.is_visible():
            # PASSO 4: Clicar no bot√£o "Continuar"
            botao_continuar.click()
            
            # PASSO 5: Confirmar clique
            exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            
            # PASSO 6: Aguardar transi√ß√£o
            time.sleep(3)
            
            # PASSO 7: Retornar sucesso
            return True
        else:
            # PASSO 8: Tratar caso onde bot√£o n√£o est√° vis√≠vel
            exibir_mensagem("‚ùå Bot√£o 'Continuar' n√£o encontrado")
            return False
            
    except Exception as e:
        # PASSO 9: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 3: {str(e)}")
        return False

def navegar_tela_4_playwright(page, veiculo_segurado):
    """
    TELA 4: Ve√≠culo segurado
    
    DESCRI√á√ÉO:
        Responde se o ve√≠culo j√° est√° segurado baseado no par√¢metro
    
    ELEMENTOS IDENTIFICADOS:
        - Bot√£o "N√£o": #gtm-telaRenovacaoVeiculoContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Verifica o par√¢metro veiculo_segurado
        2. Localiza o bot√£o correspondente
        3. Clica no bot√£o
        4. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        veiculo_segurado (str): "Sim" ou "N√£o"
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 4: Respondendo se ve√≠culo est√° segurado..."
        - "‚úÖ Resposta '{veiculo_segurado}' selecionada com sucesso"
        - "‚ùå Op√ß√£o '{veiculo_segurado}' n√£o encontrada" (se falhar)
        - "‚ùå ERRO na Tela 4: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 4
        exibir_mensagem("üì± TELA 4: Respondendo se ve√≠culo est√° segurado...")
        
        # PASSO 2: Verificar par√¢metro e localizar bot√£o
        if veiculo_segurado == "N√£o":
            botao_nao = page.locator("#gtm-telaRenovacaoVeiculoContinuar").first
            botao_nao.click()
            exibir_mensagem("‚úÖ Resposta 'N√£o' selecionada com sucesso")
        else:
            # Implementar l√≥gica para "Sim" se necess√°rio
            exibir_mensagem(f"‚ö†Ô∏è Op√ß√£o '{veiculo_segurado}' n√£o implementada ainda")
            return False
        
        # PASSO 3: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 4: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 5: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 4: {str(e)}")
        return False

def navegar_tela_5_playwright(page):
    """
    TELA 5: Estimativa inicial - CAPTURA DE DADOS
    
    DESCRI√á√ÉO:
        Aguarda carregamento da estimativa e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS:
        - Cards de cobertura: div.bg-primary
        - Bot√£o continuar: #gtm-telaEstimativaContinuarParaCotacaoFinal
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento dos elementos de estimativa
        2. Verifica se os cards est√£o presentes
        3. Clica no bot√£o "Continuar"
        4. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 5: Aguardando carregamento da estimativa..."
        - "‚úÖ Estimativa carregada com sucesso"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Elementos da estimativa n√£o carregaram" (se falhar)
        - "‚ùå ERRO na Tela 5: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 5
        exibir_mensagem("üì± TELA 5: Aguardando carregamento da estimativa...")
        
        # PASSO 2: Aguardar carregamento inicial da tela
        time.sleep(2)
        
        # PASSO 3: Aguardar at√© que o elemento espec√≠fico apare√ßa (m√°ximo 30 segundos)
        max_tentativas = 30
        tentativa = 0
        
        while tentativa < max_tentativas:
            elemento_estimativa = page.locator("div.bg-primary")
            if elemento_estimativa.count() > 0:
                break
            time.sleep(1)
            tentativa += 1
        
        # PASSO 4: Verificar se encontrou elementos
        if tentativa >= max_tentativas:
            exibir_mensagem("‚ùå Elementos da estimativa n√£o carregaram")
            return False
        
        # PASSO 5: Confirmar carregamento
        exibir_mensagem("‚úÖ Estimativa carregada com sucesso")
        
        # PASSO 6: Localizar e clicar no bot√£o "Continuar"
        botao_continuar = page.locator("#gtm-telaEstimativaContinuarParaCotacaoFinal").first
        botao_continuar.click()
        
        # PASSO 7: Confirmar clique
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 8: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 9: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 10: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 5: {str(e)}")
        return False

def navegar_tela_6_playwright(page, combustivel, kit_gas, blindado, financiado):
    """
    TELA 6: Itens do carro - SELE√á√ÉO DE COMBUST√çVEL E CHECKBOXES
    
    DESCRI√á√ÉO:
        Seleciona o tipo de combust√≠vel, marca/desmarca checkboxes e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS:
        - Sele√ß√£o de combust√≠vel: Radio buttons com name="tipoCombustivelTelaItens"
        - Checkbox Kit Gas: input[value="Kit G√°s"]
        - Checkbox Blindado: input[value="Blindado"]
        - Checkbox Financiado: input[value="Financiado"]
        - Bot√£o continuar: #gtm-telaItensAutoContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento da Tela 6
        2. Seleciona o combust√≠vel baseado no par√¢metro
        3. Marca/desmarca checkboxes baseado nos par√¢metros
        4. Localiza o bot√£o "Continuar"
        5. Clica no bot√£o
        6. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        combustivel (str): Tipo de combust√≠vel ("Flex", "Gasolina", "Etanol", etc.)
        kit_gas (bool): Se deve marcar checkbox Kit Gas
        blindado (bool): Se deve marcar checkbox Blindado
        financiado (bool): Se deve marcar checkbox Financiado
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 6: Aguardando carregamento..."
        - "üì± TELA 6: Selecionando combust√≠vel {combustivel}..."
        - "‚úÖ Combust√≠vel {combustivel} selecionado com sucesso"
        - "üì± TELA 6: Configurando checkboxes..."
        - "‚úÖ Checkbox Kit Gas: {estado}"
        - "‚úÖ Checkbox Blindado: {estado}"
        - "‚úÖ Checkbox Financiado: {estado}"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Tela 6 n√£o carregou" (se falhar)
        - "‚ùå ERRO na Tela 6: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 6
        exibir_mensagem("üì± TELA 6: Aguardando carregamento...")
        
        # PASSO 2: Aguardar carregamento da Tela 6 (m√°ximo 20 segundos)
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            botao_continuar = page.locator("#gtm-telaItensAutoContinuar")
            if botao_continuar.count() > 0 and botao_continuar.first.is_visible():
                break
            time.sleep(1)
            tentativa += 1
        
        # PASSO 3: Verificar se encontrou o bot√£o
        if tentativa >= max_tentativas:
            exibir_mensagem("‚ùå Tela 6 n√£o carregou")
            return False
        
        # PASSO 4: Confirmar carregamento
        exibir_mensagem("‚úÖ Tela 6 carregada com sucesso")
        
        # PASSO 5: Selecionar combust√≠vel
        exibir_mensagem(f"üì± TELA 6: Selecionando combust√≠vel {combustivel}...")
        
        # PASSO 6: Mapear combust√≠vel para valor do radio button
        mapeamento_combustivel = {
            "Flex": "1",
            "Gasolina": "2", 
            "Alcool": "3",
            "Etanol": "3",  # Alcool e Etanol s√£o o mesmo
            "Diesel": "4",
            "H√≠brido": "5",
            "El√©trico": "6"
        }
        
        # PASSO 7: Obter valor do radio button para o combust√≠vel
        valor_radio = mapeamento_combustivel.get(combustivel)
        combustivel_selecionado = False
        
        if valor_radio:
            # PASSO 8: Localizar e clicar no radio button espec√≠fico
            try:
                radio_combustivel = page.locator(f"input[name='tipoCombustivelTelaItens'][value='{valor_radio}']").first
                if radio_combustivel.is_visible():
                    radio_combustivel.click()
                    combustivel_selecionado = True
                    exibir_mensagem(f"‚úÖ Combust√≠vel {combustivel} selecionado com sucesso (valor={valor_radio})")
                else:
                    exibir_mensagem(f"‚ö†Ô∏è Radio button para {combustivel} (valor={valor_radio}) n√£o est√° vis√≠vel")
            except Exception as e:
                exibir_mensagem(f"‚ö†Ô∏è Erro ao selecionar {combustivel}: {str(e)}")
        else:
            exibir_mensagem(f"‚ö†Ô∏è Combust√≠vel '{combustivel}' n√£o mapeado")
        
        # PASSO 9: Verificar se conseguiu selecionar
        if not combustivel_selecionado:
            exibir_mensagem(f"‚ö†Ô∏è Combust√≠vel {combustivel} n√£o encontrado, continuando sem sele√ß√£o")
        
        # PASSO 10: Configurar checkboxes
        exibir_mensagem("üì± TELA 6: Configurando checkboxes...")
        
        # PASSO 11: Configurar checkbox Kit Gas
        try:
            checkbox_kit_gas = page.locator('input[value="Kit G√°s"]').first
            if checkbox_kit_gas.is_visible():
                if kit_gas and not checkbox_kit_gas.is_checked():
                    checkbox_kit_gas.check()
                    exibir_mensagem("‚úÖ Checkbox Kit Gas: MARCADO")
                elif not kit_gas and checkbox_kit_gas.is_checked():
                    checkbox_kit_gas.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Kit Gas: DESMARCADO")
                else:
                    estado = "MARCADO" if kit_gas else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Kit Gas: {estado} (j√° estava correto)")
            else:
                exibir_mensagem("‚ö†Ô∏è Checkbox Kit Gas n√£o encontrado")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao configurar Kit Gas: {str(e)}")
        
        # PASSO 12: Configurar checkbox Blindado
        try:
            checkbox_blindado = page.locator('input[value="Blindado"]').first
            if checkbox_blindado.is_visible():
                if blindado and not checkbox_blindado.is_checked():
                    checkbox_blindado.check()
                    exibir_mensagem("‚úÖ Checkbox Blindado: MARCADO")
                elif not blindado and checkbox_blindado.is_checked():
                    checkbox_blindado.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Blindado: DESMARCADO")
                else:
                    estado = "MARCADO" if blindado else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Blindado: {estado} (j√° estava correto)")
            else:
                exibir_mensagem("‚ö†Ô∏è Checkbox Blindado n√£o encontrado")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao configurar Blindado: {str(e)}")
        
        # PASSO 13: Configurar checkbox Financiado
        try:
            checkbox_financiado = page.locator('input[value="Financiado"]').first
            if checkbox_financiado.is_visible():
                if financiado and not checkbox_financiado.is_checked():
                    checkbox_financiado.check()
                    exibir_mensagem("‚úÖ Checkbox Financiado: MARCADO")
                elif not financiado and checkbox_financiado.is_checked():
                    checkbox_financiado.uncheck()
                    exibir_mensagem("‚úÖ Checkbox Financiado: DESMARCADO")
                else:
                    estado = "MARCADO" if financiado else "DESMARCADO"
                    exibir_mensagem(f"‚úÖ Checkbox Financiado: {estado} (j√° estava correto)")
            else:
                exibir_mensagem("‚ö†Ô∏è Checkbox Financiado n√£o encontrado")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao configurar Financiado: {str(e)}")
        
        # PASSO 14: Clicar no bot√£o "Continuar"
        botao_continuar.first.click()
        
        # PASSO 15: Confirmar clique
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 16: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 17: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 18: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 6: {str(e)}")
        return False

def navegar_tela_7_playwright(page, cep):
    """
    TELA 7: Endere√ßo de pernoite (CEP)
    
    DESCRI√á√ÉO:
        Preenche o campo CEP, aguarda carregamento do endere√ßo e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS (baseado na grava√ß√£o):
        - Campo CEP: id=enderecoTelaEndereco
        - Sugest√£o de endere√ßo: css=.overflow-hidden
        - Bot√£o continuar: id=gtm-telaPernoiteVeiculoContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento da Tela 7
        2. Localiza o campo CEP
        3. Preenche o CEP
        4. Aguarda carregamento do endere√ßo baseado no CEP
        5. Clica no endere√ßo sugerido
        6. Clica no bot√£o "Continuar"
        7. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        cep (str): CEP do endere√ßo (ex: "03317-000")
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 7: Aguardando carregamento..."
        - "‚úÖ Tela 7 carregada com sucesso"
        - "üì± TELA 7: Preenchendo CEP..."
        - "‚úÖ CEP preenchido com sucesso"
        - "‚è≥ Aguardando carregamento do endere√ßo..."
        - "‚úÖ Endere√ßo sugerido selecionado"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Tela 7 n√£o carregou" (se falhar)
        - "‚ùå ERRO na Tela 7: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 7
        exibir_mensagem("üì± TELA 7: Aguardando carregamento...")
        
        # PASSO 2: Aguardar carregamento da Tela 7 (m√°ximo 20 segundos)
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            campo_endereco = page.locator("#enderecoTelaEndereco")
            if campo_endereco.count() > 0 and campo_endereco.first.is_visible():
                break
            time.sleep(1)
            tentativa += 1
        
        # PASSO 3: Verificar se encontrou o campo
        if tentativa >= max_tentativas:
            exibir_mensagem("‚ùå Tela 7 n√£o carregou")
            return False
        
        # PASSO 4: Confirmar carregamento
        exibir_mensagem("‚úÖ Tela 7 carregada com sucesso")
        
        # PASSO 5: Preencher CEP
        exibir_mensagem("üì± TELA 7: Preenchendo CEP...")
        
        # PASSO 6: Preencher o CEP no campo
        campo_endereco.first.fill(cep)
        exibir_mensagem(f"‚úÖ CEP preenchido: {cep}")
        time.sleep(1)
        
        # PASSO 7: Aguardar carregamento do endere√ßo baseado no CEP (5 segundos)
        exibir_mensagem("‚è≥ Aguardando carregamento do endere√ßo...")
        time.sleep(5)
        
        # PASSO 8: Tentar selecionar endere√ßo sugerido
        try:
            sugestao_endereco = page.locator("css=.overflow-hidden").first
            if sugestao_endereco.is_visible():
                sugestao_endereco.click()
                exibir_mensagem("‚úÖ Endere√ßo sugerido selecionado")
                time.sleep(1)
            else:
                exibir_mensagem("‚ö†Ô∏è Endere√ßo sugerido n√£o encontrado")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao selecionar endere√ßo: {str(e)}")
        
        # PASSO 9: Localizar e clicar no bot√£o "Continuar"
        botao_continuar = page.locator("#gtm-telaPernoiteVeiculoContinuar").first
        botao_continuar.click()
        
        # PASSO 10: Confirmar clique
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 11: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 12: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 14: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 7: {str(e)}")
        return False

def navegar_tela_8_playwright(page, uso_veiculo):
    """
    TELA 8: Finalidade do ve√≠culo (Uso do ve√≠culo)
    
    DESCRI√á√ÉO:
        Seleciona o tipo de uso do ve√≠culo baseado no par√¢metro e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS (baseado na grava√ß√£o e Selenium):
        - Detec√ß√£o da tela: XPATH com texto "finalidade", "Finalidade", "uso", "Uso", "ve√≠culo"
        - Bot√£o continuar: id=gtm-telaUsoVeiculoContinuar
        - Radio buttons: Sele√ß√£o baseada no par√¢metro uso_veiculo
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento da Tela 8
        2. Detecta elementos da tela usando XPATH
        3. Seleciona o tipo de uso baseado no par√¢metro
        4. Clica no bot√£o "Continuar"
        5. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        uso_veiculo (str): Tipo de uso do ve√≠culo ("Pessoal", "Profissional", "Motorista de aplicativo", "Taxi")
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 8: Aguardando carregamento..."
        - "‚úÖ Tela 8 carregada com sucesso"
        - "üì± TELA 8: Selecionando uso do ve√≠culo..."
        - "‚úÖ Uso '{uso_veiculo}' selecionado com sucesso"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Tela 8 n√£o carregou" (se falhar)
        - "‚ùå ERRO na Tela 8: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 8
        exibir_mensagem("üì± TELA 8: Aguardando carregamento...")
        
        # PASSO 2: Aguardar carregamento da Tela 8 (m√°ximo 20 segundos)
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            # Procurar por elementos que indicam a Tela 8
            elementos_tela8 = page.locator("xpath=//*[contains(text(), 'finalidade') or contains(text(), 'Finalidade') or contains(text(), 'uso') or contains(text(), 'Uso') or contains(text(), 've√≠culo')]")
            if elementos_tela8.count() > 0:
                break
            time.sleep(1)
            tentativa += 1
        
        # PASSO 3: Verificar se encontrou elementos da Tela 8
        if tentativa >= max_tentativas:
            exibir_mensagem("‚ùå Tela 8 n√£o carregou")
            return False
        
        # PASSO 4: Confirmar carregamento
        exibir_mensagem("‚úÖ Tela 8 carregada com sucesso")
        
        # PASSO 5: Selecionar uso do ve√≠culo
        exibir_mensagem(f"üì± TELA 8: Selecionando uso do ve√≠culo...")
        
        # PASSO 6: Selecionar o radio button baseado no par√¢metro
        try:
            # Mapear uso_veiculo para os valores corretos dos radio buttons
            mapeamento_uso = {
                "Pessoal": "Particular",
                "Profissional": "Profissional", 
                "Motorista de aplicativo": "Motorista de App",
                "Motorista de App": "Motorista de App",
                "Taxi": "Taxi",
                "T√°xi": "Taxi"  # Alternativa com acento
            }
            
            valor_radio = mapeamento_uso.get(uso_veiculo, uso_veiculo)
            
            # Localizar e clicar no radio button espec√≠fico
            seletor_radio = f'input[value="{valor_radio}"][name="finalidadeVeiculoTelaUsoVeiculo"]'
            radio_button = page.locator(seletor_radio).first
            
            if radio_button.is_visible():
                radio_button.click()
                exibir_mensagem(f"‚úÖ Uso '{uso_veiculo}' selecionado com sucesso (valor={valor_radio})")
            else:
                exibir_mensagem(f"‚ö†Ô∏è Radio button para '{uso_veiculo}' (valor={valor_radio}) n√£o est√° vis√≠vel")
                
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao selecionar uso do ve√≠culo: {str(e)}")
        
        # PASSO 7: Localizar e clicar no bot√£o "Continuar"
        botao_continuar = page.locator("#gtm-telaUsoVeiculoContinuar").first
        botao_continuar.click()
        
        # PASSO 8: Confirmar clique
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 9: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 10: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 11: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 8: {str(e)}")
        return False

def navegar_tela_9_playwright(page, nome, cpf, data_nascimento, sexo, estado_civil, email, celular):
    """
    TELA 9: Dados pessoais do segurado
    
    DESCRI√á√ÉO:
        Preenche todos os campos de dados pessoais do segurado e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS (baseado na grava√ß√£o):
        - Nome: id=nomeTelaSegurado
        - CPF: id=cpfTelaSegurado
        - Data Nascimento: id=dataNascimentoTelaSegurado
        - Sexo: Dropdown MUI (sele√ß√£o)
        - Estado Civil: Dropdown MUI (sele√ß√£o)
        - Email: id=emailTelaSegurado
        - Celular: id=celularTelaSegurado
        - Bot√£o continuar: id=gtm-telaDadosSeguradoContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento da Tela 9
        2. Detecta elementos da tela usando XPATH
        3. Preenche todos os campos de entrada
        4. Seleciona sexo e estado civil via dropdowns
        5. Clica em "Continuar"
    
    PAR√ÇMETROS:
        page: P√°gina Playwright
        nome: Nome completo do segurado
        cpf: CPF do segurado
        data_nascimento: Data de nascimento
        sexo: Sexo (Masculino/Feminino)
        estado_civil: Estado civil
        email: Email do segurado
        celular: Celular do segurado
    
    RETORNO:
        bool: True se sucesso, False se falha
    """
    try:
        # PASSO 1: Aguardar carregamento da Tela 9
        exibir_mensagem("üì± TELA 9: Aguardando carregamento...")
        
        # Aguardar at√© 20 segundos para detectar elementos da tela
        for tentativa in range(20):
            try:
                # Detectar elementos da Tela 9 usando XPATH
                elementos_tela = page.locator("xpath=//*[contains(text(), 'dados pessoais') or contains(text(), 'Dados pessoais')]")
                if elementos_tela.count() > 0:
                    exibir_mensagem("‚úÖ Tela 9 carregada com sucesso")
                    break
            except:
                pass
            
            if tentativa == 19:
                exibir_mensagem("‚ùå ERRO: Tela 9 n√£o foi detectada ap√≥s 20 segundos")
                return False
            
            time.sleep(1)
        
        # PASSO 2: Preencher Nome Completo
        exibir_mensagem("üì± TELA 9: Preenchendo nome...")
        try:
            nome_campo = page.locator("#nomeTelaSegurado")
            nome_campo.click()
            nome_campo.fill(nome)
            exibir_mensagem(f"‚úÖ Nome preenchido: {nome}")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao preencher nome: {str(e)}")
        
        # PASSO 3: Preencher CPF
        exibir_mensagem("üì± TELA 9: Preenchendo CPF...")
        try:
            cpf_campo = page.locator("#cpfTelaSegurado")
            cpf_campo.click()
            cpf_campo.fill(cpf)
            exibir_mensagem(f"‚úÖ CPF preenchido: {cpf}")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao preencher CPF: {str(e)}")
        
        # PASSO 4: Preencher Data de Nascimento
        exibir_mensagem("üì± TELA 9: Preenchendo data de nascimento...")
        try:
            data_campo = page.locator("#dataNascimentoTelaSegurado")
            data_campo.click()
            data_campo.fill(data_nascimento)
            exibir_mensagem(f"‚úÖ Data de nascimento preenchida: {data_nascimento}")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao preencher data de nascimento: {str(e)}")
        
        # PASSO 5: Selecionar Sexo
        exibir_mensagem("üì± TELA 9: Selecionando sexo...")
        try:
            # Localizar o campo de sexo
            campo_sexo = page.locator("#sexoTelaSegurado")
            if campo_sexo.is_visible():
                # Clicar no campo para abrir o dropdown
                campo_sexo.click()
                time.sleep(1)
                
                # Aguardar at√© 5 segundos para o dropdown aparecer
                for tentativa in range(5):
                    try:
                        # Procurar por elementos de lista que contenham o texto do sexo
                        opcoes_sexo = page.locator("xpath=//li[contains(text(), '" + sexo + "')]")
                        if opcoes_sexo.count() > 0:
                            opcoes_sexo.first.click()
                            exibir_mensagem(f"‚úÖ Sexo selecionado: {sexo}")
                            break
                    except:
                        pass
                    
                    if tentativa == 4:
                        exibir_mensagem(f"‚ö†Ô∏è Sexo '{sexo}' n√£o encontrado no dropdown")
                    
                    time.sleep(1)
            else:
                exibir_mensagem("‚ö†Ô∏è Campo de sexo n√£o encontrado")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao selecionar sexo: {str(e)}")
        
        # PASSO 6: Selecionar Estado Civil
        exibir_mensagem("üì± TELA 9: Selecionando estado civil...")
        try:
            # Localizar o campo de estado civil
            campo_estado_civil = page.locator("#estadoCivilTelaSegurado")
            if campo_estado_civil.is_visible():
                # Clicar no campo para abrir o dropdown
                campo_estado_civil.click()
                time.sleep(1)
                
                # Mapear estado civil do JSON para poss√≠veis varia√ß√µes na tela
                mapeamento_estado_civil = {
                    "Casado ou Uniao Estavel": ["Casado ou Uni√£o Est√°vel", "Casado ou Uniao Estavel", "Casado ou Uni√£o Estavel", "Casado ou Uniao Est√°vel"],
                    "Solteiro": ["Solteiro", "Solteiro(a)"],
                    "Divorciado": ["Divorciado", "Divorciado(a)"],
                    "Viuvo": ["Vi√∫vo", "Viuvo", "Vi√∫vo(a)", "Viuvo(a)"],
                    "Separado": ["Separado", "Separado(a)"]
                }
                
                # Obter poss√≠veis varia√ß√µes para o estado civil
                variacoes_estado_civil = mapeamento_estado_civil.get(estado_civil, [estado_civil])
                
                # Aguardar at√© 5 segundos para o dropdown aparecer
                estado_civil_selecionado = False
                for tentativa in range(5):
                    try:
                        # Tentar cada varia√ß√£o poss√≠vel
                        for variacao in variacoes_estado_civil:
                            opcoes_estado_civil = page.locator("xpath=//li[contains(text(), '" + variacao + "')]")
                            if opcoes_estado_civil.count() > 0:
                                opcoes_estado_civil.first.click()
                                exibir_mensagem(f"‚úÖ Estado civil selecionado: {estado_civil} (encontrado como '{variacao}')")
                                estado_civil_selecionado = True
                                break
                        
                        if estado_civil_selecionado:
                            break
                    except:
                        pass
                    
                    if tentativa == 4 and not estado_civil_selecionado:
                        exibir_mensagem(f"‚ö†Ô∏è Estado civil '{estado_civil}' n√£o encontrado no dropdown (tentou: {', '.join(variacoes_estado_civil)})")
                    
                    time.sleep(1)
            else:
                exibir_mensagem("‚ö†Ô∏è Campo de estado civil n√£o encontrado")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao selecionar estado civil: {str(e)}")
        
        # PASSO 7: Preencher Email
        exibir_mensagem("üì± TELA 9: Preenchendo email...")
        try:
            email_campo = page.locator("#emailTelaSegurado")
            email_campo.click()
            email_campo.fill(email)
            exibir_mensagem(f"‚úÖ Email preenchido: {email}")
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao preencher email: {str(e)}")
        
        # PASSO 8: Preencher Celular
        exibir_mensagem("üì± TELA 9: Preenchendo celular...")
        try:
            celular_campo = page.locator("#celularTelaSegurado")
            celular_campo.click()
            
            # Limpar o campo primeiro
            celular_campo.clear()
            time.sleep(0.5)
            
            # Preencher caractere por caractere para evitar problemas com m√°scara
            for digito in celular:
                celular_campo.type(digito)
                time.sleep(0.1)
            
            # Aguardar um pouco para a m√°scara processar
            time.sleep(1)
            
            # Verificar se foi preenchido corretamente
            valor_preenchido = celular_campo.input_value()
            exibir_mensagem(f"‚úÖ Celular preenchido: {celular} (valor no campo: {valor_preenchido})")
            
            if valor_preenchido != celular:
                exibir_mensagem(f"‚ö†Ô∏è ATEN√á√ÉO: Valor no campo ({valor_preenchido}) diferente do esperado ({celular})")
                
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao preencher celular: {str(e)}")
        
        # PASSO 9: Clicar em "Continuar"
        exibir_mensagem("üì± TELA 9: Clicando em 'Continuar'...")
        try:
            botao_continuar = page.locator("#gtm-telaDadosSeguradoContinuar")
            botao_continuar.click()
            exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            time.sleep(3)  # Aguardar transi√ß√£o
        except Exception as e:
            exibir_mensagem(f"‚ö†Ô∏è Erro ao clicar em 'Continuar': {str(e)}")
        
        exibir_mensagem("‚úÖ TELA 9 CONCLU√çDA!")
        return True
        
    except Exception as e:
        # PASSO 10: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 9: {str(e)}")
        return False

def navegar_tela_10_playwright(page, condutor_principal, nome_condutor=None, cpf_condutor=None, data_nascimento_condutor=None, sexo_condutor=None, estado_civil_condutor=None):
    """
    TELA 10: Condutor principal
    
    DESCRI√á√ÉO:
        Navega para a Tela 10 e seleciona se ser√° o condutor principal ou n√£o.
        Se n√£o for o condutor principal, preenche os dados do condutor.
    
    ELEMENTOS IDENTIFICADOS:
        - Radio Sim: input[value="sim"][name="condutorPrincipalTelaCondutorPrincipal"]
        - Radio N√£o: input[value="nao"][name="condutorPrincipalTelaCondutorPrincipal"]
        - Bot√£o Continuar: #gtm-telaCondutorPrincipalContinuar
        - Nome Condutor: #nomeTelaCondutorPrincipal (quando "N√£o" selecionado)
        - CPF Condutor: #cpfTelaCondutorPrincipal (quando "N√£o" selecionado)
        - Data Nascimento: #dataNascimentoTelaCondutorPrincipal (quando "N√£o" selecionado)
        - Sexo Condutor: #sexoTelaCondutorPrincipal (quando "N√£o" selecionado)
        - Estado Civil: #estadoCivilTelaCondutorPrincipal (quando "N√£o" selecionado)
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento da Tela 10
        2. Seleciona radio button baseado no par√¢metro condutor_principal
        3. Se "N√£o" selecionado, preenche campos adicionais do condutor
        4. Clica em "Continuar"
        5. Aguarda transi√ß√£o para pr√≥xima tela
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        condutor_principal: bool - True se ser√° condutor principal, False se n√£o
        nome_condutor: str - Nome do condutor (quando condutor_principal=False)
        cpf_condutor: str - CPF do condutor (quando condutor_principal=False)
        data_nascimento_condutor: str - Data de nascimento (quando condutor_principal=False)
        sexo_condutor: str - Sexo do condutor (quando condutor_principal=False)
        estado_civil_condutor: str - Estado civil do condutor (quando condutor_principal=False)
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üë• TELA 10: Condutor principal..."
        - "‚úÖ Tela 10 carregada - condutor principal detectado!"
        - "‚è≥ Selecionando 'Sim' para condutor principal..."
        - "‚è≥ Selecionando 'N√£o' para n√£o condutor principal..."
        - "‚è≥ Preenchendo dados do condutor..."
        - "‚úÖ TELA 10 IMPLEMENTADA COM SUCESSO!"
        - "‚ùå ERRO na Tela 10: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 10
        exibir_mensagem("üë• TELA 10: Condutor principal...")
        
        # PASSO 2: Aguardar carregamento da Tela 10
        # Aguardar o bot√£o continuar da Tela 10 aparecer
        page.wait_for_selector("#gtm-telaCondutorPrincipalContinuar", timeout=20000)
        exibir_mensagem("‚úÖ Tela 10 carregada - condutor principal detectado!")
        
        # PASSO 3: Aguardar estabiliza√ß√£o da p√°gina
        time.sleep(2)
        
        # PASSO 4: Selecionar op√ß√£o baseada no par√¢metro condutor_principal
        if condutor_principal:
            # CEN√ÅRIO 1: Selecionar "Sim" (Condutor Principal)
            exibir_mensagem("‚è≥ Selecionando 'Sim' para condutor principal...")
            
            # Localizar e clicar no radio button "Sim"
            radio_sim = page.locator('input[value="sim"][name="condutorPrincipalTelaCondutorPrincipal"]')
            if radio_sim.is_visible():
                radio_sim.click()
                exibir_mensagem("‚úÖ Radio 'Sim' selecionado com sucesso")
            else:
                exibir_mensagem("‚ö†Ô∏è Radio 'Sim' n√£o encontrado - tentando prosseguir...")
        else:
            # CEN√ÅRIO 2: Selecionar "N√£o" (N√£o Condutor Principal)
            exibir_mensagem("‚è≥ Selecionando 'N√£o' para n√£o condutor principal...")
            
            # Localizar e clicar no radio button "N√£o"
            radio_nao = page.locator('input[value="nao"][name="condutorPrincipalTelaCondutorPrincipal"]')
            if radio_nao.is_visible():
                radio_nao.click()
                exibir_mensagem("‚úÖ Radio 'N√£o' selecionado com sucesso")
                
                # PASSO 5: Aguardar campos do condutor aparecerem
                time.sleep(2)
                
                # PASSO 6: Preencher campos do condutor
                exibir_mensagem("‚è≥ Preenchendo dados do condutor...")
                
                # Nome do condutor
                if nome_condutor:
                    nome_campo = page.locator("#nomeTelaCondutorPrincipal")
                    if nome_campo.is_visible():
                        nome_campo.fill(nome_condutor)
                        exibir_mensagem(f"‚úÖ Nome do condutor preenchido: {nome_condutor}")
                    else:
                        exibir_mensagem("‚ö†Ô∏è Campo nome do condutor n√£o encontrado")
                
                # CPF do condutor
                if cpf_condutor:
                    cpf_campo = page.locator("#cpfTelaCondutorPrincipal")
                    if cpf_campo.is_visible():
                        cpf_campo.fill(cpf_condutor)
                        exibir_mensagem(f"‚úÖ CPF do condutor preenchido: {cpf_condutor}")
                    else:
                        exibir_mensagem("‚ö†Ô∏è Campo CPF do condutor n√£o encontrado")
                
                # Data de nascimento do condutor
                if data_nascimento_condutor:
                    data_campo = page.locator("#dataNascimentoTelaCondutorPrincipal")
                    if data_campo.is_visible():
                        data_campo.fill(data_nascimento_condutor)
                        exibir_mensagem(f"‚úÖ Data de nascimento do condutor preenchida: {data_nascimento_condutor}")
                    else:
                        exibir_mensagem("‚ö†Ô∏è Campo data de nascimento do condutor n√£o encontrado")
                
                # Sexo do condutor (dropdown MUI)
                if sexo_condutor:
                    sexo_campo = page.locator("#sexoTelaCondutorPrincipal")
                    if sexo_campo.is_visible():
                        # Clicar no campo para abrir o dropdown
                        sexo_campo.click()
                        time.sleep(1)
                        
                        # Aguardar a lista aparecer e clicar na op√ß√£o
                        try:
                            page.wait_for_selector("ul", timeout=5000)
                            opcao_sexo = page.locator(f'xpath=//li[contains(text(), "{sexo_condutor}")]')
                            if opcao_sexo.is_visible():
                                opcao_sexo.click()
                                exibir_mensagem(f"‚úÖ Sexo do condutor selecionado: {sexo_condutor}")
                            else:
                                exibir_mensagem(f"‚ö†Ô∏è Op√ß√£o de sexo '{sexo_condutor}' n√£o encontrada")
                        except:
                            exibir_mensagem("‚ö†Ô∏è Erro ao selecionar sexo do condutor")
                    else:
                        exibir_mensagem("‚ö†Ô∏è Campo sexo do condutor n√£o encontrado")
                
                # Estado civil do condutor (dropdown MUI)
                if estado_civil_condutor:
                    estado_civil_campo = page.locator("#estadoCivilTelaCondutorPrincipal")
                    if estado_civil_campo.is_visible():
                        # Clicar no campo para abrir o dropdown
                        estado_civil_campo.click()
                        time.sleep(1)
                        
                        # Aguardar a lista aparecer e clicar na op√ß√£o
                        try:
                            page.wait_for_selector("ul", timeout=5000)
                            
                            # Mapeamento para varia√ß√µes de acento
                            mapeamento_estado_civil = {
                                "Casado ou Uniao Estavel": "Casado ou Uni√£o Est√°vel"
                            }
                            
                            texto_busca = mapeamento_estado_civil.get(estado_civil_condutor, estado_civil_condutor)
                            opcao_estado_civil = page.locator(f'xpath=//li[contains(text(), "{texto_busca}")]')
                            
                            if opcao_estado_civil.is_visible():
                                opcao_estado_civil.click()
                                exibir_mensagem(f"‚úÖ Estado civil do condutor selecionado: {estado_civil_condutor}")
                            else:
                                exibir_mensagem(f"‚ö†Ô∏è Op√ß√£o de estado civil '{estado_civil_condutor}' n√£o encontrada")
                        except:
                            exibir_mensagem("‚ö†Ô∏è Erro ao selecionar estado civil do condutor")
                    else:
                        exibir_mensagem("‚ö†Ô∏è Campo estado civil do condutor n√£o encontrado")
            else:
                exibir_mensagem("‚ö†Ô∏è Radio 'N√£o' n√£o encontrado - tentando prosseguir...")
        
        # PASSO 7: Aguardar estabiliza√ß√£o ap√≥s sele√ß√£o
        time.sleep(2)
        
        # PASSO 8: Clicar em "Continuar"
        exibir_mensagem("‚è≥ Clicando em 'Continuar'...")
        
        botao_continuar = page.locator("#gtm-telaCondutorPrincipalContinuar")
        if botao_continuar.is_visible():
            botao_continuar.click()
            exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            
            # PASSO 9: Aguardar transi√ß√£o para pr√≥xima tela
            time.sleep(3)
            
            # PASSO 10: Confirmar sucesso
            exibir_mensagem("‚úÖ TELA 10 IMPLEMENTADA COM SUCESSO!")
            return True
        else:
            exibir_mensagem("‚ùå Bot√£o 'Continuar' n√£o encontrado")
            return False
            
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na Tela 10: {str(e)}")
        return False

def navegar_tela_11_playwright(page, local_de_trabalho, estacionamento_proprio_local_de_trabalho, local_de_estudo, estacionamento_proprio_local_de_estudo):
    """
    TELA 11: Atividade do ve√≠culo
    
    DESCRI√á√ÉO:
        Navega para a Tela 11 e seleciona se o ve√≠culo √© utilizado para ir ao local de trabalho e/ou estudo.
        Se selecionar local de trabalho, aparece checkbox de estacionamento pr√≥prio do trabalho.
        Se selecionar local de estudo, aparece checkbox de estacionamento pr√≥prio do estudo.
        
    ELEMENTOS IDENTIFICADOS:
        - Checkbox Local de Trabalho: input[type="checkbox"][value="trabalho"]
        - Checkbox Local de Estudo: input[type="checkbox"][value="estudo"]
        - Checkbox Estacionamento Local de Trabalho: input[type="checkbox"][data-gtm-form-interact-field-id="10"]
        - Checkbox Estacionamento Local de Estudo: input[type="checkbox"][data-gtm-form-interact-field-id="11"]
        - Bot√£o Continuar: #gtm-telaAtividadeVeiculoContinuar
        
    PAR√ÇMETROS:
        - local_de_trabalho: bool - Se o ve√≠culo √© usado para ir ao trabalho
        - estacionamento_proprio_local_de_trabalho: bool - Se h√° estacionamento pr√≥prio no trabalho
        - local_de_estudo: bool - Se o ve√≠culo √© usado para ir ao estudo
        - estacionamento_proprio_local_de_estudo: bool - Se h√° estacionamento pr√≥prio no estudo
    """
    try:
        exibir_mensagem("\n" + "="*50)
        exibir_mensagem("üéØ TELA 11: ATIVIDADE DO VE√çCULO")
        exibir_mensagem("="*50)
        
        # Aguarda o carregamento da Tela 11
        exibir_mensagem("‚è≥ Aguardando carregamento da Tela 11...")
        page.wait_for_selector("#gtm-telaAtividadeVeiculoContinuar", timeout=10000)
        time.sleep(2)  # Aguarda estabiliza√ß√£o
        
        exibir_mensagem("‚úÖ Tela 11 carregada - atividade do ve√≠culo detectada!")
        
        # PASSO 1: Seleciona checkbox Local de Trabalho se necess√°rio
        if local_de_trabalho:
            exibir_mensagem("üìã Marcando checkbox 'Local de Trabalho'...")
            checkbox_trabalho = page.locator('input[type="checkbox"][value="trabalho"]')
            if not checkbox_trabalho.is_checked():
                checkbox_trabalho.check()
                exibir_mensagem("‚úÖ Checkbox 'Local de Trabalho' marcado!")
                time.sleep(1)  # Aguarda aparecimento do checkbox de estacionamento
            else:
                exibir_mensagem("‚ÑπÔ∏è Checkbox 'Local de Trabalho' j√° estava marcado")
        else:
            exibir_mensagem("‚ÑπÔ∏è Local de Trabalho: N√£o selecionado")
        
        # PASSO 2: Seleciona checkbox Local de Estudo se necess√°rio
        if local_de_estudo:
            exibir_mensagem("üìã Marcando checkbox 'Local de Estudo'...")
            checkbox_estudo = page.locator('input[type="checkbox"][value="estudo"]')
            if not checkbox_estudo.is_checked():
                checkbox_estudo.check()
                exibir_mensagem("‚úÖ Checkbox 'Local de Estudo' marcado!")
                time.sleep(1)  # Aguarda aparecimento do checkbox de estacionamento
            else:
                exibir_mensagem("‚ÑπÔ∏è Checkbox 'Local de Estudo' j√° estava marcado")
        else:
            exibir_mensagem("‚ÑπÔ∏è Local de Estudo: N√£o selecionado")
        
        # PASSO 3: Configurar estacionamento do trabalho (se local_de_trabalho = true)
        if local_de_trabalho:
            exibir_mensagem("üÖøÔ∏è Configurando estacionamento do trabalho...")
            try:
                checkbox_estacionamento_trabalho = page.locator('input[type="checkbox"][data-gtm-form-interact-field-id="10"]')
                if checkbox_estacionamento_trabalho.is_visible():
                    if estacionamento_proprio_local_de_trabalho and not checkbox_estacionamento_trabalho.is_checked():
                        checkbox_estacionamento_trabalho.check()
                        exibir_mensagem("‚úÖ Estacionamento pr√≥prio do trabalho: MARCADO")
                    elif not estacionamento_proprio_local_de_trabalho and checkbox_estacionamento_trabalho.is_checked():
                        checkbox_estacionamento_trabalho.uncheck()
                        exibir_mensagem("‚úÖ Estacionamento pr√≥prio do trabalho: DESMARCADO")
                    else:
                        estado = "MARCADO" if estacionamento_proprio_local_de_trabalho else "DESMARCADO"
                        exibir_mensagem(f"‚úÖ Estacionamento pr√≥prio do trabalho: {estado} (j√° estava correto)")
                else:
                    exibir_mensagem("‚ö†Ô∏è Checkbox estacionamento do trabalho n√£o encontrado")
            except Exception as e:
                exibir_mensagem(f"‚ö†Ô∏è Erro ao configurar estacionamento do trabalho: {str(e)}")
        
        # PASSO 4: Configurar estacionamento do estudo (se local_de_estudo = true)
        if local_de_estudo:
            exibir_mensagem("üÖøÔ∏è Configurando estacionamento do estudo...")
            try:
                checkbox_estacionamento_estudo = page.locator('input[type="checkbox"][data-gtm-form-interact-field-id="11"]')
                if checkbox_estacionamento_estudo.is_visible():
                    if estacionamento_proprio_local_de_estudo and not checkbox_estacionamento_estudo.is_checked():
                        checkbox_estacionamento_estudo.check()
                        exibir_mensagem("‚úÖ Estacionamento pr√≥prio do estudo: MARCADO")
                    elif not estacionamento_proprio_local_de_estudo and checkbox_estacionamento_estudo.is_checked():
                        checkbox_estacionamento_estudo.uncheck()
                        exibir_mensagem("‚úÖ Estacionamento pr√≥prio do estudo: DESMARCADO")
                    else:
                        estado = "MARCADO" if estacionamento_proprio_local_de_estudo else "DESMARCADO"
                        exibir_mensagem(f"‚úÖ Estacionamento pr√≥prio do estudo: {estado} (j√° estava correto)")
                else:
                    exibir_mensagem("‚ö†Ô∏è Checkbox estacionamento do estudo n√£o encontrado")
            except Exception as e:
                exibir_mensagem(f"‚ö†Ô∏è Erro ao configurar estacionamento do estudo: {str(e)}")
        
        # PASSO 5: Aguardar estabiliza√ß√£o ap√≥s todas as configura√ß√µes
        time.sleep(2)
        
        # PASSO 6: Clica no bot√£o Continuar
        exibir_mensagem("üîÑ Clicando em 'Continuar'...")
        botao_continuar = page.locator("#gtm-telaAtividadeVeiculoContinuar")
        botao_continuar.click()
        
        # PASSO 7: Aguarda navega√ß√£o
        time.sleep(2)
        exibir_mensagem("‚úÖ Navega√ß√£o para pr√≥xima tela realizada!")
        
        return True
        
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO na Tela 11: {str(e)}")
        return False


def main():
    """
    Fun√ß√£o principal que executa o teste das Telas 1-9 sequencialmente
    
    FLUXO:
        1. Carrega par√¢metros do JSON
        2. Configura browser Playwright
        3. Executa Tela 1 ‚Üí Tela 2 ‚Üí Tela 3 ‚Üí Tela 4 ‚Üí Tela 5 ‚Üí Tela 6 ‚Üí Tela 7 ‚Üí Tela 8 ‚Üí Tela 9
        4. Exibe resultados de cada tela
        5. Fecha browser
    
    RETORNO:
        int: 0 se sucesso, 1 se falha
    """
    try:
        # Carregar par√¢metros
        with open('config/parametros.json', 'r', encoding='utf-8') as f:
            parametros = json.load(f)
        
        exibir_mensagem("üöÄ INICIANDO TESTE TELAS 1 A 9 SEQUENCIAL")
        exibir_mensagem("=" * 60)
        exibir_mensagem(f"üöó Placa: {parametros['placa']}")
        exibir_mensagem(f"üìã Ve√≠culo segurado: {parametros['veiculo_segurado']}")
        
        # Configurar browser
        with sync_playwright() as playwright:
            browser = playwright.chromium.launch(headless=False)
            context = browser.new_context(
                viewport={'width': 1139, 'height': 1378},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            )
            page = context.new_page()
            
            # Navegar para o site
            url_base = "https://www.app.tosegurado.com.br/imediatoseguros"
            exibir_mensagem(f"üåê Navegando para: {url_base}")
            
            page.goto(url_base)
            time.sleep(3)  # Aguardar carregamento inicial
            exibir_mensagem("‚úÖ P√°gina carregada")
            
            # Executar Telas 1-6 sequencialmente
            telas_executadas = 0
            
            # TELA 1
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_1_playwright(page):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 1 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 1 FALHOU!")
                return 1
            
            # TELA 2
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_2_playwright(page, parametros['placa']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 2 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 2 FALHOU!")
                return 1
            
            # TELA 3
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_3_playwright(page):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 3 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 3 FALHOU!")
                return 1
            
            # TELA 4
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_4_playwright(page, parametros['veiculo_segurado']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 4 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 4 FALHOU!")
                return 1
            
            # TELA 5
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_5_playwright(page):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 5 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 5 FALHOU!")
                return 1
            
            # TELA 6
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_6_playwright(page, parametros['combustivel'], parametros['kit_gas'], parametros['blindado'], parametros['financiado']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 6 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 6 FALHOU!")
                return 1
            
            # TELA 7
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_7_playwright(page, parametros['cep']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 7 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 7 FALHOU!")
                return 1
            
            # TELA 8
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_8_playwright(page, parametros['uso_veiculo']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 8 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 8 FALHOU!")
                return 1
            
            # TELA 9
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_9_playwright(page, parametros['nome'], parametros['cpf'], parametros['data_nascimento'], parametros['sexo'], parametros['estado_civil'], parametros['email'], parametros['celular']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 9 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 9 FALHOU!")
                return 1
            
            # TELA 10
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_10_playwright(page, parametros['condutor_principal'], parametros['nome_condutor'], parametros['cpf_condutor'], parametros['data_nascimento_condutor'], parametros['sexo_condutor'], parametros['estado_civil_condutor']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 10 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 10 FALHOU!")
                return 1
            
            # TELA 11
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_11_playwright(page, parametros['local_de_trabalho'], parametros['estacionamento_proprio_local_de_trabalho'], parametros['local_de_estudo'], parametros['estacionamento_proprio_local_de_estudo']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 11 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 11 FALHOU!")
                return 1
            
            # Resultado final
            exibir_mensagem("\n" + "="*60)
            exibir_mensagem("üéâ TESTE TELAS 1 A 11 CONCLU√çDO COM SUCESSO!")
            exibir_mensagem(f"‚úÖ Total de telas executadas: {telas_executadas}/11")
            exibir_mensagem("‚úÖ Todas as telas funcionaram corretamente")
            exibir_mensagem("‚úÖ Navega√ß√£o sequencial realizada com sucesso")
            
            # Aguardar para visualizar resultado final
            exibir_mensagem("\n‚è≥ Aguardando 10 segundos para visualizar resultado...")
            time.sleep(10)
            
            return 0
            
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO GERAL: {str(e)}")
        return 1

if __name__ == "__main__":
    exit(main())
