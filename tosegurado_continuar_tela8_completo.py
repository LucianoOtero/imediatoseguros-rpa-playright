#!/usr/bin/env python3
"""
RPA T√¥ Segurado - Continuando da Tela 8 (COMPLETO)
Continua o fluxo a partir da Tela 8 com todas as op√ß√µes documentadas
"""

import time
import tempfile
import shutil
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes headless"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # Criar diret√≥rio tempor√°rio √∫nico
    temp_dir = tempfile.mkdtemp()
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    return driver, temp_dir

def navegar_ate_tela8(driver):
    """Navega at√© a Tela 8 (tipo de combust√≠vel)"""
    print("üöÄ **NAVEGANDO AT√â TELA 8...**")
    
    # Tela 1: Selecionar Carro
    driver.get("https://www.app.tosegurado.com.br/imediatosolucoes")
    time.sleep(3)
    
    carro_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
    )
    carro_btn.click()
    print("‚úÖ Tela 1: Carro selecionado")
    
    # Tela 2: Inserir placa
    placa_input = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, "//input[@placeholder='ABC-1D34']"))
    )
    placa_input.clear()
    placa_input.send_keys("EED3D56")
    print("‚úÖ Tela 2: Placa EED3D56 inserida")
    
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//p[text()='Continuar']"))
    )
    continuar_btn.click()
    print("‚úÖ Tela 3: Continuar clicado")
    
    # Tela 4: Aguardar carregamento
    time.sleep(3)
    
    # Tela 5: Confirmar ve√≠culo
    sim_radio = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, "//input[@value='Sim']"))
    )
    driver.execute_script("arguments[0].click();", sim_radio)
    print("‚úÖ Tela 5: Ve√≠culo confirmado")
    
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//p[text()='Continuar']"))
    )
    continuar_btn.click()
    print("‚úÖ Tela 6: Continuar clicado")
    
    # Aguardar Tela 6 carregar
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'j√° est√° segurado')]"))
    )
    print("‚úÖ Tela 6 carregada - ve√≠culo j√° segurado")
    
    # Clicar em Continuar na Tela 6
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//p[text()='Continuar']"))
    )
    continuar_btn.click()
    print("‚úÖ Continuar clicado na Tela 6")
    
    # Aguardar Tela 7 carregar (estimativa inicial)
    WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'estimativa inicial')]"))
    )
    print("‚úÖ Tela 7 carregada - estimativa inicial")
    
    # Clicar em Continuar na Tela 7
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Continuar')]"))
    )
    continuar_btn.click()
    print("‚úÖ Continuar clicado na Tela 7")
    
    # Aguardar Tela 8 carregar (tipo de combust√≠vel)
    WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Tipo de Combust√≠vel')]"))
    )
    print("‚úÖ Tela 8 carregada - tipo de combust√≠vel")
    
    return True

def preencher_tela8(driver):
    """Preenche a Tela 8 (tipo de combust√≠vel e checkboxes)"""
    print("\n‚õΩ **PREENCHENDO TELA 8...**")
    
    try:
        # ========================================
        # TIPO DE COMBUST√çVEL - OP√á√ïES DISPON√çVEIS:
        # ========================================
        # ‚úÖ Flex (SELECIONADO ATUALMENTE)
        # üîÑ Gasolina (OP√á√ÉO FUTURA)
        # üîÑ √Ålcool (OP√á√ÉO FUTURA)
        # üîÑ Diesel (OP√á√ÉO FUTURA)
        # ÔøΩÔøΩ H√≠brido (OP√á√ÉO FUTURA)
        # üîÑ El√©trico (OP√á√ÉO FUTURA)
        # ========================================
        
        # Selecionar Flex (combust√≠vel)
        flex_radio = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Flex')]"))
        )
        driver.execute_script("arguments[0].click();", flex_radio)
        print("‚úÖ Flex selecionado")
        
        # ========================================
        # CHECKBOXES - OP√á√ïES DISPON√çVEIS:
        # ========================================
        # ÔøΩÔøΩ Kit G√°s (OP√á√ÉO FUTURA - n√£o selecionado)
        # üîÑ Blindado (OP√á√ÉO FUTURA - n√£o selecionado)
        # üîÑ Financiado (OP√á√ÉO FUTURA - n√£o selecionado)
        # ========================================
        
        # Deixar checkboxes em branco (Kit G√°s, Blindado, Financiado)
        print("‚úÖ Checkboxes deixados em branco")
        
        # Clicar em Continuar
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Continuar')]"))
        )
        continuar_btn.click()
        print("‚úÖ Continuar clicado na Tela 8")
        
        # Aguardar carregamento da pr√≥xima tela
        time.sleep(5)
        
        # Verificar se carregou a Tela 9 (endere√ßo onde o carro passa a noite)
        if "CEP" in driver.page_source or "endere√ßo" in driver.page_source.lower():
            print("‚úÖ Tela 9 carregada - endere√ßo onde o carro passa a noite")
            return True
        else:
            print("‚ùå Tela 9 n√£o carregou como esperado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao preencher Tela 8: {e}")
        return False

def extrair_dados_tela8(driver):
    """Extrai os dados da Tela 8 com todas as op√ß√µes documentadas"""
    print("\nüìä **EXTRAINDO DADOS DA TELA 8...**")
    
    try:
        # Salvar HTML da Tela 8
        with open("/opt/imediatoseguros-rpa/temp/tela8_combustivel_completo.html", "w", encoding="utf-8") as f:
            f.write(driver.page_source)
        print(" HTML da Tela 8 salvo")
        
        # Salvar dados da Tela 8 com todas as op√ß√µes
        with open("/opt/imediatoseguros-rpa/temp/dados_tela8_completo.txt", "w", encoding="utf-8") as f:
            f.write("=== DADOS DA TELA 8 (TIPO DE COMBUST√çVEL) ===\n\n")
            
            f.write("‚õΩ TIPOS DE COMBUST√çVEL DISPON√çVEIS:\n")
            f.write("‚úÖ Flex (SELECIONADO ATUALMENTE)\n")
            f.write("üîÑ Gasolina (OP√á√ÉO FUTURA)\n")
            f.write("üîÑ √Ålcool (OP√á√ÉO FUTURA)\n")
            f.write("üîÑ Diesel (OP√á√ÉO FUTURA)\n")
            f.write("ÔøΩÔøΩ H√≠brido (OP√á√ÉO FUTURA)\n")
            f.write("üîÑ El√©trico (OP√á√ÉO FUTURA)\n\n")
            
            f.write("ÔøΩÔøΩ CHECKBOXES DISPON√çVEIS:\n")
            f.write("ÔøΩÔøΩ Kit G√°s (OP√á√ÉO FUTURA - n√£o selecionado)\n")
            f.write("üîÑ Blindado (OP√á√ÉO FUTURA - n√£o selecionado)\n")
            f.write("üîÑ Financiado (OP√á√ÉO FUTURA - n√£o selecionado)\n\n")
            
            f.write("ÔøΩÔøΩ CONFIGURA√á√ÉO ATUAL:\n")
            f.write("- Combust√≠vel: Flex\n")
            f.write("- Kit G√°s: N√£o selecionado\n")
            f.write("- Blindado: N√£o selecionado\n")
            f.write("- Financiado: N√£o selecionado\n\n")
            
            f.write("üí° NOTAS PARA FUTURO:\n")
            f.write("- Estes campos podem ser modificados para aprimorar o c√°lculo\n")
            f.write("- Diferentes combust√≠veis podem alterar o valor do seguro\n")
            f.write("- Checkboxes adicionais podem modificar a cobertura\n")
        
        print("üìù Dados da Tela 8 salvos com todas as op√ß√µes")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao extrair dados da Tela 8: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    driver = None
    temp_dir = None
    
    try:
        print("üöÄ **RPA T√î SEGURADO - CONTINUANDO DA TELA 8 (COMPLETO)**")
        print("=" * 70)
        
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 8
        if not navegar_ate_tela8(driver):
            print("‚ùå Falha ao navegar at√© Tela 8")
            return
        
        # Extrair dados da Tela 8
        extrair_dados_tela8(driver)
        
        # Preencher e continuar da Tela 8
        if preencher_tela8(driver):
            print("\n **TELA 8 CONCLU√çDA COM SUCESSO!**")
            print("‚úÖ Flex selecionado")
            print("‚úÖ Checkboxes deixados em branco")
            print("‚úÖ Navegou para Tela 9")
            print("üìã Todas as op√ß√µes futuras documentadas")
        else:
            print("\n‚ùå **FALHA AO CONTINUAR PARA TELA 9**")
        
    except Exception as e:
        print(f"\n‚ùå **ERRO DURANTE EXECU√á√ÉO:** {e}")
        
    finally:
        if driver:
            driver.quit()
        if temp_dir:
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")

if __name__ == "__main__":
    main()
