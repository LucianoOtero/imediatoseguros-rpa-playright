#!/usr/bin/env python3
"""
RPA SIMPLES E EST√ÅVEL - T√î SEGURADO
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
import tempfile
import shutil

def main():
    print("üöÄ **RPA SIMPLES E EST√ÅVEL - T√î SEGURADO**")
    print("=" * 50)
    
    try:
        # Configurar Chrome headless
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        
        temp_dir = tempfile.mkdtemp(prefix="tosegurado_simples_")
        chrome_options.add_argument(f"--user-data-dir={temp_dir}")
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.set_page_load_timeout(30)
        driver.implicitly_wait(10)
        wait = WebDriverWait(driver, 20)
        
        print("‚úÖ Chrome configurado")
        
        # TELA 1: Navegar para p√°gina inicial
        print("\n **Tela 1:** Navegando para p√°gina inicial")
        driver.get("https://www.app.tosegurado.com.br/imediatosolucoes")
        time.sleep(3)
        
        # Verificar se carregou
        if "Qual seguro voc√™ deseja cotar?" not in driver.page_source:
            print("   ‚ùå P√°gina inicial n√£o carregou")
            return False
            
        print("   ‚úÖ P√°gina inicial carregada")
        
        # TELA 2: Clicar no bot√£o "Carro" - COM PROTE√á√ÉO STALE
        print("\n **Tela 2:** Clicando no bot√£o 'Carro'")
        
        # Aguardar elemento estar presente E clic√°vel
        carro_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
        )
        
        # Scroll para o elemento
        driver.execute_script("arguments[0].scrollIntoView(true);", carro_button)
        time.sleep(1)
        
        # Clicar no elemento
        carro_button.click()
        print("   ‚úÖ Bot√£o 'Carro' clicado")
        time.sleep(3)
        
        # TELA 3: Verificar se formul√°rio de placa carregou
        print("\n **Tela 3:** Verificando formul√°rio de placa")
        
        if "Qual √© a placa do carro?" not in driver.page_source:
            print("   ‚ùå Tela de placa n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de placa carregada")
        
        # Preencher placa
        placa_input = wait.until(
            EC.presence_of_element_located((By.XPATH, "//input[@placeholder='ABC-1D34']"))
        )
        
        placa_input.clear()
        placa_input.send_keys("EED3D56")
        print("   ‚úÖ Placa preenchida: EED3D56")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 4: Verificar confirma√ß√£o do ve√≠culo
        print("\n **Tela 4:** Verificando confirma√ß√£o do ve√≠culo")
        
        if "O ve√≠culo COROLLA XEI" not in driver.page_source:
            print("   ‚ùå Tela de confirma√ß√£o n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de confirma√ß√£o carregada")
        
        # Selecionar "Sim"
        sim_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='radio'][1]"))
        )
        sim_button.click()
        print("   ‚úÖ 'Sim' selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 5: Verificar ve√≠culo j√° segurado
        print("\n **Tela 5:** Verificando ve√≠culo j√° segurado")
        
        if "Esse ve√≠culo j√° est√° segurado?" not in driver.page_source:
            print("   ‚ùå Tela de seguro vigente n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de seguro vigente carregada")
        
        # Selecionar "N√£o"
        nao_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='radio'][1]"))
        )
        nao_button.click()
        print("   ‚úÖ 'N√£o' selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 6: Pular carrossel de coberturas
        print("\n **Tela 6:** Pulando carrossel de coberturas")
        time.sleep(5)
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Carrossel pulado")
        time.sleep(3)
        
        # TELA 7: Verificar question√°rio do ve√≠culo
        print("\n **Tela 7:** Verificando question√°rio do ve√≠culo")
        
        if "O carro possui alguns desses itens?" not in driver.page_source:
            print("   ‚ùå Question√°rio do ve√≠culo n√£o carregou")
            return False
            
        print("   ‚úÖ Question√°rio do ve√≠culo carregado")
        
        # Selecionar "Flex"
        flex_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='radio'][1]"))
        )
        flex_button.click()
        print("   ‚úÖ 'Flex' selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 8: Verificar endere√ßo noturno
        print("\n **Tela 8:** Verificando endere√ßo noturno")
        
        if "Onde o carro passa a noite?" not in driver.page_source:
            print("   ‚ùå Tela de endere√ßo n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de endere√ßo carregada")
        
        # Preencher CEP
        endereco_input = wait.until(
            EC.presence_of_element_located((By.XPATH, "//input[@type='text']"))
        )
        
        endereco_input.clear()
        endereco_input.send_keys("03317000")
        print("   ‚úÖ CEP preenchido: 03317000")
        time.sleep(3)
        
        # Selecionar endere√ßo no bal√£o
        endereco_sugestao = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//div[contains(text(), 'Rua Serra de Botucatu')]"))
        )
        endereco_sugestao.click()
        print("   ‚úÖ Endere√ßo selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 9: Verificar uso do ve√≠culo
        print("\n **Tela 9:** Verificando uso do ve√≠culo")
        
        if "Qual √© o uso do ve√≠culo?" not in driver.page_source:
            print("   ‚ùå Tela de uso do ve√≠culo n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de uso do ve√≠culo carregada")
        
        # Selecionar "Pessoal"
        pessoal_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='radio'][1]"))
        )
        pessoal_button.click()
        print("   ‚úÖ 'Pessoal' selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 10: Verificar dados pessoais
        print("\n **Tela 10:** Verificando dados pessoais")
        
        if "Nessa etapa, precisamos dos seus dados pessoais" not in driver.page_source:
            print("   ‚ùå Tela de dados pessoais n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de dados pessoais carregada")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 11: Verificar condutor principal
        print("\n **Tela 11:** Verificando condutor principal")
        
        if "Voc√™ ser√° o condutor principal do ve√≠culo?" not in driver.page_source:
            print("   ‚ùå Tela de condutor principal n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de condutor principal carregada")
        
        # Selecionar "Sim"
        sim_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='radio'][1]"))
        )
        sim_button.click()
        print("   ‚úÖ 'Sim' selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 12: Verificar local trabalho/estudo
        print("\n **Tela 12:** Verificando local trabalho/estudo")
        
        if "O ve√≠culo √© utilizado para ir ao local de trabalho" not in driver.page_source:
            print("   ‚ùå Tela de local trabalho/estudo n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de local trabalho/estudo carregada")
        
        # Selecionar "Local de trabalho"
        trabalho_checkbox = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='checkbox'][1]"))
        )
        trabalho_checkbox.click()
        print("   ‚úÖ 'Local de trabalho' selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 13: Verificar garagem e port√£o
        print("\n **Tela 13:** Verificando garagem e port√£o")
        
        if "Voc√™ possui uma garagem na sua resid√™ncia?" not in driver.page_source:
            print("   ‚ùå Tela de garagem e port√£o n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de garagem e port√£o carregada")
        
        # Selecionar "Sim" para garagem
        sim_garagem = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='radio'][1]"))
        )
        sim_garagem.click()
        print("   ‚úÖ 'Sim' para garagem selecionado")
        
        # Selecionar "Eletr√¥nico" para port√£o
        eletronico_portao = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='radio'][2]"))
        )
        eletronico_portao.click()
        print("   ‚úÖ 'Eletr√¥nico' para port√£o selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 14: Verificar residentes 18-26 anos
        print("\n **Tela 14:** Verificando residentes 18-26 anos")
        
        if "Voc√™ reside com algu√©m entre 18 e 26 anos?" not in driver.page_source:
            print("   ‚ùå Tela de residentes 18-26 anos n√£o carregou")
            return False
            
        print("   ‚úÖ Tela de residentes 18-26 anos carregada")
        
        # Selecionar "N√£o"
        nao_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@type='radio'][1]"))
        )
        nao_button.click()
        print("   ‚úÖ 'N√£o' selecionado")
        
        # Clicar em Continuar
        continuar_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Continuar')]"))
        )
        continuar_button.click()
        print("   ‚úÖ Bot√£o 'Continuar' clicado")
        time.sleep(3)
        
        # TELA 15: Aguardar c√°lculo autom√°tico
        print("\n **Tela 15:** Aguardando c√°lculo autom√°tico")
        
        if "Por favor, aguarde. Estamos realizando o c√°lculo para voc√™!" not in driver.page_source:
            print("   ‚ùå Tela de c√°lculo n√£o carregou")
            return False
            
        print("   ‚è≥ Aguardando c√°lculo autom√°tico...")
        time.sleep(15)
        
        # Aguardar resultado final
        if not wait.until(lambda d: "Parab√©ns, chegamos ao resultado final da cota√ß√£o!" in d.page_source):
            print("   ‚ùå Resultado final n√£o carregou")
            return False
            
        print("   ‚úÖ C√°lculo conclu√≠do!")
        
        # Finalizar clicando em "Agora n√£o"
        agora_nao_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Agora n√£o')]"))
        )
        agora_nao_button.click()
        print("   ‚úÖ 'Agora n√£o' clicado - Finalizado!")
        
        print("\nüéâ **SUCESSO! FLUXO COMPLETO EXECUTADO!**")
        print("‚úÖ Todas as 15 telas navegadas com sucesso!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå **ERRO:** {e}")
        return False
        
    finally:
        # Fechar navegador
        if 'driver' in locals():
            driver.quit()
            print("üîí Navegador fechado")
            
        # Limpar diret√≥rio tempor√°rio
        if 'temp_dir' in locals():
            shutil.rmtree(temp_dir, ignore_errors=True)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")

if __name__ == "__main__":
    main()
