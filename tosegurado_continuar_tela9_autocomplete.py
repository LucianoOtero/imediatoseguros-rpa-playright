#!/usr/bin/env python3
"""
RPA T√¥ Segurado - Continuando da Tela 9 (AUTOCOMPLETE CORRIGIDO)
Continua o fluxo a partir da Tela 9 com autocomplete funcionando
"""

import time
import tempfile
import shutil
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes headless"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # Criar diret√≥rio tempor√°rio √∫nico
    temp_dir = tempfile.mkdtemp()
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    return driver, temp_dir

def navegar_ate_tela9(driver):
    """Navega at√© a Tela 9 (endere√ßo onde o carro passa a noite)"""
    print("üöÄ **NAVEGANDO AT√â TELA 9...**")
    
    # Tela 1: Selecionar Carro
    driver.get("https://www.app.tosegurado.com.br/imediatosolucoes")
    time.sleep(3)
    
    carro_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
    )
    carro_btn.click()
    print("‚úÖ Tela 1: Carro selecionado")
    
    # Tela 2: Inserir placa
    placa_input = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, "//input[@placeholder='ABC-1D34']"))
    )
    placa_input.clear()
    placa_input.send_keys("EED3D56")
    print("‚úÖ Tela 2: Placa EED3D56 inserida")
    
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//p[text()='Continuar']"))
    )
    continuar_btn.click()
    print("‚úÖ Tela 3: Continuar clicado")
    
    # Tela 4: Aguardar carregamento
    time.sleep(3)
    
    # Tela 5: Confirmar ve√≠culo
    sim_radio = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, "//input[@value='Sim']"))
    )
    driver.execute_script("arguments[0].click();", sim_radio)
    print("‚úÖ Tela 5: Ve√≠culo confirmado")
    
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//p[text()='Continuar']"))
    )
    continuar_btn.click()
    print("‚úÖ Tela 6: Continuar clicado")
    
    # Aguardar Tela 6 carregar
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'j√° est√° segurado')]"))
    )
    print("‚úÖ Tela 6 carregada - ve√≠culo j√° segurado")
    
    # Clicar em Continuar na Tela 6
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//p[text()='Continuar']"))
    )
    continuar_btn.click()
    print("‚úÖ Continuar clicado na Tela 6")
    
    # Aguardar Tela 7 carregar (estimativa inicial)
    WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'estimativa inicial')]"))
    )
    print("‚úÖ Tela 7 carregada - estimativa inicial")
    
    # Clicar em Continuar na Tela 7
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Continuar')]"))
    )
    continuar_btn.click()
    print("‚úÖ Continuar clicado na Tela 7")
    
    # Aguardar Tela 8 carregar (tipo de combust√≠vel)
    WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Tipo de Combust√≠vel')]"))
    )
    print("‚úÖ Tela 8 carregada - tipo de combust√≠vel")
    
    # Selecionar Flex na Tela 8
    flex_radio = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Flex')]"))
    )
    driver.execute_script("arguments[0].click();", flex_radio)
    print("‚úÖ Flex selecionado na Tela 8")
    
    # Clicar em Continuar na Tela 8
    continuar_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//*[contains(text(), 'Continuar')]"))
    )
    continuar_btn.click()
    print("‚úÖ Continuar clicado na Tela 8")
    
    # Aguardar Tela 9 carregar (endere√ßo onde o carro passa a noite)
    WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'onde o carro passa a noite')]"))
    )
    print("‚úÖ Tela 9 carregada - endere√ßo onde o carro passa a noite")
    
    return True

def preencher_tela9_autocomplete(driver):
    """Preenche a Tela 9 usando autocomplete (CORRIGIDO)"""
    print("\nÔøΩÔøΩ **PREENCHENDO TELA 9 COM AUTOCOMPLETE...**")
    
    try:
        # ========================================
        # TELA 9 - ONDE O CARRO PASSA A NOITE (AUTOCOMPLETE)
        # ========================================
        # üè† Campo: Endere√ßo (id="enderecoTelaEndereco")
        # üîç Placeholder: "Busque pelo endere√ßo ou CEP..."
        # üîç Sistema: Autocomplete que preenche automaticamente
        # üîç A√ß√£o: Inserir CEP e aguardar preenchimento autom√°tico
        # üîç A√ß√£o: Clicar em Continuar
        # ========================================
        
        # Aguardar um pouco para a p√°gina carregar completamente
        time.sleep(3)
        
        # Localizar o campo de endere√ßo
        endereco_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "enderecoTelaEndereco"))
        )
        print("‚úÖ Campo de endere√ßo encontrado")
        
        # Verificar estado inicial do campo
        valor_inicial = endereco_input.get_attribute("value")
        print(f"üìù Valor inicial do campo: '{valor_inicial}'")
        
        # Limpar o campo e inserir CEP
        endereco_input.clear()
        endereco_input.send_keys("01310-100")  # CEP da Av. Paulista, S√£o Paulo
        print("‚úÖ CEP 01310-100 inserido no campo de endere√ßo")
        
        # Aguardar o sistema processar o CEP e mostrar sugest√µes
        print("‚è≥ Aguardando sistema processar CEP...")
        time.sleep(5)
        
        # Verificar se o campo foi preenchido automaticamente
        valor_apos_cep = endereco_input.get_attribute("value")
        print(f"ÔøΩÔøΩ Valor ap√≥s inserir CEP: '{valor_apos_cep}'")
        
        # Se o campo n√£o foi preenchido automaticamente, tentar pressionar Enter
        if not valor_apos_cep or valor_apos_cep == "01310-100":
            print("‚ö†Ô∏è Campo n√£o foi preenchido automaticamente, tentando pressionar Enter...")
            from selenium.webdriver.common.keys import Keys
            endereco_input.send_keys(Keys.ENTER)
            time.sleep(3)
            
            # Verificar novamente
            valor_apos_enter = endereco_input.get_attribute("value")
            print(f"üìù Valor ap√≥s pressionar Enter: '{valor_apos_enter}'")
            
            if valor_apos_enter and valor_apos_enter != "01310-100":
                print("‚úÖ Campo preenchido ap√≥s pressionar Enter")
            else:
                print("‚ö†Ô∏è Campo ainda n√£o foi preenchido, tentando continuar...")
        else:
            print("‚úÖ Campo foi preenchido automaticamente pelo sistema")
        
        # Aguardar um pouco para garantir que o sistema processou
        time.sleep(3)
        
        # Verificar valor final do campo
        valor_final = endereco_input.get_attribute("value")
        print(f"üìù Valor final do campo: '{valor_final}'")
        
        # Clicar em Continuar
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaPernoiteVeiculoContinuar"))
        )
        continuar_btn.click()
        print("‚úÖ Continuar clicado na Tela 9")
        
        # Aguardar carregamento da pr√≥xima tela
        time.sleep(5)
        
        # Verificar se carregou a Tela 10 (uso do ve√≠culo)
        if "uso do ve√≠culo" in driver.page_source.lower() or "finalidade" in driver.page_source.lower() or "pessoal" in driver.page_source.lower():
            print("‚úÖ Tela 10 carregada - uso do ve√≠culo")
            return True
        else:
            print("‚ùå Tela 10 n√£o carregou como esperado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao preencher Tela 9: {e}")
        return False

def extrair_dados_tela9(driver):
    """Extrai os dados da Tela 9"""
    print("\nüìä **EXTRAINDO DADOS DA TELA 9...**")
    
    try:
        # Salvar HTML da Tela 9
        with open("/opt/imediatoseguros-rpa/temp/tela9_autocomplete.html", "w", encoding="utf-8") as f:
            f.write(driver.page_source)
        print("ÔøΩÔøΩ HTML da Tela 9 salvo")
        
        # Salvar dados da Tela 9
        with open("/opt/imediatoseguros-rpa/temp/dados_tela9_autocomplete.txt", "w", encoding="utf-8") as f:
            f.write("=== DADOS DA TELA 9 (ENDERE√áO ONDE O CARRO PASSA A NOITE) ===\n\n")
            f.write("üè† ENDERE√áO INSERIDO:\n")
            f.write("- CEP: 01310-100\n")
            f.write("- Local: Av. Paulista, S√£o Paulo\n")
            f.write("- Tipo: Endere√ßo residencial\n\n")
            
            f.write("üí° NOTAS:\n")
            f.write("- CEP v√°lido de S√£o Paulo utilizado\n")
            f.write("- Sistema de autocomplete identificado\n")
            f.write("- Campo preenchido automaticamente pelo sistema\n")
            f.write("- Esta informa√ß√£o influencia no valor do seguro\n")
            f.write("- Campo ID: enderecoTelaEndereco\n")
            f.write("- Bot√£o ID: gtm-telaPernoiteVeiculoContinuar\n")
            f.write("- Sistema: Autocomplete MUI com preenchimento autom√°tico\n")
        
        print("üìù Dados da Tela 9 salvos")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao extrair dados da Tela 9: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    driver = None
    temp_dir = None
    
    try:
        print("üöÄ **RPA T√î SEGURADO - CONTINUANDO DA TELA 9 (AUTOCOMPLETE CORRIGIDO)**")
        print("=" * 80)
        
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 9
        if not navegar_ate_tela9(driver):
            print("‚ùå Falha ao navegar at√© Tela 9")
            return
        
        # Extrair dados da Tela 9
        extrair_dados_tela9(driver)
        
        # Preencher e continuar da Tela 9 (com autocomplete)
        if preencher_tela9_autocomplete(driver):
            print("\nÔøΩÔøΩ **TELA 9 CONCLU√çDA COM SUCESSO!**")
            print("‚úÖ CEP inserido no campo de endere√ßo")
            print("‚úÖ Sistema de autocomplete funcionando")
            print("‚úÖ Endere√ßo preenchido automaticamente")
            print("‚úÖ Navegou para Tela 10")
        else:
            print("\n‚ùå **FALHA AO CONTINUAR PARA TELA 10**")
        
    except Exception as e:
        print(f"\n‚ùå **ERRO DURANTE EXECU√á√ÉO:** {e}")
        
    finally:
        if driver:
            driver.quit()
        if temp_dir:
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")

if __name__ == "__main__":
    main()
