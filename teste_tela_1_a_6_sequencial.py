#!/usr/bin/env python3
"""
TESTE TELAS 1 A 6 SEQUENCIAL - IMPLEMENTA√á√ÉO COMPLETA
Teste das Telas 1-6 usando Playwright com implementa√ß√£o da Tela 6

DESCRI√á√ÉO:
- Tela 1: Sele√ß√£o do tipo de seguro (Carro)
- Tela 2: Inser√ß√£o da placa
- Tela 3: Confirma√ß√£o do ve√≠culo
- Tela 4: Ve√≠culo segurado
- Tela 5: Estimativa inicial (captura de dados)
- Tela 6: Itens do carro (nova implementa√ß√£o)

AUTOR: Luciano Otero
DATA: 2025-09-02
VERS√ÉO: 1.0.0
STATUS: Implementa√ß√£o completa das Telas 1-6
"""

import json
import time
import re
import os
from datetime import datetime
from playwright.sync_api import sync_playwright

def exibir_mensagem(mensagem):
    """
    Exibe mensagem formatada com timestamp
    
    PAR√ÇMETROS:
        mensagem (str): Mensagem a ser exibida
    
    COMPORTAMENTO:
        1. Formata mensagem com timestamp
        2. Exibe no terminal
        3. Formato: [HH:MM:SS] mensagem
    """
    timestamp = time.strftime('%H:%M:%S')
    print(f"[{timestamp}] {mensagem}")

def navegar_tela_1_playwright(page):
    """
    TELA 1: Sele√ß√£o do tipo de seguro (Carro)
    
    DESCRI√á√ÉO:
        Navega para a Tela 1 e seleciona "Carro" como tipo de seguro
    
    ELEMENTOS IDENTIFICADOS:
        - Bot√£o "Carro": button.group
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento inicial da p√°gina
        2. Localiza o bot√£o "Carro"
        3. Verifica se est√° vis√≠vel
        4. Clica no bot√£o
        5. Aguarda transi√ß√£o para pr√≥xima tela
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 1: Selecionando Carro..."
        - "‚úÖ Bot√£o 'Carro' clicado com sucesso"
        - "‚ùå Bot√£o 'Carro' n√£o est√° vis√≠vel" (se falhar)
        - "‚ùå ERRO na Tela 1: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 1
        exibir_mensagem("üì± TELA 1: Selecionando Carro...")
        
        # PASSO 2: Aguardar carregamento inicial da p√°gina
        time.sleep(3)
        
        # PASSO 3: Localizar o bot√£o "Carro"
        botao_carro = page.locator("button.group").first
        
        # PASSO 4: Verificar se o bot√£o est√° vis√≠vel
        if botao_carro.is_visible():
            # PASSO 5: Clicar no bot√£o "Carro"
            botao_carro.click()
            
            # PASSO 6: Confirmar sucesso da a√ß√£o
            exibir_mensagem("‚úÖ Bot√£o 'Carro' clicado com sucesso")
            
            # PASSO 7: Aguardar transi√ß√£o para pr√≥xima tela
            time.sleep(3)
            
            # PASSO 8: Retornar sucesso
            return True
        else:
            # PASSO 9: Tratar caso onde bot√£o n√£o est√° vis√≠vel
            exibir_mensagem("‚ùå Bot√£o 'Carro' n√£o est√° vis√≠vel")
            return False
            
    except Exception as e:
        # PASSO 10: Tratar exce√ß√µes durante a execu√ß√£o
        exibir_mensagem(f"‚ùå ERRO na Tela 1: {str(e)}")
        return False

def navegar_tela_2_playwright(page, placa):
    """
    TELA 2: Inser√ß√£o da placa
    
    DESCRI√á√ÉO:
        Preenche o campo de placa e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS:
        - Campo placa: #placaTelaDadosPlaca
        - Bot√£o continuar: #gtm-telaDadosAutoCotarComPlacaContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Localiza o campo de placa
        2. Clica no campo para focar
        3. Preenche com a placa fornecida
        4. Localiza o bot√£o "Continuar"
        5. Clica no bot√£o para avan√ßar
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        placa (str): Placa do ve√≠culo
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 2: Inserindo placa {placa}..."
        - "‚úÖ Placa {placa} inserida com sucesso"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Campo de placa n√£o encontrado" (se falhar)
        - "‚ùå ERRO na Tela 2: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 2
        exibir_mensagem(f"üì± TELA 2: Inserindo placa {placa}...")
        
        # PASSO 2: Localizar o campo de placa
        campo_placa = page.locator("#placaTelaDadosPlaca").first
        
        # PASSO 3: Clicar no campo para focar
        campo_placa.click()
        
        # PASSO 4: Preencher com a placa
        campo_placa.fill(placa)
        
        # PASSO 5: Confirmar preenchimento
        exibir_mensagem(f"‚úÖ Placa {placa} inserida com sucesso")
        
        # PASSO 6: Localizar o bot√£o "Continuar"
        botao_continuar = page.locator("#gtm-telaDadosAutoCotarComPlacaContinuar").first
        
        # PASSO 7: Clicar no bot√£o "Continuar"
        botao_continuar.click()
        
        # PASSO 8: Confirmar clique
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 9: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 10: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 11: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 2: {str(e)}")
        return False

def navegar_tela_3_playwright(page):
    """
    TELA 3: Confirma√ß√£o do ve√≠culo
    
    DESCRI√á√ÉO:
        Confirma as informa√ß√µes do ve√≠culo clicando em "Continuar"
    
    ELEMENTOS IDENTIFICADOS:
        - Bot√£o continuar: #gtm-telaInfosAutoContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Localiza o bot√£o "Continuar"
        2. Verifica se est√° vis√≠vel
        3. Clica no bot√£o
        4. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 3: Confirmando informa√ß√µes do ve√≠culo..."
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Bot√£o 'Continuar' n√£o encontrado" (se falhar)
        - "‚ùå ERRO na Tela 3: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 3
        exibir_mensagem("üì± TELA 3: Confirmando informa√ß√µes do ve√≠culo...")
        
        # PASSO 2: Localizar o bot√£o "Continuar"
        botao_continuar = page.locator("#gtm-telaInfosAutoContinuar").first
        
        # PASSO 3: Verificar se est√° vis√≠vel
        if botao_continuar.is_visible():
            # PASSO 4: Clicar no bot√£o "Continuar"
            botao_continuar.click()
            
            # PASSO 5: Confirmar clique
            exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
            
            # PASSO 6: Aguardar transi√ß√£o
            time.sleep(3)
            
            # PASSO 7: Retornar sucesso
            return True
        else:
            # PASSO 8: Tratar caso onde bot√£o n√£o est√° vis√≠vel
            exibir_mensagem("‚ùå Bot√£o 'Continuar' n√£o encontrado")
            return False
            
    except Exception as e:
        # PASSO 9: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 3: {str(e)}")
        return False

def navegar_tela_4_playwright(page, veiculo_segurado):
    """
    TELA 4: Ve√≠culo segurado
    
    DESCRI√á√ÉO:
        Responde se o ve√≠culo j√° est√° segurado baseado no par√¢metro
    
    ELEMENTOS IDENTIFICADOS:
        - Bot√£o "N√£o": #gtm-telaRenovacaoVeiculoContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Verifica o par√¢metro veiculo_segurado
        2. Localiza o bot√£o correspondente
        3. Clica no bot√£o
        4. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
        veiculo_segurado (str): "Sim" ou "N√£o"
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 4: Respondendo se ve√≠culo est√° segurado..."
        - "‚úÖ Resposta '{veiculo_segurado}' selecionada com sucesso"
        - "‚ùå Op√ß√£o '{veiculo_segurado}' n√£o encontrada" (se falhar)
        - "‚ùå ERRO na Tela 4: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 4
        exibir_mensagem("üì± TELA 4: Respondendo se ve√≠culo est√° segurado...")
        
        # PASSO 2: Verificar par√¢metro e localizar bot√£o
        if veiculo_segurado == "N√£o":
            botao_nao = page.locator("#gtm-telaRenovacaoVeiculoContinuar").first
            botao_nao.click()
            exibir_mensagem("‚úÖ Resposta 'N√£o' selecionada com sucesso")
        else:
            # Implementar l√≥gica para "Sim" se necess√°rio
            exibir_mensagem(f"‚ö†Ô∏è Op√ß√£o '{veiculo_segurado}' n√£o implementada ainda")
            return False
        
        # PASSO 3: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 4: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 5: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 4: {str(e)}")
        return False

def navegar_tela_5_playwright(page):
    """
    TELA 5: Estimativa inicial - CAPTURA DE DADOS
    
    DESCRI√á√ÉO:
        Aguarda carregamento da estimativa e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS:
        - Cards de cobertura: div.bg-primary
        - Bot√£o continuar: #gtm-telaEstimativaContinuarParaCotacaoFinal
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento dos elementos de estimativa
        2. Verifica se os cards est√£o presentes
        3. Clica no bot√£o "Continuar"
        4. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 5: Aguardando carregamento da estimativa..."
        - "‚úÖ Estimativa carregada com sucesso"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Elementos da estimativa n√£o carregaram" (se falhar)
        - "‚ùå ERRO na Tela 5: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 5
        exibir_mensagem("üì± TELA 5: Aguardando carregamento da estimativa...")
        
        # PASSO 2: Aguardar at√© que o elemento espec√≠fico apare√ßa (m√°ximo 30 segundos)
        max_tentativas = 30
        tentativa = 0
        
        while tentativa < max_tentativas:
            elemento_estimativa = page.locator("div.bg-primary")
            if elemento_estimativa.count() > 0:
                break
            time.sleep(1)
            tentativa += 1
        
        # PASSO 3: Verificar se encontrou elementos
        if tentativa >= max_tentativas:
            exibir_mensagem("‚ùå Elementos da estimativa n√£o carregaram")
            return False
        
        # PASSO 4: Confirmar carregamento
        exibir_mensagem("‚úÖ Estimativa carregada com sucesso")
        
        # PASSO 5: Localizar e clicar no bot√£o "Continuar"
        botao_continuar = page.locator("#gtm-telaEstimativaContinuarParaCotacaoFinal").first
        botao_continuar.click()
        
        # PASSO 6: Confirmar clique
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 7: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 8: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 9: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 5: {str(e)}")
        return False

def navegar_tela_6_playwright(page):
    """
    TELA 6: Itens do carro
    
    DESCRI√á√ÉO:
        Navega pela Tela 6 (Itens do carro) e clica em "Continuar"
    
    ELEMENTOS IDENTIFICADOS (baseado na grava√ß√£o):
        - Bot√£o continuar: #gtm-telaItensAutoContinuar
    
    IMPLEMENTA√á√ÉO:
        1. Aguarda carregamento da Tela 6
        2. Localiza o bot√£o "Continuar"
        3. Clica no bot√£o
        4. Aguarda transi√ß√£o
    
    PAR√ÇMETROS:
        page: Objeto page do Playwright
    
    RETORNO:
        bool: True se sucesso, False se falha
    
    LOGS ESPERADOS:
        - "üì± TELA 6: Navegando pelos itens do carro..."
        - "‚úÖ Tela 6 carregada com sucesso"
        - "‚úÖ Bot√£o 'Continuar' clicado com sucesso"
        - "‚ùå Tela 6 n√£o carregou" (se falhar)
        - "‚ùå ERRO na Tela 6: {erro}" (se exce√ß√£o)
    """
    try:
        # PASSO 1: Exibir mensagem de in√≠cio da Tela 6
        exibir_mensagem("üì± TELA 6: Navegando pelos itens do carro...")
        
        # PASSO 2: Aguardar carregamento da Tela 6 (m√°ximo 20 segundos)
        max_tentativas = 20
        tentativa = 0
        
        while tentativa < max_tentativas:
            botao_continuar = page.locator("#gtm-telaItensAutoContinuar")
            if botao_continuar.count() > 0 and botao_continuar.first.is_visible():
                break
            time.sleep(1)
            tentativa += 1
        
        # PASSO 3: Verificar se encontrou o bot√£o
        if tentativa >= max_tentativas:
            exibir_mensagem("‚ùå Tela 6 n√£o carregou")
            return False
        
        # PASSO 4: Confirmar carregamento
        exibir_mensagem("‚úÖ Tela 6 carregada com sucesso")
        
        # PASSO 5: Clicar no bot√£o "Continuar"
        botao_continuar.first.click()
        
        # PASSO 6: Confirmar clique
        exibir_mensagem("‚úÖ Bot√£o 'Continuar' clicado com sucesso")
        
        # PASSO 7: Aguardar transi√ß√£o
        time.sleep(3)
        
        # PASSO 8: Retornar sucesso
        return True
        
    except Exception as e:
        # PASSO 9: Tratar exce√ß√µes
        exibir_mensagem(f"‚ùå ERRO na Tela 6: {str(e)}")
        return False

def main():
    """
    Fun√ß√£o principal que executa o teste das Telas 1-6 sequencialmente
    
    FLUXO:
        1. Carrega par√¢metros do JSON
        2. Configura browser Playwright
        3. Executa Tela 1 ‚Üí Tela 2 ‚Üí Tela 3 ‚Üí Tela 4 ‚Üí Tela 5 ‚Üí Tela 6
        4. Exibe resultados de cada tela
        5. Fecha browser
    
    RETORNO:
        int: 0 se sucesso, 1 se falha
    """
    try:
        # Carregar par√¢metros
        with open('config/parametros.json', 'r', encoding='utf-8') as f:
            parametros = json.load(f)
        
        exibir_mensagem("üöÄ INICIANDO TESTE TELAS 1 A 6 SEQUENCIAL")
        exibir_mensagem("=" * 60)
        exibir_mensagem(f"üöó Placa: {parametros['placa']}")
        exibir_mensagem(f"üìã Ve√≠culo segurado: {parametros['veiculo_segurado']}")
        
        # Configurar browser
        with sync_playwright() as playwright:
            browser = playwright.chromium.launch(headless=False)
            context = browser.new_context(
                viewport={'width': 1139, 'height': 1378},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            )
            page = context.new_page()
            
            # Navegar para o site
            url_base = "https://www.app.tosegurado.com.br/imediatoseguros"
            exibir_mensagem(f"üåê Navegando para: {url_base}")
            
            page.goto(url_base)
            time.sleep(3)  # Aguardar carregamento inicial
            exibir_mensagem("‚úÖ P√°gina carregada")
            
            # Executar Telas 1-6 sequencialmente
            telas_executadas = 0
            
            # TELA 1
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_1_playwright(page):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 1 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 1 FALHOU!")
                return 1
            
            # TELA 2
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_2_playwright(page, parametros['placa']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 2 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 2 FALHOU!")
                return 1
            
            # TELA 3
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_3_playwright(page):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 3 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 3 FALHOU!")
                return 1
            
            # TELA 4
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_4_playwright(page, parametros['veiculo_segurado']):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 4 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 4 FALHOU!")
                return 1
            
            # TELA 5
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_5_playwright(page):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 5 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 5 FALHOU!")
                return 1
            
            # TELA 6
            exibir_mensagem("\n" + "="*50)
            if navegar_tela_6_playwright(page):
                telas_executadas += 1
                exibir_mensagem("‚úÖ TELA 6 CONCLU√çDA!")
            else:
                exibir_mensagem("‚ùå TELA 6 FALHOU!")
                return 1
            
            # Resultado final
            exibir_mensagem("\n" + "="*60)
            exibir_mensagem("üéâ TESTE TELAS 1 A 6 CONCLU√çDO COM SUCESSO!")
            exibir_mensagem(f"‚úÖ Total de telas executadas: {telas_executadas}/6")
            exibir_mensagem("‚úÖ Todas as telas funcionaram corretamente")
            exibir_mensagem("‚úÖ Navega√ß√£o sequencial realizada com sucesso")
            
            # Aguardar para visualizar resultado final
            exibir_mensagem("\n‚è≥ Aguardando 10 segundos para visualizar resultado...")
            time.sleep(10)
            
            return 0
            
    except Exception as e:
        exibir_mensagem(f"‚ùå ERRO GERAL: {str(e)}")
        return 1

if __name__ == "__main__":
    exit(main())
