#!/usr/bin/env python3
"""
RPA T√¥ Segurado - PARAMETRIZADO ATUALIZADO
Recebe par√¢metros via JSON incluindo ve√≠culo segurado e endere√ßo completo
"""

import json
import sys
import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def carregar_parametros():
    """Carrega par√¢metros do JSON passado via linha de comando"""
    if len(sys.argv) != 2:
        print("‚ùå ERRO: Uso correto: python3 tosegurado-parametrizado-atualizado.py 'JSON_PARAMETROS'")
        print(" Exemplo:")
        print('python3 tosegurado-parametrizado-atualizado.py \'{"placa": "KVA-1791", "veiculo_segurado": "N√£o"}\'')
        sys.exit(1)
    
    try:
        json_str = sys.argv[1]
        parametros = json.loads(json_str)
        print("‚úÖ Par√¢metros carregados com sucesso!")
        return parametros
    except json.JSONDecodeError as e:
        print(f"‚ùå ERRO: JSON inv√°lido: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå ERRO ao carregar par√¢metros: {e}")
        sys.exit(1)

def validar_parametros(parametros):
    """Valida se todos os par√¢metros obrigat√≥rios est√£o presentes"""
    obrigatorios = [
        "placa", "marca", "modelo", "ano", "combustivel", 
        "cep", "uso_veiculo", "veiculo_segurado", "nome", "cpf", "email", "celular"
    ]
    
    faltando = []
    for param in obrigatorios:
        if param not in parametros or not parametros[param]:
            faltando.append(param)
    
    if faltando:
        print(f"‚ùå ERRO: Par√¢metros obrigat√≥rios faltando: {', '.join(faltando)}")
        print("üìù Par√¢metros obrigat√≥rios:")
        for param in obrigatorios:
            print(f"   - {param}")
        sys.exit(1)
    
    print("‚úÖ Todos os par√¢metros obrigat√≥rios est√£o presentes!")
    return True

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def aguardar_carregamento_pagina(driver, timeout=30):
    """Aguarda o carregamento completo da p√°gina com timeout otimizado"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def aguardar_estabilizacao(driver, segundos=3):
    """Aguarda a estabiliza√ß√£o da p√°gina com delay otimizado"""
    print(f"‚è≥ Aguardando estabiliza√ß√£o da p√°gina ({segundos}s)...")
    time.sleep(segundos)

def clicar_com_delay_otimizado(driver, by, value, descricao="elemento", timeout=20):
    """Clica em um elemento com delay otimizado"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        aguardar_estabilizacao(driver, 3)
        
        try:
            elemento = WebDriverWait(driver, 8).until(
                EC.element_to_be_clickable((by, value))
            )
        except:
            print(f"‚ö†Ô∏è {descricao} n√£o est√° mais clic√°vel, tentando JavaScript...")
            if by == By.XPATH:
                driver.execute_script(f"document.evaluate('{value}', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click();")
            else:
                driver.execute_script(f"document.querySelector('{by}={value}').click();")
            print(f"‚úÖ {descricao} clicado via JavaScript")
            return True
        
        driver.execute_script("arguments[0].scrollIntoView(true);", elemento)
        time.sleep(1)
        elemento.click()
        print(f"‚úÖ {descricao} clicado com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao clicar em {descricao}: {e}")
        return False

def preencher_com_delay_otimizado(driver, by, value, texto, descricao="campo", timeout=20):
    """Preenche um campo com delay otimizado"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        aguardar_estabilizacao(driver, 2)
        
        try:
            elemento = WebDriverWait(driver, 8).until(
                EC.presence_of_element_located((by, value))
            )
        except:
            print(f"‚ö†Ô∏è {descricao} n√£o est√° mais presente, tentando JavaScript...")
            if by == By.ID:
                driver.execute_script(f"document.getElementById('{value}').value = '{texto}';")
            else:
                driver.execute_script(f"arguments[0].value = '{texto}';", elemento)
            print(f"‚úÖ {descricao} preenchido via JavaScript")
            return True
        
        elemento.clear()
        time.sleep(0.5)
        elemento.send_keys(texto)
        print(f"‚úÖ {descricao} preenchido: {texto}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao preencher {descricao}: {e}")
        return False

def clicar_radio_via_javascript(driver, texto_radio, descricao="radio", timeout=20):
    """Clica em um radio button via JavaScript com delay otimizado"""
    try:
        print(f"‚è≥ Aguardando radio {descricao} aparecer...")
        aguardar_estabilizacao(driver, 3)
        
        script = f"""
        var elementos = document.querySelectorAll('input[type="radio"], label, span, div');
        var radioEncontrado = null;
        
        for (var i = 0; i < elementos.length; i++) {{
            var elemento = elementos[i];
            if (elemento.textContent && elemento.textContent.includes('{texto_radio}')) {{
                radioEncontrado = elemento;
                break;
            }}
        }}
        
        if (radioEncontrado) {{
            if (radioEncontrado.tagName === 'LABEL') {{
                var inputId = radioEncontrado.getAttribute('for');
                if (inputId) {{
                    var input = document.getElementById(inputId);
                    if (input) {{
                        input.click();
                        return 'Radio clicado via label: ' + inputId;
                    }}
                }}
            }}
            
            radioEncontrado.click();
            return 'Radio clicado diretamente: ' + radioEncontrado.outerHTML.substring(0, 100);
        }} else {{
            return 'Radio n√£o encontrado';
        }}
        """
        
        resultado = driver.execute_script(script)
        print(f"üéØ {resultado}")
        
        if "Radio clicado" in resultado:
            print(f"‚úÖ Radio {descricao} clicado via JavaScript")
            return True
        else:
            print(f"‚ùå Radio {descricao} n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao clicar radio {descricao}: {e}")
        return False

def clicar_checkbox_via_javascript(driver, texto_checkbox, descricao="checkbox", timeout=20):
    """Clica em um checkbox via JavaScript com delay otimizado"""
    try:
        print(f"‚è≥ Aguardando checkbox {descricao} aparecer...")
        aguardar_estabilizacao(driver, 3)
        
        script = f"""
        var elementos = document.querySelectorAll('input[type="checkbox"], label, span, div');
        var checkboxEncontrado = null;
        
        for (var i = 0; i < elementos.length; i++) {{
            var elemento = elementos[i];
            if (elemento.textContent && elemento.textContent.includes('{texto_checkbox}')) {{
                checkboxEncontrado = elemento;
                break;
            }}
        }}
        
        if (checkboxEncontrado) {{
            if (checkboxEncontrado.tagName === 'LABEL') {{
                var inputId = checkboxEncontrado.getAttribute('for');
                if (inputId) {{
                    var input = document.getElementById(inputId);
                    if (input) {{
                        input.click();
                        return 'Checkbox clicado via label: ' + inputId;
                    }}
                }}
            }}
            
            checkboxEncontrado.click();
            return 'Checkbox clicado diretamente: ' + checkboxEncontrado.outerHTML.substring(0, 100);
        }} else {{
            return 'Checkbox n√£o encontrado';
        }}
        """
        
        resultado = driver.execute_script(script)
        print(f"üéØ {resultado}")
        
        if "Checkbox clicado" in resultado:
            print(f"‚úÖ Checkbox {descricao} clicado via JavaScript")
            return True
        else:
            print(f"‚ùå Checkbox {descricao} n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao clicar checkbox {descricao}: {e}")
        return False

def salvar_estado_tela(driver, tela_num, acao, temp_dir):
    """Salva o estado atual da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    tela_dir = f"temp/tela_{tela_num:02d}"
    os.makedirs(tela_dir, exist_ok=True)
    
    html_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(driver.page_source)
    
    screenshot_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.png"
    driver.save_screenshot(screenshot_file)
    
    info_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"TELA {tela_num:02d}: {acao}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"Arquivos salvos em: {os.path.abspath(tela_dir)}\n")
    
    print(f"==================================================================================")
    print(f"üì± **TELA {tela_num:02d}: {acao}** - {timestamp}")
    print(f"==================================================================================")
    print(f"üåê URL: {driver.current_url}")
    print(f"üìÑ T√≠tulo: {driver.title}")
    print(f" A√ß√£o: {acao}")
    print(f" Arquivos salvos em: {os.path.abspath(tela_dir)}")
    
    return tela_dir

def navegar_ate_tela5(driver, parametros):
    """Navega o RPA at√© a Tela 5 com par√¢metros do JSON"""
    print("üöÄ **NAVEGANDO AT√â TELA 5 COM PAR√ÇMETROS DO JSON**")
    
    # TELA 1: Sele√ß√£o do tipo de seguro
    print("\nüì± TELA 1: Selecionando Carro...")
    driver.get("https://www.app.tosegurado.com.br/cotacao")
    
    if not aguardar_carregamento_pagina(driver, 30):
        print("‚ùå Erro: P√°gina n√£o carregou")
        return False
    
    salvar_estado_tela(driver, 1, "inicial", None)
    aguardar_estabilizacao(driver, 5)
    
    salvar_estado_tela(driver, 1, "antes_clique", None)
    
    if not clicar_com_delay_otimizado(driver, By.XPATH, "//button[contains(., 'Carro')]", "bot√£o Carro"):
        print("‚ùå Erro: Falha ao clicar no bot√£o Carro")
        return False
    
    print("‚è≥ Aguardando carregamento completo da p√°gina...")
    time.sleep(5)
    
    if not aguardar_carregamento_pagina(driver, 30):
        print("‚ùå Erro: P√°gina n√£o carregou ap√≥s selecionar Carro")
        return False
    
    aguardar_estabilizacao(driver, 5)
    salvar_estado_tela(driver, 1, "apos_clique", None)
    
    # TELA 2: Inser√ß√£o da placa do JSON
    print(f"\nüì± TELA 2: Inserindo placa {parametros['placa']}...")
    aguardar_estabilizacao(driver, 3)
    salvar_estado_tela(driver, 2, "inicial", None)
    
    # PLACA do JSON
    if not preencher_com_delay_otimizado(driver, By.ID, "placaTelaDadosPlaca", parametros['placa'], "placa"):
        print("‚ùå Erro: Falha ao preencher placa")
        return False
    
    aguardar_estabilizacao(driver, 3)
    salvar_estado_tela(driver, 2, "placa_inserida", None)
    
    # TELA 3: Clicar em Continuar
    print("\nüì± TELA 3: Clicando Continuar...")
    
    if not clicar_com_delay_otimizado(driver, By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar", "bot√£o Continuar Tela 3"):
        print("‚ùå Erro: Falha ao clicar Continuar na Tela 3")
        return False
    
    print("‚è≥ Aguardando carregamento da p√°gina...")
    time.sleep(8)
    
    if not aguardar_carregamento_pagina(driver, 30):
        print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
    
    aguardar_estabilizacao(driver, 5)
    salvar_estado_tela(driver, 3, "apos_clique", None)
    
    # TELA 3: Confirma√ß√£o do ve√≠culo (usando marca/modelo do JSON)
    print(f"\nüì± TELA 3: Confirmando ve√≠culo {parametros['marca']} {parametros['modelo']}...")
    
    try:
        # Aguardar elementos da confirma√ß√£o do ve√≠culo
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, f"//*[contains(text(), '{parametros['modelo']}')]"))
        )
        print(f"‚úÖ Tela 3 carregada - confirma√ß√£o do {parametros['modelo']} detectada!")
        
        salvar_estado_tela(driver, 3, "confirmacao_veiculo", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 3, "confirmacao_carregada", None)
        
        # Selecionar "Sim" para confirma√ß√£o do ve√≠culo
        print("‚è≥ Selecionando 'Sim' para confirma√ß√£o do ve√≠culo...")
        
        if not clicar_radio_via_javascript(driver, "Sim", "Sim para confirma√ß√£o"):
            print("‚ö†Ô∏è Radio 'Sim' n√£o encontrado - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_otimizado(driver, By.XPATH, "//button[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 3"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 3")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 3, "apos_continuar", None)
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na confirma√ß√£o Tela 3: {e} - tentando prosseguir...")
    
    # TELA 4: Ve√≠culo j√° est√° segurado? (usando par√¢metro do JSON)
    print(f"\n TELA 4: Ve√≠culo j√° est√° segurado? ‚Üí {parametros['veiculo_segurado']}")
    
    try:
        # Aguardar elementos da pergunta sobre ve√≠culo segurado
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'segurado') or contains(text(), 'Segurado')]"))
        )
        print("‚úÖ Tela 4 carregada - pergunta sobre ve√≠culo segurado detectada!")
        
        salvar_estado_tela(driver, 4, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 4, "pergunta_carregada", None)
        
        # Selecionar resposta do JSON para ve√≠culo j√° segurado
        print(f"‚è≥ Selecionando '{parametros['veiculo_segurado']}' para ve√≠culo j√° segurado...")
        
        if not clicar_radio_via_javascript(driver, parametros['veiculo_segurado'], f"{parametros['veiculo_segurado']} para ve√≠culo segurado"):
            print(f"‚ö†Ô∏è Radio '{parametros['veiculo_segurado']}' n√£o encontrado - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_otimizado(driver, By.XPATH, "//button[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 4"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 4")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 4, "apos_continuar", None)
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na Tela 4: {e} - tentando prosseguir...")
    
    # TELA 5: Estimativa inicial
    print("\n TELA 5: Estimativa inicial...")
    
    try:
        # Aguardar elementos da estimativa inicial
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'estimativa') or contains(text(), 'inicial') or contains(text(), 'carrossel') or contains(text(), 'cobertura')]"))
        )
        print("‚úÖ Tela 5 carregada - estimativa inicial detectada!")
        
        salvar_estado_tela(driver, 5, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 5, "estimativa_carregada", None)
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_otimizado(driver, By.XPATH, "//button[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 5"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 5")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 5, "apos_continuar", None)
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na Tela 5: {e} - tentando prosseguir...")
    
    print("‚úÖ **NAVEGA√á√ÉO AT√â TELA 5 CONCLU√çDA!**")
    return True

def implementar_tela6(driver, parametros):
    """Implementa a Tela 6: Tipo de combust√≠vel + checkboxes com par√¢metros do JSON"""
    print("\n **INICIANDO TELA 6: Tipo de combust√≠vel + checkboxes**")
    
    try:
        # Aguardar elementos da Tela 6
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'combust√≠vel') or contains(text(), 'Combust√≠vel') or contains(text(), 'Flex') or contains(text(), 'Gasolina')]"))
        )
        print("‚úÖ Tela 6 carregada - tipo de combust√≠vel detectado!")
        
        salvar_estado_tela(driver, 6, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 6, "combustivel_carregado", None)
        
        # Selecionar tipo de combust√≠vel do JSON
        print(f"‚è≥ Selecionando '{parametros['combustivel']}' como tipo de combust√≠vel...")
        
        if not clicar_radio_via_javascript(driver, parametros['combustivel'], f"{parametros['combustivel']} como combust√≠vel"):
            print(f"‚ö†Ô∏è Radio '{parametros['combustivel']}' n√£o encontrado - tentando prosseguir...")
        
        # Selecionar checkboxes se dispon√≠veis
        print("‚è≥ Verificando checkboxes dispon√≠veis...")
        
        # Kit G√°s (se dispon√≠vel)
        if not clicar_checkbox_via_javascript(driver, "kit gas", "Kit G√°s"):
            print("‚ö†Ô∏è Checkbox Kit G√°s n√£o encontrado")
        
        # Blindado (se dispon√≠vel)
        if not clicar_checkbox_via_javascript(driver, "blindado", "Blindado"):
            print("‚ö†Ô∏è Checkbox Blindado n√£o encontrado")
        
        # Financiado (se dispon√≠vel)
        if not clicar_checkbox_via_javascript(driver, "financiado", "Financiado"):
            print("‚ö†Ô∏è Checkbox Financiado n√£o encontrado")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_otimizado(driver, By.XPATH, "//button[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 6"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 6")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 6, "apos_continuar", None)
        print("‚úÖ **TELA 6 IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 6: {e}")
        return False

def implementar_tela7(driver, parametros):
    """Implementa a Tela 7: Endere√ßo de pernoite (CEP) com par√¢metros do JSON"""
    print("\n **INICIANDO TELA 7: Endere√ßo de pernoite**")
    
    try:
        # Aguardar elementos do endere√ßo
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'endere√ßo') or contains(text(), 'Endere√ßo') or contains(text(), 'CEP') or contains(text(), 'cep')]"))
        )
        print("‚úÖ Tela 7 carregada - endere√ßo de pernoite detectado!")
        
        salvar_estado_tela(driver, 7, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 7, "endereco_carregado", None)
        
        # Inserir CEP do JSON
        print(f"‚è≥ Inserindo CEP {parametros['cep']}...")
        
        # Tentar diferentes seletores para o campo CEP
        cep_campo = None
        try:
            cep_campo = WebDriverWait(driver, 8).until(
                EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'CEP') or contains(@placeholder, 'cep') or contains(@name, 'cep') or contains(@id, 'cep')]"))
            )
        except:
            try:
                cep_campo = WebDriverWait(driver, 8).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='text']"))
                )
            except:
                print("‚ö†Ô∏è Campo CEP n√£o encontrado - tentando prosseguir...")
        
        if cep_campo:
            cep_campo.clear()
            time.sleep(0.5)
            cep_campo.send_keys(parametros['cep'])
            print(f"‚úÖ CEP preenchido: {parametros['cep']}")
        
        # Aguardar sugest√£o e selecionar
        print("‚è≥ Aguardando sugest√£o de endere√ßo...")
        time.sleep(3)
        
        # Selecionar sugest√£o se dispon√≠vel (usando endere√ßo completo do JSON)
        try:
            # Tentar encontrar o endere√ßo completo primeiro
            sugestao = WebDriverWait(driver, 8).until(
                EC.presence_of_element_located((By.XPATH, f"//*[contains(text(), '{parametros.get('endereco_completo', 'Rua Serra de Botucatu')}')]"))
            )
            sugestao.click()
            print("‚úÖ Endere√ßo completo selecionado")
        except:
            try:
                # Fallback: tentar encontrar parte do endere√ßo
                sugestao = WebDriverWait(driver, 8).until(
                    EC.presence_of_element_located((By.XPATH, f"//*[contains(text(), 'Rua Serra de Botucatu') or contains(text(), 'S√£o Paulo')]"))
                )
                sugestao.click()
                print("‚úÖ Sugest√£o de endere√ßo selecionada (fallback)")
            except:
                print("‚ö†Ô∏è Sugest√£o n√£o encontrada - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_otimizado(driver, By.XPATH, "//button[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 7"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 7")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 7, "apos_continuar", None)
        print("‚úÖ **TELA 7 IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 7: {e}")
        return False

def implementar_tela8(driver, parametros):
    """Implementa a Tela 8: Finalidade do ve√≠culo com par√¢metros do JSON"""
    print("\n **INICIANDO TELA 8: Finalidade do ve√≠culo**")
    
    try:
        # Aguardar elementos da finalidade do ve√≠culo
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'finalidade') or contains(text(), 'Finalidade') or contains(text(), 'uso') or contains(text(), 'Uso') or contains(text(), 've√≠culo')]"))
        )
        print("‚úÖ Tela 8 carregada - finalidade do ve√≠culo detectada!")
        
        salvar_estado_tela(driver, 8, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 20):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 8, "finalidade_carregada", None)
        
        # Selecionar uso do ve√≠culo do JSON
        print(f"‚è≥ Selecionando '{parametros['uso_veiculo']}' como finalidade do ve√≠culo...")
        
        if not clicar_radio_via_javascript(driver, parametros['uso_veiculo'], f"{parametros['uso_veiculo']} como finalidade"):
            print(f"‚ö†Ô∏è Radio '{parametros['uso_veiculo']}' n√£o encontrado - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_otimizado(driver, By.XPATH, "//button[contains(text(), 'Continuar')]", "bot√£o Continuar Tela 8"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 8")
            return False
        
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(8)
        
        if not aguardar_carregamento_pagina(driver, 60):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 5)
        salvar_estado_tela(driver, 8, "apos_continuar", None)
        print("‚úÖ **TELA 8 IMPLEMENTADA COM SUCESSO!**")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 8: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß **RPA T√î SEGURADO - PARAMETRIZADO ATUALIZADO**")
    print("=" * 80)
    print(" OBJETIVO: Executar RPA com par√¢metros via JSON (incluindo ve√≠culo segurado)")
    print(" M√âTODO: Par√¢metros flex√≠veis + delays otimizados + novos campos")
    print("üìù NOTA: Recebe JSON via linha de comando com veiculo_segurado e endereco_completo")
    print("=" * 80)
    
    # Carregar e validar par√¢metros
    print(" CARREGANDO PAR√ÇMETROS...")
    parametros = carregar_parametros()
    validar_parametros(parametros)
    
    # Exibir par√¢metros carregados
    print("\nüìä PAR√ÇMETROS CARREGADOS:")
    for key, value in parametros.items():
        print(f"   {key}: {value}")
    
    inicio = datetime.now()
    print(f"\n‚è∞ In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 5
        if not navegar_ate_tela5(driver, parametros):
            print("‚ùå Erro: Falha ao navegar at√© Tela 5")
            return
        
        # Implementar Tela 6
        if not implementar_tela6(driver, parametros):
            print("‚ùå Erro: Falha ao implementar Tela 6")
            return
        
        # Implementar Tela 7
        if not implementar_tela7(driver, parametros):
            print("‚ùå Erro: Falha ao implementar Tela 7")
            return
        
        # Implementar Tela 8
        if not implementar_tela8(driver, parametros):
            print("‚ùå Erro: Falha ao implementar Tela 8")
            return
        
        print("\n" + "=" * 80)
        print("üéâ **RPA EXECUTADO COM SUCESSO TOTAL! TELAS 1-8 IMPLEMENTADAS!**")
        print("=" * 80)
        print(f"‚úÖ Total de telas executadas: 8")
        print(f"‚úÖ Tela 1: Sele√ß√£o Carro")
        print(f"‚úÖ Tela 2: Inser√ß√£o placa {parametros['placa']}")
        print(f"‚úÖ Tela 3: Confirma√ß√£o {parametros['marca']} {parametros['modelo']} ‚Üí Sim")
        print(f"‚úÖ Tela 4: Ve√≠culo segurado ‚Üí {parametros['veiculo_segurado']}")
        print(f"‚úÖ Tela 5: Estimativa inicial")
        print(f"‚úÖ Tela 6: Tipo combust√≠vel {parametros['combustivel']} + checkboxes")
        print(f"‚úÖ Tela 7: Endere√ßo pernoite (CEP {parametros['cep']})")
        print(f"‚úÖ Tela 8: Finalidade ve√≠culo ‚Üí {parametros['uso_veiculo']}")
        print(f"üìÅ Todos os arquivos salvos em: /opt/imediatoseguros-rpa/temp/")
        print(f"üîß Par√¢metros utilizados: {len(parametros)} par√¢metros do JSON")
        print(f"ÔøΩÔøΩ Endere√ßo completo: {parametros.get('endereco_completo', 'N/A')}")
        
    except Exception as e:
        print(f"‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
    
    finally:
        # Limpeza
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")
        
        fim = datetime.now()
        print(f"‚è∞ Fim: {fim.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
