#!/usr/bin/env python3
"""
Investiga√ß√£o Espec√≠fica da Tela 5 - Confirma√ß√£o do Ve√≠culo
Para entender por que est√° falhando ap√≥s Tela 3
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def aguardar_carregamento_pagina(driver, timeout=30):
    """Aguarda o carregamento completo da p√°gina"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def salvar_estado_tela(driver, tela_num, acao, temp_dir):
    """Salva o estado atual da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    tela_dir = f"temp/tela_{tela_num:02d}"
    os.makedirs(tela_dir, exist_ok=True)
    
    html_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(driver.page_source)
    
    screenshot_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.png"
    driver.save_screenshot(screenshot_file)
    
    info_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"TELA {tela_num:02d}: {acao}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"Arquivos salvos em: {os.path.abspath(tela_dir)}\n")
    
    print(f"==================================================================================")
    print(f"Ô∏è  **TELA {tela_num:02d}: {acao}** - {timestamp}")
    print(f"==================================================================================")
    print(f"üåê URL: {driver.current_url}")
    print(f"üìÑ T√≠tulo: {driver.title}")
    print(f" A√ß√£o: {acao}")
    print(f" Arquivos salvos em: {os.path.abspath(tela_dir)}")
    
    return tela_dir

def investigar_tela5():
    """Investiga especificamente a Tela 5"""
    print("ÔøΩÔøΩ **INVESTIGA√á√ÉO ESPEC√çFICA DA TELA 5**")
    print("=" * 60)
    
    driver = None
    temp_dir = None
    
    try:
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # TELA 1: Selecionar Carro
        print("\nüì± TELA 1: Selecionando Carro...")
        driver.get("https://www.app.tosegurado.com.br/cotacao")
        
        if not aguardar_carregamento_pagina(driver):
            print("‚ùå Erro: P√°gina n√£o carregou")
            return
        
        salvar_estado_tela(driver, 1, "inicial", None)
        
        # Clicar no bot√£o Carro
        carro_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
        )
        salvar_estado_tela(driver, 1, "antes_clique", None)
        carro_btn.click()
        print("‚úÖ Carro selecionado")
        
        if not aguardar_carregamento_pagina(driver):
            print("‚ùå Erro: P√°gina n√£o carregou ap√≥s selecionar Carro")
            return
        
        salvar_estado_tela(driver, 1, "apos_clique", None)
        
        # TELA 2: Inserir placa
        print("\nüì± TELA 2: Inserindo placa...")
        placa_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        salvar_estado_tela(driver, 2, "inicial", None)
        
        placa_input.clear()
        placa_input.send_keys("EED3D56")
        print("‚úÖ Placa EED3D56 inserida")
        
        salvar_estado_tela(driver, 2, "placa_inserida", None)
        
        # TELA 3: Clicar em Continuar
        print("\nüì± TELA 3: Clicando Continuar...")
        continuar_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar"))
        )
        salvar_estado_tela(driver, 3, "antes_clique", None)
        continuar_btn.click()
        print("‚úÖ Continuar clicado")
        
        # Aguardar carregamento e investigar
        print("‚è≥ Aguardando carregamento da p√°gina...")
        time.sleep(5)  # Aguardar um pouco mais
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        # INVESTIGAR O QUE CARREGOU
        print("\nüîç **INVESTIGANDO O QUE CARREGOU AP√ìS TELA 3:**")
        print("=" * 60)
        
        # Salvar estado atual
        salvar_estado_tela(driver, 3, "apos_clique", None)
        
        # Verificar URL e t√≠tulo
        print(f"ÔøΩÔøΩ URL Atual: {driver.current_url}")
        print(f"üìÑ T√≠tulo Atual: {driver.title}")
        
        # Procurar por elementos espec√≠ficos
        print("\nüîç **PROCURANDO ELEMENTOS ESPEC√çFICOS:**")
        
        # Procurar por confirma√ß√£o de ve√≠culo
        try:
            confirmacao_elements = driver.find_elements(By.NAME, "confirmacaoVeiculo")
            print(f"‚úÖ Elementos 'confirmacaoVeiculo' encontrados: {len(confirmacao_elements)}")
            
            for i, elem in enumerate(confirmacao_elements):
                print(f"   Elemento {i+1}: {elem.get_attribute('outerHTML')[:200]}...")
        except:
            print("‚ùå Erro ao procurar 'confirmacaoVeiculo'")
        
        # Procurar por texto COROLLA
        try:
            corolla_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'COROLLA')]")
            print(f"‚úÖ Elementos 'COROLLA' encontrados: {len(corolla_elements)}")
            
            for i, elem in enumerate(corolla_elements):
                print(f"   Elemento {i+1}: {elem.text[:100]}...")
        except:
            print("‚ùå Erro ao procurar 'COROLLA'")
        
        # Procurar por bot√µes Continuar
        try:
            continuar_elements = driver.find_elements(By.XPATH, "//button[contains(., 'Continuar')]")
            print(f"‚úÖ Bot√µes 'Continuar' encontrados: {len(continuar_elements)}")
            
            for i, elem in enumerate(continuar_elements):
                print(f"   Bot√£o {i+1}: {elem.get_attribute('outerHTML')[:200]}...")
        except:
            print("‚ùå Erro ao procurar bot√µes 'Continuar'")
        
        # Procurar por poss√≠veis erros
        try:
            error_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'erro') or contains(text(), 'Erro') or contains(text(), 'error') or contains(text(), 'Error')]")
            print(f"‚ö†Ô∏è Elementos de erro encontrados: {len(error_elements)}")
            
            for i, elem in enumerate(error_elements):
                print(f"   Erro {i+1}: {elem.text[:100]}...")
        except:
            print("‚úÖ Nenhum elemento de erro encontrado")
        
        # Salvar HTML completo para an√°lise
        print("\nüíæ **HTML COMPLETO SALVO PARA AN√ÅLISE:**")
        print(f"ÔøΩÔøΩ Arquivo: temp/tela_03/tela_03_apos_clique.html")
        
        print("\nÔøΩÔøΩ **INVESTIGA√á√ÉO CONCLU√çDA!**")
        print("üìÅ Verifique os arquivos salvos para an√°lise detalhada")
        
    except Exception as e:
        print(f"‚ùå **ERRO DURANTE INVESTIGA√á√ÉO:** {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")

if __name__ == "__main__":
    investigar_tela5()
