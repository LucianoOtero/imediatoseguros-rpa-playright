#!/usr/bin/env python3
"""
RPA T√¥ Segurado - DELAYS EXTREMOS
Solu√ß√£o para o problema de stale element reference
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def aguardar_carregamento_pagina(driver, timeout=60):
    """Aguarda o carregamento completo da p√°gina com timeout maior"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def aguardar_estabilizacao(driver, segundos=10):
    """Aguarda a estabiliza√ß√£o da p√°gina"""
    print(f"‚è≥ Aguardando estabiliza√ß√£o da p√°gina ({segundos}s)...")
    time.sleep(segundos)

def clicar_com_delay_extremo(driver, by, value, descricao="elemento", timeout=30):
    """Clica em um elemento com delay extremo para evitar stale element"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        # Aguardar elemento estar presente
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        
        # AGUARDAR ESTABILIZA√á√ÉO EXTREMA
        aguardar_estabilizacao(driver, 15)
        
        # Verificar se ainda est√° presente
        try:
            elemento = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((by, value))
            )
        except:
            print(f"‚ö†Ô∏è {descricao} n√£o est√° mais clic√°vel, tentando JavaScript...")
            # Tentar JavaScript como fallback
            driver.execute_script(f"document.querySelector('{by}={value}').click();")
            print(f"‚úÖ {descricao} clicado via JavaScript")
            return True
        
        # Scroll para o elemento
        driver.execute_script("arguments[0].scrollIntoView(true);", elemento)
        time.sleep(2)
        
        # Clicar
        elemento.click()
        print(f"‚úÖ {descricao} clicado com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao clicar em {descricao}: {e}")
        return False

def preencher_com_delay_extremo(driver, by, value, texto, descricao="campo", timeout=30):
    """Preenche um campo com delay extremo"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        # Aguardar elemento estar presente
        elemento = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        
        # AGUARDAR ESTABILIZA√á√ÉO EXTREMA
        aguardar_estabilizacao(driver, 10)
        
        # Verificar se ainda est√° presente
        try:
            elemento = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((by, value))
            )
        except:
            print(f"‚ö†Ô∏è {descricao} n√£o est√° mais presente, tentando JavaScript...")
            # Tentar JavaScript como fallback
            driver.execute_script(f"document.getElementById('{value}').value = '{texto}';")
            print(f"‚úÖ {descricao} preenchido via JavaScript")
            return True
        
        # Limpar e preencher
        elemento.clear()
        time.sleep(1)
        elemento.send_keys(texto)
        print(f"‚úÖ {descricao} preenchido: {texto}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao preencher {descricao}: {e}")
        return False

def salvar_estado_tela(driver, tela_num, acao, temp_dir):
    """Salva o estado atual da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    tela_dir = f"temp/tela_{tela_num:02d}"
    os.makedirs(tela_dir, exist_ok=True)
    
    html_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(driver.page_source)
    
    screenshot_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.png"
    driver.save_screenshot(screenshot_file)
    
    info_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"TELA {tela_num:02d}: {acao}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"Arquivos salvos em: {os.path.abspath(tela_dir)}\n")
    
    print(f"==================================================================================")
    print(f"Ô∏è  **TELA {tela_num:02d}: {acao}** - {timestamp}")
    print(f"==================================================================================")
    print(f"üåê URL: {driver.current_url}")
    print(f"üìÑ T√≠tulo: {driver.title}")
    print(f" A√ß√£o: {acao}")
    print(f" Arquivos salvos em: {os.path.abspath(tela_dir)}")
    
    return tela_dir

def navegar_ate_tela5(driver):
    """Navega o RPA at√© a Tela 5 com delays extremos"""
    print("üöÄ **NAVEGANDO AT√â TELA 5 COM DELAYS EXTREMOS**")
    
    # TELA 1: Sele√ß√£o do tipo de seguro
    print("\nüì± TELA 1: Selecionando Carro...")
    driver.get("https://www.app.tosegurado.com.br/cotacao")
    
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ùå Erro: P√°gina n√£o carregou")
        return False
    
    salvar_estado_tela(driver, 1, "inicial", None)
    
    # AGUARDAR ESTABILIZA√á√ÉO EXTREMA
    aguardar_estabilizacao(driver, 20)
    
    # Clicar no bot√£o Carro com delay extremo
    salvar_estado_tela(driver, 1, "antes_clique", None)
    
    if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Carro')]", "bot√£o Carro"):
        print("‚ùå Erro: Falha ao clicar no bot√£o Carro")
        return False
    
    # AGUARDAR CARREGAMENTO COMPLETO
    print("‚è≥ Aguardando carregamento completo da p√°gina...")
    time.sleep(10)
    
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ùå Erro: P√°gina n√£o carregou ap√≥s selecionar Carro")
        return False
    
    # AGUARDAR ESTABILIZA√á√ÉO EXTREMA
    aguardar_estabilizacao(driver, 20)
    
    salvar_estado_tela(driver, 1, "apos_clique", None)
    
    # TELA 2: Inser√ß√£o da placa
    print("\nüì± TELA 2: Inserindo placa...")
    
    # AGUARDAR ESTABILIZA√á√ÉO EXTREMA
    aguardar_estabilizacao(driver, 15)
    
    salvar_estado_tela(driver, 2, "inicial", None)
    
    # Preencher placa com delay extremo
    if not preencher_com_delay_extremo(driver, By.ID, "placaTelaDadosPlaca", "EED3D56", "placa"):
        print("‚ùå Erro: Falha ao preencher placa")
        return False
    
    # AGUARDAR ESTABILIZA√á√ÉO EXTREMA
    aguardar_estabilizacao(driver, 15)
    
    salvar_estado_tela(driver, 2, "placa_inserida", None)
    
    # TELA 3: Clicar em Continuar
    print("\nüì± TELA 3: Clicando Continuar...")
    
    if not clicar_com_delay_extremo(driver, By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar", "bot√£o Continuar Tela 3"):
        print("‚ùå Erro: Falha ao clicar Continuar na Tela 3")
        return False
    
    # AGUARDAR CARREGAMENTO COMPLETO
    print("‚è≥ Aguardando carregamento da p√°gina...")
    time.sleep(15)
    
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
    
    # AGUARDAR ESTABILIZA√á√ÉO EXTREMA
    aguardar_estabilizacao(driver, 20)
    
    # INVESTIGAR O QUE CARREGOU
    print("\nüîç **INVESTIGANDO O QUE CARREGOU AP√ìS TELA 3:**")
    print("=" * 60)
    
    # Salvar estado atual
    salvar_estado_tela(driver, 3, "apos_clique", None)
    
    # Verificar URL e t√≠tulo
    print(f" URL Atual: {driver.current_url}")
    print(f"üìÑ T√≠tulo Atual: {driver.title}")
    
    # Procurar por elementos espec√≠ficos
    print("\nüîç **PROCURANDO ELEMENTOS ESPEC√çFICOS:**")
    
    # Procurar por confirma√ß√£o de ve√≠culo
    try:
        confirmacao_elements = driver.find_elements(By.NAME, "confirmacaoVeiculo")
        print(f"‚úÖ Elementos 'confirmacaoVeiculo' encontrados: {len(confirmacao_elements)}")
        
        for i, elem in enumerate(confirmacao_elements):
            print(f"   Elemento {i+1}: {elem.get_attribute('outerHTML')[:200]}...")
    except:
        print("‚ùå Erro ao procurar 'confirmacaoVeiculo'")
    
    # Procurar por texto COROLLA
    try:
        corolla_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'COROLLA')]")
        print(f"‚úÖ Elementos 'COROLLA' encontrados: {len(corolla_elements)}")
        
        for i, elem in enumerate(corolla_elements):
            print(f"   Elemento {i+1}: {elem.text[:100]}...")
    except:
        print("‚ùå Erro ao procurar 'COROLLA'")
    
    # Procurar por bot√µes Continuar
    try:
        continuar_elements = driver.find_elements(By.XPATH, "//button[contains(., 'Continuar')]")
        print(f"‚úÖ Bot√µes 'Continuar' encontrados: {len(continuar_elements)}")
        
        for i, elem in enumerate(continuar_elements):
            print(f"   Bot√£o {i+1}: {elem.get_attribute('outerHTML')[:200]}...")
    except:
        print("‚ùå Erro ao procurar bot√µes 'Continuar'")
    
    print("\n **INVESTIGA√á√ÉO CONCLU√çDA!**")
    print("üìÅ Verifique os arquivos salvos para an√°lise detalhada")
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ **RPA T√î SEGURADO - DELAYS EXTREMOS**")
    print("=" * 60)
    print(" OBJETIVO: Investigar Tela 5 com delays extremos")
    print("üîß SOLU√á√ÉO: Delays muito maiores para evitar stale element")
    print("=" * 60)
    
    inicio = datetime.now()
    print(f"‚è∞ In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        if navegar_ate_tela5(driver):
            print("\n **INVESTIGA√á√ÉO CONCLU√çDA COM SUCESSO!**")
        else:
            print("\n‚ùå **FALHA NA INVESTIGA√á√ÉO**")
    
    except Exception as e:
        print(f"‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")
        
        fim = datetime.now()
        print(f"‚è∞ Fim: {fim.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
