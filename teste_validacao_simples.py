#!/usr/bin/env python3
"""
Teste Simples de Valida√ß√£o de JSON
==================================

Teste direto da fun√ß√£o de valida√ß√£o sem executar scripts completos.

VERS√ÉO: 1.0.0
DATA: 29/08/2025
"""

import json
import sys
import os

def testar_validacao_direta():
    """Testa a valida√ß√£o diretamente"""
    
    print("üß™ **TESTE DIRETO DA FUN√á√ÉO DE VALIDA√á√ÉO**")
    print("=" * 60)
    
    # Adicionar utils ao path
    sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))
    
    try:
        from validacao_parametros import validar_parametros_entrada, ValidacaoParametrosError
        print("‚úÖ M√≥dulo de valida√ß√£o importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulo: {e}")
        return False
    
    # Carregar JSON do arquivo
    try:
        with open('parametros.json', 'r', encoding='utf-8') as arquivo:
            json_string = arquivo.read()
            print("‚úÖ JSON carregado do arquivo")
    except Exception as e:
        print(f"‚ùå Erro ao carregar JSON: {e}")
        return False
    
    # Teste 1: Valida√ß√£o com JSON v√°lido
    print("\nüîç **Teste 1: JSON v√°lido**")
    try:
        parametros_validados = validar_parametros_entrada(json_string)
        print("‚úÖ Valida√ß√£o passou com sucesso!")
        
        # Mostrar resumo
        print("\nüìã **Par√¢metros validados:**")
        print(f"  ‚Ä¢ Placa: {parametros_validados.get('placa')}")
        print(f"  ‚Ä¢ Marca: {parametros_validados.get('marca')}")
        print(f"  ‚Ä¢ Modelo: {parametros_validados.get('modelo')}")
        print(f"  ‚Ä¢ Nome: {parametros_validados.get('nome')}")
        print(f"  ‚Ä¢ CPF: {parametros_validados.get('cpf')}")
        print(f"  ‚Ä¢ Email: {parametros_validados.get('email')}")
        
        config = parametros_validados.get('configuracao', {})
        print(f"  ‚Ä¢ Log: {config.get('log')}")
        print(f"  ‚Ä¢ Display: {config.get('display')}")
        print(f"  ‚Ä¢ Tempo Estabiliza√ß√£o: {config.get('tempo_estabilizacao')}")
        print(f"  ‚Ä¢ Tempo Carregamento: {config.get('tempo_carregamento')}")
        
    except ValidacaoParametrosError as e:
        print(f"‚ùå Erro de valida√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False
    
    # Teste 2: JSON inv√°lido
    print("\nüîç **Teste 2: JSON inv√°lido**")
    try:
        validar_parametros_entrada('{"invalid": json}')
        print("‚ùå Deveria ter falhado com JSON inv√°lido")
        return False
    except ValidacaoParametrosError:
        print("‚úÖ Erro capturado corretamente")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False
    
    # Teste 3: Campo obrigat√≥rio faltando
    print("\nüîç **Teste 3: Campo obrigat√≥rio faltando**")
    json_incompleto = {
        "configuracao": {
            "log": True,
            "display": True,
            "tempo_estabilizacao": 1,
            "tempo_carregamento": 10
        },
        "url_base": "https://teste.com",
        # "placa" faltando
        "marca": "FORD",
        "modelo": "TESTE"
    }
    
    try:
        validar_parametros_entrada(json.dumps(json_incompleto))
        print("‚ùå Deveria ter falhado com campo obrigat√≥rio faltando")
        return False
    except ValidacaoParametrosError:
        print("‚úÖ Erro capturado corretamente")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False
    
    # Teste 4: Valor inv√°lido
    print("\nüîç **Teste 4: Valor inv√°lido**")
    json_valor_invalido = {
        "configuracao": {
            "log": True,
            "display": True,
            "tempo_estabilizacao": 1,
            "tempo_carregamento": 10
        },
        "url_base": "https://teste.com",
        "placa": "ABC1234",
        "marca": "FORD",
        "modelo": "TESTE",
        "ano": "2020",
        "combustivel": "INVALIDO",  # Valor inv√°lido
        "veiculo_segurado": "N√£o",
        "cep": "12345-678",
        "endereco_completo": "Rua Teste, 123",
        "uso_veiculo": "Comercial",
        "nome": "Jo√£o Silva",
        "cpf": "12345678901",
        "data_nascimento": "01/01/1990",
        "sexo": "Masculino",
        "estado_civil": "Solteiro",
        "email": "joao@teste.com",
        "celular": "(11) 99999-9999"
    }
    
    try:
        validar_parametros_entrada(json.dumps(json_valor_invalido))
        print("‚ùå Deveria ter falhado com valor inv√°lido")
        return False
    except ValidacaoParametrosError:
        print("‚úÖ Erro capturado corretamente")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    
    print("üöÄ **INICIANDO TESTE DIRETO DE VALIDA√á√ÉO**")
    print("=" * 60)
    
    sucesso = testar_validacao_direta()
    
    print("\n" + "=" * 60)
    if sucesso:
        print("üéâ **TESTE DIRETO CONCLU√çDO COM SUCESSO!**")
        print("‚úÖ A fun√ß√£o de valida√ß√£o est√° funcionando perfeitamente")
        print("\nüìã **RESUMO:**")
        print("  ‚Ä¢ ‚úÖ JSON v√°lido √© aceito")
        print("  ‚Ä¢ ‚úÖ JSON inv√°lido √© rejeitado")
        print("  ‚Ä¢ ‚úÖ Campos obrigat√≥rios s√£o verificados")
        print("  ‚Ä¢ ‚úÖ Valores permitidos s√£o validados")
    else:
        print("‚ùå **TESTE DIRETO FALHOU!**")
        print("‚ö†Ô∏è  Verifique os erros acima")
    
    return 0 if sucesso else 1

if __name__ == "__main__":
    sys.exit(main())
