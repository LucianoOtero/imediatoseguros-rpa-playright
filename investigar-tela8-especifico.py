#!/usr/bin/env python3
"""
Investiga√ß√£o Espec√≠fica da Tela 8 - Estimativa Inicial
Para entender por que est√° falhando
"""

import time
import tempfile
import shutil
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    print("üîß Configurando Chrome...")
    
    temp_dir = tempfile.mkdtemp()
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver, temp_dir

def aguardar_carregamento_pagina(driver, timeout=60):
    """Aguarda o carregamento completo da p√°gina"""
    try:
        WebDriverWait(driver, timeout).until(
            lambda d: d.execute_script("return document.readyState") == "complete"
        )
        return True
    except:
        return False

def aguardar_estabilizacao(driver, segundos=15):
    """Aguarda a estabiliza√ß√£o da p√°gina"""
    print(f"‚è≥ Aguardando estabiliza√ß√£o da p√°gina ({segundos}s)...")
    time.sleep(segundos)

def clicar_com_delay_extremo(driver, by, value, descricao="elemento", timeout=30):
    """Clica em um elemento com delay extremo"""
    try:
        print(f"‚è≥ Aguardando {descricao} aparecer...")
        
        elemento = WebDriverWait(driver, timeout).until(
            EC.element_to_be_clickable((by, value))
        )
        
        print(f"‚úÖ {descricao} encontrado, aguardando estabiliza√ß√£o...")
        aguardar_estabilizacao(driver, 15)
        
        elemento.click()
        print(f"‚úÖ {descricao} clicado com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao clicar em {descricao}: {e}")
        return False

def clicar_radio_via_javascript(driver, texto_radio, descricao="radio"):
    """Clica em um radio button via JavaScript"""
    try:
        print(f"‚è≥ Aguardando radio {descricao} aparecer...")
        aguardar_estabilizacao(driver, 15)
        
        script = f"""
        var elementos = document.querySelectorAll('input[type="radio"], label, span, div');
        var radioEncontrado = null;
        
        for (var i = 0; i < elementos.length; i++) {{
            var elemento = elementos[i];
            if (elemento.textContent && elemento.textContent.includes('{texto_radio}')) {{
                radioEncontrado = elemento;
                break;
            }}
        }}
        
        if (radioEncontrado) {{
            radioEncontrado.click();
            return 'Radio clicado: ' + radioEncontrado.outerHTML.substring(0, 100);
        }} else {{
            return 'Radio n√£o encontrado';
        }}
        """
        
        resultado = driver.execute_script(script)
        print(f"üéØ {resultado}")
        
        if "Radio clicado" in resultado:
            print(f"‚úÖ Radio {descricao} clicado via JavaScript")
            return True
        else:
            print(f"‚ùå Radio {descricao} n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao clicar radio {descricao}: {e}")
        return False

def salvar_estado_tela(driver, tela_num, acao, temp_dir):
    """Salva o estado atual da tela"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    tela_dir = f"temp/tela_{tela_num:02d}"
    os.makedirs(tela_dir, exist_ok=True)
    
    html_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.html"
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(driver.page_source)
    
    screenshot_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.png"
    driver.save_screenshot(screenshot_file)
    
    info_file = f"{tela_dir}/tela_{tela_num:02d}_{acao}.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"TELA {tela_num:02d}: {acao}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"URL: {driver.current_url}\n")
        f.write(f"T√≠tulo: {driver.title}\n")
        f.write(f"Arquivos salvos em: {os.path.abspath(tela_dir)}\n")
    
    print(f"==================================================================================")
    print(f"Ô∏è  **TELA {tela_num:02d}: {acao}** - {timestamp}")
    print(f"==================================================================================")
    print(f"üåê URL: {driver.current_url}")
    print(f"üìÑ T√≠tulo: {driver.title}")
    print(f" A√ß√£o: {acao}")
    print(f" Arquivos salvos em: {os.path.abspath(tela_dir)}")
    
    return tela_dir

def navegar_ate_tela7(driver):
    """Navega o RPA at√© a Tela 7 usando o m√©todo que funcionou"""
    print("üöÄ **NAVEGANDO AT√â TELA 7 - M√âTODO FUNCIONANDO**")
    
    # TELA 1: Sele√ß√£o do tipo de seguro
    print("\nüì± TELA 1: Selecionando Carro...")
    driver.get("https://www.app.tosegurado.com.br/cotacao")
    
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ùå Erro: P√°gina n√£o carregou")
        return False
    
    salvar_estado_tela(driver, 1, "inicial", None)
    aguardar_estabilizacao(driver, 20)
    
    # Clicar no bot√£o Carro
    salvar_estado_tela(driver, 1, "antes_clique", None)
    
    if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Carro')]", "bot√£o Carro"):
        print("‚ùå Erro: Falha ao clicar no bot√£o Carro")
        return False
    
    time.sleep(10)
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ùå Erro: P√°gina n√£o carregou ap√≥s selecionar Carro")
        return False
    
    aguardar_estabilizacao(driver, 20)
    salvar_estado_tela(driver, 1, "apos_clique", None)
    
    # TELA 2: Inser√ß√£o da placa
    print("\nüì± TELA 2: Inserindo placa...")
    aguardar_estabilizacao(driver, 15)
    
    salvar_estado_tela(driver, 2, "inicial", None)
    
    # Preencher placa
    try:
        placa_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "placaTelaDadosPlaca"))
        )
        aguardar_estabilizacao(driver, 10)
        
        placa_input.clear()
        placa_input.send_keys("EED3D56")
        print("‚úÖ Placa EED3D56 inserida")
        
        aguardar_estabilizacao(driver, 15)
        salvar_estado_tela(driver, 2, "placa_inserida", None)
        
    except Exception as e:
        print(f"‚ùå Erro ao inserir placa: {e}")
        return False
    
    # TELA 3: Clicar em Continuar
    print("\nüì± TELA 3: Clicando Continuar...")
    
    if not clicar_com_delay_extremo(driver, By.ID, "gtm-telaDadosAutoCotarComPlacaContinuar", "bot√£o Continuar Tela 3"):
        print("‚ùå Erro: Falha ao clicar Continuar na Tela 3")
        return False
    
    time.sleep(15)
    if not aguardar_carregamento_pagina(driver, 60):
        print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
    
    aguardar_estabilizacao(driver, 20)
    salvar_estado_tela(driver, 3, "apos_clique", None)
    
    # TELA 5: Confirma√ß√£o do ve√≠culo
    print("\nüì± TELA 5: Confirmando ve√≠culo...")
    
    try:
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'COROLLA')]"))
        )
        print("‚úÖ Tela 5 carregada - confirma√ß√£o do ve√≠culo detectada!")
        
        salvar_estado_tela(driver, 5, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 5, "confirmacao_carregada", None)
        
        # Selecionar "Sim" para confirma√ß√£o do ve√≠culo
        print("‚è≥ Selecionando 'Sim' para confirma√ß√£o do ve√≠culo...")
        
        if not clicar_radio_via_javascript(driver, "Sim", "Sim para confirma√ß√£o"):
            print("‚ö†Ô∏è Radio 'Sim' n√£o encontrado - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Continuar')]", "bot√£o Continuar Tela 5"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 5")
            return False
        
        time.sleep(15)
        if not aguardar_carregamento_pagina(driver, 60):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 20)
        salvar_estado_tela(driver, 5, "apos_continuar", None)
        print("‚úÖ **TELA 5 IMPLEMENTADA COM SUCESSO!**")
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 5: {e}")
        return False
    
    # TELA 6: Pergunta se ve√≠culo j√° est√° segurado
    print("\nüì± TELA 6: Selecionando 'N√£o' para ve√≠culo segurado...")
    
    try:
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'segurado') or contains(text(), 'Segurado')]"))
        )
        print("‚úÖ Tela 6 carregada - pergunta sobre ve√≠culo segurado detectada!")
        
        salvar_estado_tela(driver, 6, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 6, "pergunta_carregada", None)
        
        # Selecionar "N√£o" para ve√≠culo j√° segurado
        print("‚è≥ Selecionando 'N√£o' para ve√≠culo j√° segurado...")
        
        if not clicar_radio_via_javascript(driver, "N√£o", "N√£o para ve√≠culo segurado"):
            print("‚ö†Ô∏è Radio 'N√£o' n√£o encontrado - tentando prosseguir...")
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Continuar')]", "bot√£o Continuar Tela 6"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 6")
            return False
        
        time.sleep(15)
        if not aguardar_carregamento_pagina(driver, 60):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 20)
        salvar_estado_tela(driver, 6, "apos_continuar", None)
        print("‚úÖ **TELA 6 IMPLEMENTADA COM SUCESSO!**")
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 6: {e}")
        return False
    
    # TELA 7: Confirma√ß√£o que ve√≠culo n√£o est√° segurado
    print("\n TELA 7: Aguardando confirma√ß√£o...")
    
    try:
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Continuar')]"))
        )
        print("‚úÖ Tela 7 carregada - confirma√ß√£o detectada!")
        
        salvar_estado_tela(driver, 7, "inicial", None)
        
        if not aguardar_carregamento_pagina(driver, 30):
            print("‚ùå Erro: P√°gina n√£o carregou completamente")
            return False
        
        salvar_estado_tela(driver, 7, "confirmacao_carregada", None)
        
        # Clicar em Continuar
        print("‚è≥ Aguardando bot√£o Continuar aparecer...")
        
        if not clicar_com_delay_extremo(driver, By.XPATH, "//button[contains(., 'Continuar')]", "bot√£o Continuar Tela 7"):
            print("‚ùå Erro: Falha ao clicar Continuar na Tela 7")
            return False
        
        time.sleep(15)
        if not aguardar_carregamento_pagina(driver, 60):
            print("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
        
        aguardar_estabilizacao(driver, 20)
        salvar_estado_tela(driver, 7, "apos_continuar", None)
        print("‚úÖ **TELA 7 IMPLEMENTADA COM SUCESSO!**")
        
    except Exception as e:
        print(f"‚ùå Erro na Tela 7: {e}")
        return False
    
    return True

def investigar_tela8(driver):
    """Investiga especificamente a Tela 8"""
    print("\n **INVESTIGANDO TELA 8: Estimativa inicial**")
    
    # Aguardar Tela 8 carregar com timeout muito maior
    print("‚è≥ Aguardando Tela 8 carregar (timeout: 60s)...")
    
    try:
        # Tentar diferentes elementos da Tela 8
        elementos_detectados = []
        
        # Aguardar muito mais tempo
        time.sleep(30)
        
        # Verificar se a p√°gina mudou
        print(f" URL Atual: {driver.current_url}")
        print(f"üìÑ T√≠tulo Atual: {driver.title}")
        
        # Salvar estado atual
        salvar_estado_tela(driver, 8, "investigacao", None)
        
        # Procurar por diferentes elementos
        print("\nüîç **PROCURANDO ELEMENTOS DA TELA 8:**")
        
        # Procurar por estimativa
        try:
            estimativa_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'estimativa') or contains(text(), 'Estimativa')]")
            print(f"‚úÖ Elementos 'estimativa': {len(estimativa_elements)}")
            if estimativa_elements:
                elementos_detectados.append("estimativa")
        except:
            print("‚ùå Erro ao procurar 'estimativa'")
        
        # Procurar por inicial
        try:
            inicial_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'inicial') or contains(text(), 'Inicial')]")
            print(f"‚úÖ Elementos 'inicial': {len(inicial_elements)}")
            if inicial_elements:
                elementos_detectados.append("inicial")
        except:
            print("‚ùå Erro ao procurar 'inicial'")
        
        # Procurar por carrossel
        try:
            carrossel_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'carrossel') or contains(text(), 'Carrossel')]")
            print(f"‚úÖ Elementos 'carrossel': {len(carrossel_elements)}")
            if carrossel_elements:
                elementos_detectados.append("carrossel")
        except:
            print("‚ùå Erro ao procurar 'carrossel'")
        
        # Procurar por cobertura
        try:
            cobertura_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'cobertura') or contains(text(), 'Cobertura')]")
            print(f"‚úÖ Elementos 'cobertura': {len(cobertura_elements)}")
            if cobertura_elements:
                elementos_detectados.append("cobertura")
        except:
            print("‚ùå Erro ao procurar 'cobertura'")
        
        # Procurar por loading/carregando
        try:
            loading_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'carregando') or contains(text(), 'Carregando') or contains(text(), 'loading') or contains(text(), 'Loading') or contains(text(), 'aguarde') or contains(text(), 'Aguarde')]")
            print(f"‚è≥ Elementos de loading: {len(loading_elements)}")
            if loading_elements:
                elementos_detectados.append("loading")
                for i, elem in enumerate(loading_elements):
                    print(f"   Loading {i+1}: {elem.text[:100]}...")
        except:
            print("‚ùå Erro ao procurar elementos de loading")
        
        # Procurar por bot√µes Continuar
        try:
            continuar_elements = driver.find_elements(By.XPATH, "//button[contains(., 'Continuar')]")
            print(f"‚úÖ Bot√µes 'Continuar': {len(continuar_elements)}")
            if continuar_elements:
                elementos_detectados.append("continuar")
                for i, elem in enumerate(continuar_elements):
                    print(f"   Bot√£o {i+1}: {elem.get_attribute('outerHTML')[:200]}...")
        except:
            print("‚ùå Erro ao procurar bot√µes 'Continuar'")
        
        print(f"\n **ELEMENTOS DETECTADOS: {', '.join(elementos_detectados) if elementos_detectados else 'Nenhum'}")
        
        if "loading" in elementos_detectados:
            print("‚è≥ **TELA 8 EST√Å CARREGANDO - AGUARDANDO MAIS TEMPO...**")
            time.sleep(30)
            
            # Salvar estado ap√≥s aguardar mais
            salvar_estado_tela(driver, 8, "apos_aguardar_mais", None)
            
            # Verificar novamente
            print("üîç **VERIFICANDO NOVAMENTE AP√ìS AGUARDAR MAIS...**")
            
            # Procurar por elementos novamente
            try:
                estimativa_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'estimativa') or contains(text(), 'Estimativa')]")
                print(f"‚úÖ Elementos 'estimativa' ap√≥s aguardar: {len(estimativa_elements)}")
                
                carrossel_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'carrossel') or contains(text(), 'Carrossel')]")
                print(f"‚úÖ Elementos 'carrossel' ap√≥s aguardar: {len(carrossel_elements)}")
                
                if estimativa_elements or carrossel_elements:
                    print("üéâ **TELA 8 CARREGOU AP√ìS AGUARDAR MAIS TEMPO!**")
                    return True
                else:
                    print("‚ùå **TELA 8 AINDA N√ÉO CARREGOU**")
                    return False
                    
            except Exception as e:
                print(f"‚ùå Erro ao verificar novamente: {e}")
                return False
        
        elif "estimativa" in elementos_detectados or "carrossel" in elementos_detectados:
            print("üéâ **TELA 8 CARREGOU COM SUCESSO!**")
            return True
        else:
            print("‚ùå **TELA 8 N√ÉO CARREGOU - ELEMENTOS N√ÉO ENCONTRADOS**")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro na investiga√ß√£o da Tela 8: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ **RPA T√î SEGURADO - INVESTIGA√á√ÉO TELA 8**")
    print("=" * 60)
    print(" OBJETIVO: Investigar especificamente a Tela 8")
    print("üîß M√âTODO: Delays extremos + investiga√ß√£o detalhada")
    print("=" * 60)
    
    inicio = datetime.now()
    print(f"‚è∞ In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}")
    
    driver = None
    temp_dir = None
    
    try:
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Navegar at√© Tela 7
        if not navegar_ate_tela7(driver):
            print("‚ùå Erro: Falha ao navegar at√© Tela 7")
            return
        
        # Investigar Tela 8
        if investigar_tela8(driver):
            print("\n **INVESTIGA√á√ÉO TELA 8 CONCLU√çDA COM SUCESSO!**")
        else:
            print("\n‚ùå **FALHA NA INVESTIGA√á√ÉO TELA 8**")
    
    except Exception as e:
        print(f"‚ùå **ERRO GERAL DURANTE EXECU√á√ÉO:** {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if driver:
            driver.quit()
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")
        
        fim = datetime.now()
        print(f"‚è∞ Fim: {fim.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
