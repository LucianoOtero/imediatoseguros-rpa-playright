<!-- ====================== -->
<!-- Google Tag Manager (noscript) - manter -->
<noscript>
  <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PD6J398"
          height="0" width="0"
          style="display:none;visibility:hidden"></iframe>
</noscript>
<!-- ====================== -->

<!-- ====================== -->
<!-- Submiss√£o especial: abre WhatsApp e depois envia o form -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    var form = document.getElementById('form-wp');
    if (!form) return;
    form.addEventListener('submit', function (e) {
      e.preventDefault();
      var whatsappUrl = "https://api.whatsapp.com/send?phone=551141718837&text=Ola.%20Quero%20fazer%20uma%20cotacao%20de%20seguro.";
      window.open(whatsappUrl, '_blank');
      form.submit();
    });
  });
</script>
<!-- ====================== -->

<!-- ====================== -->
<!-- Bibliotecas base -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.min.js" crossorigin="anonymous"></script>

<!-- SweetAlert2 v11.14.0 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.0/dist/sweetalert2.all.min.js" defer></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.0/dist/sweetalert2.min.css"/>
<!-- ====================== -->

<!-- ====================== -->
<!-- üõ†Ô∏è Footer Code Utils - Carregar fun√ß√µes utilit√°rias -->
<script>
(function() {
  // Carregar Utils.js dinamicamente antes de tudo
  const utilsScript = document.createElement('script');
  utilsScript.src = 'https://dev.bpsegurosimediato.com.br/webhooks/FooterCodeSiteDefinitivoUtils.js?v=2&nocache=' + Date.now();
  utilsScript.async = false; // Carregar de forma s√≠ncrona para garantir ordem
  
  console.log('üîÑ [FOOTER] Tentando carregar Utils.js da URL:', utilsScript.src);
  
  // Fun√ß√£o para verificar se todas as fun√ß√µes foram carregadas
  function verificarFuncoesUtils() {
    const requiredFunctions = [
      'onlyDigits', 'toUpperNospace', 'setFieldValue', 'readCookie',
      'generateSessionId', 'nativeSubmit', 'validarEmailLocal',
      'validarCPFFormato', 'validarCPFAlgoritmo', 'validarPlacaFormato',
      'validarCelularLocal', 'aplicarMascaraPlaca', 'sha1', 'hmacSHA256',
      'extractDataFromPH3A', 'extractVehicleFromPlacaFipe',
      'preencherEnderecoViaCEP'
    ];
    
    const missing = requiredFunctions.filter(fn => typeof window[fn] !== 'function');
    if (missing.length > 0) {
      console.error('‚ùå [FOOTER] Fun√ß√µes faltando:', missing);
      return false;
    } else {
      console.log('‚úÖ [FOOTER] Todas as fun√ß√µes utilit√°rias dispon√≠veis');
      return true;
    }
  }
  
  utilsScript.onload = function() {
    console.log('‚úÖ [FOOTER] Utils.js carregado com sucesso');
    verificarFuncoesUtils();
    
    // Disparar evento customizado para indicar que Utils est√° pronto
    window.dispatchEvent(new CustomEvent('footerUtilsLoaded'));
  };
  
  utilsScript.onerror = function(error) {
    console.error('‚ùå [FOOTER] Erro ao carregar Utils.js');
    console.error('‚ùå [FOOTER] Detalhes do erro:', error);
    console.error('‚ùå [FOOTER] URL tentada:', utilsScript.src);
    console.error('‚ùå [FOOTER] Script element:', utilsScript);
    
    // Tentar diagnosticar o problema
    fetch(utilsScript.src, { method: 'HEAD' })
      .then(response => {
        console.log('‚úÖ [FOOTER] HEAD request OK - Status:', response.status);
        console.log('‚úÖ [FOOTER] Content-Type:', response.headers.get('content-type'));
      })
      .catch(err => {
        console.error('‚ùå [FOOTER] HEAD request falhou:', err);
      });
    
    console.warn('‚ö†Ô∏è [FOOTER] Algumas funcionalidades podem n√£o funcionar corretamente');
  };
  
  document.head.appendChild(utilsScript);
})();
</script>
<!-- ====================== -->

<!-- ====================== -->
<!-- üéØ CONFIGURA√á√ÉO RPA GLOBAL -->
<script>
  // Flag global para controle do RPA
  window.rpaEnabled = false;
  console.log('üéØ [CONFIG] RPA habilitado:', window.rpaEnabled);
  
  // FASE 0: Fun√ß√£o b√°sica de logging para teste
  function logDebug(level, message, data = null) {
    const logData = {
      level: level,
      message: message,
      data: data,
      timestamp: new Date().toISOString(),
      sessionId: window.sessionId || 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
      url: window.location.href,
      userAgent: navigator.userAgent
    };
    
    // Enviar para sistema PHP de logging com tratamento completo de resposta
    fetch('https://bpsegurosimediato.com.br/logging_system/debug_logger_db.php', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(logData),
      mode: 'cors',
      credentials: 'omit'
    })
    .then(response => {
      console.log(`[LOG DEBUG] Status: ${response.status} ${response.statusText}`);
      console.log(`[LOG DEBUG] Headers:`, Object.fromEntries(response.headers.entries()));
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      return response.text(); // Usar text() primeiro para ver se h√° conte√∫do
    })
    .then(text => {
      console.log(`[LOG DEBUG] Resposta bruta:`, text);
      
      try {
        const result = JSON.parse(text);
        console.log(`[LOG DEBUG] Sucesso:`, result);
        
        if (result.success) {
          console.log(`[LOG DEBUG] Log enviado com sucesso! ID: ${result.logged?.log_id || 'N/A'}`);
        } else {
          console.error(`[LOG DEBUG] Erro no servidor:`, result.error);
        }
      } catch (parseError) {
        console.error(`[LOG DEBUG] Erro ao fazer parse da resposta:`, parseError);
        console.error(`[LOG DEBUG] Resposta que causou erro:`, text);
      }
    })
    .catch(error => {
      console.error(`[LOG DEBUG] Erro na requisi√ß√£o:`, error);
      console.error(`[LOG DEBUG] Tipo do erro:`, error.constructor.name);
      console.error(`[LOG DEBUG] Mensagem:`, error.message);
      
      // Log adicional para debugging
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        console.error(`[LOG DEBUG] Poss√≠vel problema de CORS ou rede`);
      }
    });
    
    // Manter console.log para desenvolvimento local
    console.log(`[${level}] ${message}`, data);
  }
  
  // Expor fun√ß√µes globalmente
  window.logDebug = logDebug;
  
  // generateSessionId agora est√° no Utils.js
  
  // FASE 0: Teste da funcionalidade de logging
  logDebug('INFO', '[CONFIG] RPA habilitado via PHP Log', {rpaEnabled: window.rpaEnabled});
</script>
<!-- ====================== -->

<!-- ====================== -->
<!-- üéØ CARREGAMENTO DIN√ÇMICO RPA -->
<script>
// Fun√ß√£o para carregar script RPA dinamicamente
function loadRPAScript() {
  return new Promise((resolve, reject) => {
    // Verificar se j√° foi carregado
    if (window.MainPage && window.ProgressModalRPA) {
      console.log('üéØ Script RPA j√° carregado');
      resolve();
      return;
    }

    console.log('üéØ Carregando script RPA...');
    
    const script = document.createElement('script');
    script.src = 'https://mdmidia.com.br/webflow_injection_limpo.js';
    script.onload = () => {
      console.log('‚úÖ Script RPA carregado com sucesso');
      resolve();
    };
    script.onerror = () => {
      console.error('‚ùå Erro ao carregar script RPA');
      reject(new Error('Falha ao carregar script RPA'));
    };
    document.head.appendChild(script);
  });
}

// Expor fun√ß√£o globalmente
window.loadRPAScript = loadRPAScript;
</script>
<!-- ====================== -->

<!-- ====================== -->
<!-- WhatsApp links com GCLID -->
<script>
  // readCookie agora est√° no Utils.js
  // Aguardar Utils.js carregar antes de usar
  var gclid = null;
  
  function initGCLID() {
    if (typeof window.readCookie === 'function') {
      gclid = window.readCookie('gclid');
    } else {
      // Fallback se Utils.js n√£o carregou
      console.warn('‚ö†Ô∏è [FOOTER] readCookie n√£o dispon√≠vel, tentando novamente...');
      setTimeout(initGCLID, 100);
    }
  }
  
  // Tentar inicializar imediatamente ou aguardar carregamento do Utils
  if (typeof window.readCookie === 'function') {
    gclid = window.readCookie('gclid');
  } else {
    window.addEventListener('footerUtilsLoaded', initGCLID);
    setTimeout(initGCLID, 500); // Fallback ap√≥s 500ms
  }

  // Fun√ß√£o para carregar modal dinamicamente
  function loadWhatsAppModal() {
    if (window.whatsappModalLoaded) {
      console.log('‚úÖ [MODAL] Modal j√° carregado');
      return;
    }
    
    console.log('üîÑ [MODAL] Carregando modal de dev.bpsegurosimediato.com.br...');
    const script = document.createElement('script');
    script.src = 'https://dev.bpsegurosimediato.com.br/webhooks/MODAL_WHATSAPP_DEFINITIVO.js?v=23&force=' + Math.random();
    script.onload = function() {
      window.whatsappModalLoaded = true;
      console.log('‚úÖ [MODAL] Modal carregado com sucesso');
    };
    script.onerror = function() {
      console.error('‚ùå [MODAL] Erro ao carregar modal');
    };
    document.head.appendChild(script);
  }
  
  $(function () {
    // Interceptar clicks (MANT√âM ESTRUTURA ORIGINAL)
    ['whatsapplink', 'whatsapplinksucesso', 'whatsappfone1', 'whatsappfone2'].forEach(function (id) {
      var $el = $('#' + id);
      if ($el.length) {
        $el.on('click', function (e) {
          e.preventDefault(); // ‚úÖ NOVO: Bloqueia window.open direto
          
          // Se modal j√° existe, apenas abrir
          if ($('#whatsapp-modal').length) {
            $('#whatsapp-modal').fadeIn(300);
          } else {
            // Modal n√£o existe, carregar
            loadWhatsAppModal();
            
            // Aguardar modal ser criado pelo script
            const checkModal = setInterval(function() {
              if ($('#whatsapp-modal').length) {
                clearInterval(checkModal);
                $('#whatsapp-modal').fadeIn(300);
              }
            }, 100);
            
            // Timeout de 3 segundos
            setTimeout(function() {
              clearInterval(checkModal);
              if ($('#whatsapp-modal').length) {
                $('#whatsapp-modal').fadeIn(300);
              }
            }, 3000);
          }
        });
      }
    });
  });
</script>
<!-- ====================== -->

<!-- ====================== -->
<!-- üé® Tema SweetAlert2 (Imediato) + centraliza√ß√£o + √≠cone warning azul -->
<style id="swal2-brand-theme">
  :root {
    --brand-primary: #004A8D; /* azul escuro */
    --brand-accent:  #009FE3; /* azul claro  */
    --brand-text:    #004A8D;
  }

  /* Overlay com leve tint azul e sempre centralizado */
  .swal2-container {
    background-color: rgba(0, 74, 141, 0.35) !important;
    z-index: 99999 !important;
  }
  .swal2-popup {
    border-radius: 14px !important;
    box-shadow: 0 16px 50px rgba(0, 74, 141, 0.25) !important;
    padding-top: 22px !important;
  }
  .swal2-title {
    color: var(--brand-text) !important;
    font-weight: 700 !important;
  }
  .swal2-html-container {
    color: #2b3a4a !important;
    line-height: 1.45 !important;
    text-align: center !important;
    white-space: pre-wrap; /* permite \n */
  }

  /* ========= √çCONES ========= */
  /* WARNING ‚Üí c√≠rculo azul escuro, borda igual, ponto de exclama√ß√£o branco */
  .swal2-icon.swal2-warning {
    border-color: var(--brand-primary) !important;
    background-color: var(--brand-primary) !important;
    color: #fff !important; /* fallback */
  }
  .swal2-icon.swal2-warning .swal2-icon-content {
    color: #fff !important;  /* ponto de exclama√ß√£o */
    font-weight: 800 !important;
  }

  /* INFO / SUCCESS (mant√™m paleta da marca) */
  .swal2-icon.swal2-info {
    border-color: var(--brand-accent) !important;
    color: var(--brand-accent) !important;
  }
  .swal2-icon.swal2-success {
    border-color: rgba(0,159,227,.35) !important;
    color: var(--brand-accent) !important;
  }

  /* ========= BOT√ïES ========= */
  .swal2-actions { gap: 10px !important; }
  .swal2-styled.swal2-cancel {
    color: var(--brand-primary) !important;
    background: #fff !important;
    border: 2px solid var(--brand-primary) !important;
    border-radius: 10px !important;
    font-weight: 600 !important;
    min-width: 170px !important;
    padding: 10px 16px !important;
  }
  .swal2-styled.swal2-confirm {
    color: #fff !important;
    background: linear-gradient(180deg, var(--brand-accent) 0%, var(--brand-primary) 100%) !important;
    border: 0 !important;
    border-radius: 10px !important;
    font-weight: 600 !important;
    min-width: 170px !important;
    padding: 10px 16px !important;
  }
</style>
<!-- ====================== -->

<!-- ====================== -->
<!-- Valida√ß√µes unificadas: CPF, CEP, PLACA, CELULAR, E-MAIL -->
<script>
/* ========= CONFIG ========= */
const USE_PHONE_API = true;  // usa Apilayer al√©m da regra local
const APILAYER_KEY  = 'dce92fa84152098a3b5b7b8db24debbc';
const SAFETY_TICKET = '9bab7f0c2711c5accfb83588c859dc1103844a94';
const SAFETY_API_KEY = '20a7a1c297e39180bd80428ac13c363e882a531f';

// Flag para controlar valida√ß√£o PH3A
const VALIDAR_PH3A = false; // true = consulta API PH3A, false = apenas valida√ß√£o local

/* ========= SAFETYMAILS CRYPTO ========= */
// sha1 e hmacSHA256 agora est√£o no Utils.js

async function validarEmailSafetyMails(email) {
  try {
    if (typeof window.sha1 !== 'function' || typeof window.hmacSHA256 !== 'function') {
      console.error('‚ùå [FOOTER] sha1 ou hmacSHA256 n√£o dispon√≠veis');
      return null;
    }
    const code = await window.sha1(SAFETY_TICKET);
    const url = `https://${SAFETY_TICKET}.safetymails.com/api/${code}`;
    const hmac = await window.hmacSHA256(email, SAFETY_API_KEY);

    let form = new FormData();
    form.append('email', email);

    const response = await fetch(url, {
      method: "POST",
      headers: { "Sf-Hmac": hmac },
      body: form
    });
    
    if (!response.ok) {
      console.error(`SafetyMails HTTP Error: ${response.status}`);
      return null;
    }
    
    const data = await response.json();
    return data.Success ? data : null;
  } catch (error) {
    console.error('SafetyMails request failed:', error);
    return null;
  }
}

/* ========= LOADING ========= */
(function initLoading() {
  if (document.getElementById('si-loading-overlay')) return;
  const style = document.createElement('style');
  style.textContent = `
  #si-loading-overlay{position:fixed;inset:0;background:rgba(0,0,0,.35);display:none;z-index:99998;align-items:center;justify-content:center}
  #si-loading-box{background:#fff;border-radius:12px;padding:18px 22px;box-shadow:0 10px 30px rgba(0,0,0,.2);display:flex;gap:12px;align-items:center;font-family:system-ui}
  .si-spinner{width:20px;height:20px;border:3px solid #e5e7eb;border-top-color:#111827;border-radius:50%;animation:si-spin .8s linear infinite}
  @keyframes si-spin{to{transform:rotate(360deg)}}
  `;
  document.head.appendChild(style);

  const overlay = document.createElement('div');
  overlay.id = 'si-loading-overlay';
  overlay.innerHTML = `<div id="si-loading-box"><div class="si-spinner"></div><div id="si-loading-text">Validando dados‚Ä¶</div></div>`;
  document.body.appendChild(overlay);
})();
let __siLoadingCount = 0;
function showLoading(txt){const o=document.getElementById('si-loading-overlay');const t=document.getElementById('si-loading-text');if(!o||!t)return;if(txt)t.textContent=txt;__siLoadingCount++;o.style.display='flex';}
function hideLoading(){const o=document.getElementById('si-loading-overlay');if(!o)return;__siLoadingCount=Math.max(0,__siLoadingCount-1);if(__siLoadingCount===0)o.style.display='none';}

/* ========= HELPERS ========= */
// onlyDigits, toUpperNospace, nativeSubmit e setFieldValue agora est√£o no Utils.js

/* ========= CPF + API PH3A ========= */
// validarCPFFormato, validarCPFAlgoritmo e extractDataFromPH3A agora est√£o no Utils.js

function validarCPFApi(cpf) {
  if (typeof window.onlyDigits !== 'function' || typeof window.validarCPFFormato !== 'function' || typeof window.validarCPFAlgoritmo !== 'function') {
    console.error('‚ùå [FOOTER] Fun√ß√µes de CPF n√£o dispon√≠veis');
    return Promise.resolve({ok: false, reason: 'erro_utils'});
  }
  
  const cpfLimpo = window.onlyDigits(cpf);
  
  // Primeiro validar formato e algoritmo
  if (!window.validarCPFFormato(cpfLimpo) || !window.validarCPFAlgoritmo(cpfLimpo)) {
    return Promise.resolve({
      ok: false, 
      reason: 'formato'
    });
  }
  
  // Consultar API PH3A via proxy
  return fetch('https://mdmidia.com.br/cpf-validate.php', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      cpf: cpfLimpo
    })
  })
  .then(r => r.json())
  .then(j => {
    const ok = !!j && (j.codigo === 1 || j.success === true);
    return {
      ok, 
      reason: ok ? 'ok' : 'nao_encontrado', 
      parsed: ok && typeof window.extractDataFromPH3A === 'function' ? window.extractDataFromPH3A(j) : {
        sexo: '',
        dataNascimento: '',
        estadoCivil: ''
      }
    };
  })
  .catch(_ => ({
    ok: false, 
    reason: 'erro_api'
  }));
}

// Fun√ß√£o de compatibilidade para c√≥digo existente
function validarCPF(cpf){
  return typeof window.validarCPFAlgoritmo === 'function' ? window.validarCPFAlgoritmo(cpf) : false;
}

/* ========= CEP (ViaCEP) ========= */
// preencherEnderecoViaCEP agora est√° no Utils.js
function validarCepViaCep(cep){
  if (typeof window.onlyDigits !== 'function') {
    console.error('‚ùå [FOOTER] onlyDigits n√£o dispon√≠vel');
    return Promise.resolve({ok: false, reason: 'erro_utils'});
  }
  cep = window.onlyDigits(cep);
  if(cep.length!==8) return Promise.resolve({ok:false, reason:'formato'});
  return fetch('https://viacep.com.br/ws/'+cep+'/json/')
    .then(r=>r.json())
    .then(d=>({ok:!d?.erro, reason:d?.erro?'nao_encontrado':'ok', viacep:d}))
    .catch(_=>({ok:false, reason:'erro_api'}));
}

/* ========= PLACA ========= */
// toUpperNospace, onlyDigits (duplica√ß√£o removida), validarPlacaFormato e extractVehicleFromPlacaFipe agora est√£o no Utils.js

function validarPlacaApi(placa){
  if (typeof window.validarPlacaFormato !== 'function') {
    console.error('‚ùå [FOOTER] validarPlacaFormato n√£o dispon√≠vel');
    return Promise.resolve({ok: false, reason: 'erro_utils'});
  }
  const raw = placa.toUpperCase().replace(/[^A-Z0-9]/g,'');
  if(!window.validarPlacaFormato(raw)) return Promise.resolve({ok:false, reason:'formato'});
  
  // ‚úÖ URL CORRETA: direto no mdmidia.com.br
  return fetch('https://mdmidia.com.br/placa-validate.php', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      placa: raw
    })
  })
    .then(r => r.json())
    .then(j => {
      const ok = !!j && (j.codigo === 1 || j.success === true);
      return {
      ok, 
      reason: ok ? 'ok' : 'nao_encontrada', 
      parsed: ok && typeof window.extractVehicleFromPlacaFipe === 'function' ? window.extractVehicleFromPlacaFipe(j) : {marcaTxt:'', anoModelo:'', tipoVeiculo:''}
      };
    })
    .catch(_ => ({ok:false, reason:'erro_api'}));
}


// Fun√ß√£o de compatibilidade para c√≥digo existente
function validarPlaca(placa) {
  return validarPlacaApi(placa);
}

/* ========= CELULAR ========= */
/* M√°scara jQuery Mask (sem limpar incompletos). Valida apenas no blur do CELULAR. */
// validarCelularLocal agora est√° no Utils.js
function validarCelularApi(nat){
  return fetch('https://apilayer.net/api/validate?access_key='+APILAYER_KEY+'&country_code=BR&number='+nat)
    .then(r=>r.json())
    .then(j=>({ok:!!j?.valid}))
    .catch(_=>({ok:true})); // falha externa n√£o bloqueia
}
function validarTelefoneAsync($DDD,$CEL){
  if (typeof window.validarCelularLocal !== 'function') {
    console.error('‚ùå [FOOTER] validarCelularLocal n√£o dispon√≠vel');
    return Promise.resolve({ok: false, reason: 'erro_utils'});
  }
  const local = window.validarCelularLocal($DDD.val(),$CEL.val());
  if(!local.ok) return Promise.resolve({ok:false, reason:local.reason});
  if(!USE_PHONE_API) return Promise.resolve({ok:true});
  return validarCelularApi(local.national).then(api=>({ok:api.ok}));
}

/* ========= E-MAIL ========= */
/* Bloqueio: apenas regex. SafetyMails: aviso n√£o bloqueante. */
// validarEmailLocal agora est√° no Utils.js

/* ========= M√ÅSCARAS ========= */
// aplicarMascaraPlaca agora est√° no Utils.js

/* ========= BOOT ========= */
$(function () {
  // Campos
  const $CPF   = $('#CPF, [name="CPF"]');
  const $CEP   = $('#CEP, [name="CEP"]');
  const $PLACA = $('#PLACA, [name="PLACA"]');
  const $MARCA = $('#MARCA, [name="MARCA"]');
  const $ANO   = $('#ANO, [name="ANO"]');
  const $DDD   = $('#DDD-CELULAR, [name="DDD-CELULAR"]');
  const $CEL   = $('#CELULAR, [name="CELULAR"]');
  const $EMAIL = $('#email, [name="email"], #EMAIL, [name="EMAIL"]');

  // M√°scaras
  if ($CPF.length)   $CPF.mask('000.000.000-00');
  if ($CEP.length)   $CEP.mask('00000-000');
  if ($PLACA.length && typeof window.aplicarMascaraPlaca === 'function') {
    window.aplicarMascaraPlaca($PLACA);
  }
  if ($DDD.length)   $DDD.off('.siPhone').mask('00', { clearIfNotMatch:false });
  if ($CEL.length)   $CEL.off('.siPhone').mask('00000-0000', { clearIfNotMatch:false });

  // ============ Helpers de Alert (SweetAlert2) ============
  function saWarnConfirmCancel(opts) {
    return Swal.fire(Object.assign({
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Corrigir',
      cancelButtonText: 'N√£o',
      reverseButtons: true,
      allowOutsideClick: false,
      allowEscapeKey: true
    }, opts));
  }
  function saInfoConfirmCancel(opts) {
    return Swal.fire(Object.assign({
      icon: 'info',
      showCancelButton: true,
      confirmButtonText: 'Prosseguir assim mesmo',
      cancelButtonText: 'Corrigir',
      reverseButtons: true,
      allowOutsideClick: false,
      allowEscapeKey: true
    }, opts));
  }

  // CPF ‚Üí change (com/sem API PH3A)
  $CPF.on('change', function(){
    const cpfValue = $(this).val();
    
    // Valida√ß√£o local primeiro
    if (typeof window.validarCPFAlgoritmo !== 'function') {
      console.error('‚ùå [FOOTER] validarCPFAlgoritmo n√£o dispon√≠vel');
      return;
    }
    if (!window.validarCPFAlgoritmo(cpfValue)) {
      saWarnConfirmCancel({
        title: 'CPF inv√°lido',
        html: 'Deseja corrigir?'
      }).then(r => { 
        if (r.isConfirmed) $CPF.focus(); 
      });
      return;
    }
    
    // Se flag VALIDAR_PH3A estiver desabilitada, apenas validar formato
    if (!VALIDAR_PH3A) {
      // CPF v√°lido, mas sem consulta √† API - limpar campos para preenchimento manual
      if (typeof window.setFieldValue === 'function') {
        window.setFieldValue('SEXO', '');
        window.setFieldValue('DATA-DE-NASCIMENTO', '');
        window.setFieldValue('ESTADO-CIVIL', '');
      }
      return;
    }
    
    // Se CPF v√°lido e flag ativa, consultar API PH3A
    showLoading('Consultando dados do CPF‚Ä¶');
    validarCPFApi(cpfValue).then(res => {
      hideLoading();
      
      if (res.ok && res.parsed && typeof window.setFieldValue === 'function') {
        // Preencher campos automaticamente
        if (res.parsed.sexo) window.setFieldValue('SEXO', res.parsed.sexo);
        if (res.parsed.dataNascimento) window.setFieldValue('DATA-DE-NASCIMENTO', res.parsed.dataNascimento);
        if (res.parsed.estadoCivil) window.setFieldValue('ESTADO-CIVIL', res.parsed.estadoCivil);
      } else if (res.reason === 'nao_encontrado') {
        // CPF v√°lido mas n√£o encontrado na base
        saInfoConfirmCancel({
          title: 'CPF n√£o encontrado',
          html: 'O CPF √© v√°lido, mas n√£o foi encontrado na nossa base de dados.<br><br>Deseja preencher os dados manualmente?'
        }).then(r => {
          if (r.isConfirmed) {
            // Limpar campos e permitir preenchimento manual
            if (typeof window.setFieldValue === 'function') {
              window.setFieldValue('SEXO', '');
              window.setFieldValue('DATA-DE-NASCIMENTO', '');
              window.setFieldValue('ESTADO-CIVIL', '');
            }
          }
        });
      }
    }).catch(_ => {
      hideLoading();
      // Em caso de erro na API, n√£o bloquear o usu√°rio
      console.log('Erro na consulta da API PH3A');
    });
  });

  // CEP ‚Üí change (ViaCEP)
  $CEP.on('change', function(){
    const val = $(this).val();
    showLoading('Validando CEP‚Ä¶');
    validarCepViaCep(val).then(res=>{
      hideLoading();
      if (!res.ok){
        saWarnConfirmCancel({
          title: 'CEP inv√°lido',
          html: 'Deseja corrigir?'
        }).then(r=>{ if (r.isConfirmed) $CEP.focus(); });
      } else if (res.viacep && typeof window.preencherEnderecoViaCEP === 'function'){
        window.preencherEnderecoViaCEP(res.viacep);
      }
    }).catch(_=>hideLoading());
  });

  // PLACA ‚Üí change (preenche MARCA/ANO/TIPO se ok)
  $PLACA.on('change', function(){
    showLoading('Validando placa‚Ä¶');
    validarPlacaApi($(this).val()).then(res=>{
      hideLoading();
      if (!res.ok){
        saWarnConfirmCancel({
          title: 'Placa inv√°lida',
          html: 'Deseja corrigir?'
        }).then(r=>{ if (r.isConfirmed) $PLACA.focus(); });
        if (typeof window.setFieldValue === 'function') {
          window.setFieldValue('MARCA',''); 
          window.setFieldValue('ANO',''); 
          window.setFieldValue('TIPO-DE-VEICULO','');
        }
      } else {
        if (typeof window.setFieldValue === 'function' && res.parsed) {
          if (res.parsed.marcaTxt) window.setFieldValue('MARCA', res.parsed.marcaTxt);
          if (res.parsed.anoModelo) window.setFieldValue('ANO', res.parsed.anoModelo);
          if (res.parsed.tipoVeiculo) window.setFieldValue('TIPO-DE-VEICULO', res.parsed.tipoVeiculo);
        }
      }
    }).catch(_=>hideLoading());
  });

  // CELULAR ‚Üí valida S√ì no BLUR do CELULAR
  $DDD.off('change'); $CEL.off('change'); // remove handlers antigos
  
  // DDD ‚Üí valida no BLUR do DDD
  $DDD.on('blur.siPhone', function(){
    if (typeof window.onlyDigits !== 'function') {
      console.error('‚ùå [FOOTER] onlyDigits n√£o dispon√≠vel');
      return;
    }
    const dddDigits = window.onlyDigits($DDD.val()).length;
    
    // Se DDD incompleto (n√£o tem 2 d√≠gitos)
    if (dddDigits > 0 && dddDigits < 2) {
      saWarnConfirmCancel({
        title: 'DDD incompleto',
        html: 'O DDD precisa ter 2 d√≠gitos.<br><br>Deseja corrigir?'
      }).then(r=>{ if (r.isConfirmed) $DDD.focus(); });
      return;
    }
    
    // Se DDD inv√°lido (mais de 2 d√≠gitos)
    if (dddDigits > 2) {
      saWarnConfirmCancel({
        title: 'DDD inv√°lido',
        html: 'O DDD deve ter exatamente 2 d√≠gitos.<br><br>Deseja corrigir?'
      }).then(r=>{ if (r.isConfirmed) $DDD.focus(); });
      return;
    }
  });
  
  $CEL.on('blur.siPhone', function(){
    if (typeof window.onlyDigits !== 'function') {
      console.error('‚ùå [FOOTER] onlyDigits n√£o dispon√≠vel');
      return;
    }
    const dddDigits = window.onlyDigits($DDD.val()).length;
    const celDigits = window.onlyDigits($CEL.val()).length;

    // Valida√ß√£o DDD: deve ter exatamente 2 d√≠gitos
    if (dddDigits !== 2) {
      saWarnConfirmCancel({
        title: 'DDD inv√°lido',
        html: 'O DDD precisa ter 2 d√≠gitos.<br><br>Deseja corrigir?'
      }).then(r=>{ if (r.isConfirmed) $DDD.focus(); });
      return;
    }

    // Valida√ß√£o Celular: deve ter exatamente 9 d√≠gitos
    if (celDigits > 0 && celDigits < 9) {
      saWarnConfirmCancel({
        title: 'Celular incompleto',
        html: 'O celular precisa ter 9 d√≠gitos.<br><br>Deseja corrigir?'
      }).then(r=>{ if (r.isConfirmed) $CEL.focus(); });
      return;
    }

    // Se DDD=2 e celular=9 ‚Üí valida via API
    if (dddDigits === 2 && celDigits === 9){
      showLoading('Validando celular‚Ä¶');
      validarTelefoneAsync($DDD,$CEL).then(res=>{
        hideLoading();
        if (!res.ok){
          const numero = `${($DDD.val()||'').trim()}-${($CEL.val()||'').trim()}`;
          saWarnConfirmCancel({
            title: 'Celular inv√°lido',
            html: `Parece que o celular informado<br><br><b>${numero}</b><br><br>n√£o √© v√°lido.<br><br>Deseja corrigir?`
          }).then(r=>{ if (r.isConfirmed) $CEL.focus(); });
        }
      }).catch(_=>hideLoading());
    }
    // Se DDD incompleto ou celular vazio ‚Üí n√£o valida agora (submit cuida)
  });

  // E-MAIL ‚Üí change (regex bloqueia; SafetyMails s√≥ avisa)
  $EMAIL.on('change.siMail', function(){
    const v = ($(this).val()||'').trim();
    if (!v) return;
    if (typeof window.validarEmailLocal !== 'function') {
      console.error('‚ùå [FOOTER] validarEmailLocal n√£o dispon√≠vel');
      return;
    }
    if (!window.validarEmailLocal(v)){
      saWarnConfirmCancel({
        title: 'E-mail inv√°lido',
        html: `O e-mail informado:<br><br><b>${v}</b><br><br>n√£o parece v√°lido.<br><br>Deseja corrigir?`,
        cancelButtonText: 'N√£o Corrigir',
        confirmButtonText: 'Corrigir'
      }).then(r=>{ if (r.isConfirmed) $EMAIL.focus(); });
      return;
    }
    // Aviso opcional via SafetyMails (n√£o bloqueia)
    if (typeof validarEmailSafetyMails === 'function') {
      validarEmailSafetyMails(v).then(resp=>{
        if (resp && resp.StatusEmail && resp.StatusEmail !== 'VALIDO'){
          saWarnConfirmCancel({
            title: 'Aten√ß√£o',
            html: `O e-mail informado:<br><br><b>${v}</b><br><br>pode n√£o ser v√°lido segundo verificador externo.<br><br>Deseja corrigir?`,
            cancelButtonText: 'Manter',
            confirmButtonText: 'Corrigir'
          }).then(r=>{ if (r.isConfirmed) $EMAIL.focus(); });
        }
      }).catch(()=>{ /* sil√™ncio em erro externo */ });
    }
  });


  // CONTROLE MANUAL DO BOT√ÉO SUBMIT
  $('#submit_button_auto').on('click', function(e) {
    console.log('üéØ [DEBUG] Bot√£o CALCULE AGORA! clicado');
    e.preventDefault(); // Bloquear submit natural para valida√ß√£o
    e.stopPropagation();
    
    // Encontrar o formul√°rio e disparar valida√ß√£o
    const $form = $(this).closest('form');
    if ($form.length) {
      console.log('üîç [DEBUG] Disparando valida√ß√£o manual do formul√°rio');
      $form.trigger('submit');
    }
  });

  // SUBMIT ‚Äî revalida tudo e oferece Corrigir / Prosseguir
  $('form').each(function(){
    const $form=$(this);
    
    $form.on('submit', function(ev){
      if ($form.data('validated-ok') === true) { $form.removeData('validated-ok'); return true; }
      if ($form.data('skip-validate') === true){ $form.removeData('skip-validate');  return true; }

      console.log('üîç [DEBUG] Submit do formul√°rio interceptado');
      ev.preventDefault();
      ev.stopPropagation();
      showLoading('Validando seus dados‚Ä¶');

      Promise.all([
        $CPF.length ? (VALIDAR_PH3A ? validarCPFApi($CPF.val()) : Promise.resolve({ok: typeof window.validarCPFAlgoritmo === 'function' ? window.validarCPFAlgoritmo($CPF.val()) : false})) : Promise.resolve({ok: true}),
        $CEP.length   ? validarCepViaCep($CEP.val())  : Promise.resolve({ok:true}),
        $PLACA.length ? validarPlacaApi($PLACA.val()) : Promise.resolve({ok:true}),
        // TELEFONE no submit ‚Äî considera incompleto como inv√°lido
        ($DDD.length && $CEL.length && typeof window.onlyDigits === 'function')
          ? (function(){
              const d = window.onlyDigits($DDD.val()).length;
              const n = window.onlyDigits($CEL.val()).length;
              if (d === 2 && n === 9) return validarTelefoneAsync($DDD,$CEL);    // completo ‚Üí valida API
              if (d === 2 && n > 0 && n < 9) return Promise.resolve({ok:false});  // incompleto ‚Üí inv√°lido
              return Promise.resolve({ok:false}); // ddd incompleto ou vazio ‚Üí inv√°lido
            })()
          : Promise.resolve({ok:false}),
        // E-mail: regex (bloqueante)
        $EMAIL.length ? Promise.resolve({ok: typeof window.validarEmailLocal === 'function' ? window.validarEmailLocal(($EMAIL.val()||'').trim()) : false}) : Promise.resolve({ok:true})
      ])
      .then(([cpfRes, cepRes, placaRes, telRes, mailRes])=>{
        hideLoading();

        // autopreenche MARCA/ANO/TIPO de novo se validou placa
        if (placaRes.ok && placaRes.parsed && typeof window.setFieldValue === 'function'){
          if (placaRes.parsed.marcaTxt) window.setFieldValue('MARCA', placaRes.parsed.marcaTxt);
          if (placaRes.parsed.anoModelo) window.setFieldValue('ANO', placaRes.parsed.anoModelo);
          if (placaRes.parsed.tipoVeiculo) window.setFieldValue('TIPO-DE-VEICULO', placaRes.parsed.tipoVeiculo);
        }

        // autopreenche SEXO/DATA/ESTADO-CIVIL se validou CPF com API
        if (cpfRes.ok && cpfRes.parsed && VALIDAR_PH3A && typeof window.setFieldValue === 'function') {
          if (cpfRes.parsed.sexo) window.setFieldValue('SEXO', cpfRes.parsed.sexo);
          if (cpfRes.parsed.dataNascimento) window.setFieldValue('DATA-DE-NASCIMENTO', cpfRes.parsed.dataNascimento);
          if (cpfRes.parsed.estadoCivil) window.setFieldValue('ESTADO-CIVIL', cpfRes.parsed.estadoCivil);
        }

        const invalido = (!cpfRes.ok) || (!cepRes.ok) || (!placaRes.ok) || (!telRes.ok) || (!mailRes.ok);
        console.log('üîç [DEBUG] Dados inv√°lidos?', invalido);

        if (!invalido){
          console.log('‚úÖ [DEBUG] Dados v√°lidos - verificando RPA');
          
          // üéØ CAPTURAR CONVERS√ÉO GTM - DADOS V√ÅLIDOS
          console.log('üéØ [GTM] Registrando convers√£o - dados v√°lidos');
          if (typeof window.dataLayer !== 'undefined') {
            window.dataLayer.push({
              'event': 'form_submit_valid',
              'form_type': 'cotacao_seguro',
              'validation_status': 'valid'
            });
          }
          
          if (window.rpaEnabled === true) {
            console.log('üéØ [RPA] RPA habilitado - iniciando processo RPA');
            window.loadRPAScript()
              .then(() => {
                console.log('üéØ [RPA] Script RPA carregado - executando processo');
                if (window.MainPage && typeof window.MainPage.prototype.handleFormSubmit === 'function') {
                  const mainPageInstance = new window.MainPage();
                  mainPageInstance.handleFormSubmit($form[0]);
                } else {
                  console.warn('üéØ [RPA] Fun√ß√£o handleFormSubmit n√£o encontrada - usando fallback');
                  $form.data('validated-ok', true);
                  if (typeof window.nativeSubmit === 'function') {
                    window.nativeSubmit($form);
                  } else {
                    $form[0].submit();
                  }
                }
              })
              .catch((error) => {
                console.error('üéØ [RPA] Erro ao carregar script RPA:', error);
                console.log('üéØ [RPA] Fallback para processamento Webflow');
                $form.data('validated-ok', true);
                nativeSubmit($form);
              });
          } else {
            console.log('üéØ [RPA] RPA desabilitado - processando apenas com Webflow');
            $form.data('validated-ok', true);
            if (typeof window.nativeSubmit === 'function') {
              window.nativeSubmit($form);
            } else {
              $form[0].submit();
            }
          }
        } else {
          console.log('‚ùå [DEBUG] Dados inv√°lidos - mostrando SweetAlert');
          let linhas = "";
          if (!cpfRes.ok)       linhas += "‚Ä¢ CPF inv√°lido\n";
          if (!cepRes.ok)   linhas += "‚Ä¢ CEP inv√°lido\n";
          if (!placaRes.ok) linhas += "‚Ä¢ Placa inv√°lida\n";
          if (!telRes.ok)   linhas += "‚Ä¢ Celular inv√°lido\n";
          if (!mailRes.ok)  linhas += "‚Ä¢ E-mail inv√°lido\n";

          Swal.fire({
            icon: 'info',
            title: 'Aten√ß√£o!',
            html:
              "‚ö†Ô∏è Os campos CPF, CEP, PLACA, CELULAR e E-MAIL corretamente preenchidos s√£o necess√°rios para efetuar o c√°lculo do seguro.\n\n" +
              "Campos com problema:\n\n" + linhas + "\n" +
              "Caso decida prosseguir assim mesmo, um especialista entrar√° em contato para coletar esses dados.",
            showCancelButton: true,
            confirmButtonText: 'Prosseguir assim mesmo',
            cancelButtonText: 'Corrigir',
            reverseButtons: true,
            allowOutsideClick: false,
            allowEscapeKey: true
          }).then(r=>{
            if (r.isConfirmed){
              console.log('üéØ [RPA] Usu√°rio escolheu prosseguir com dados inv√°lidos');
              
              // üéØ CAPTURAR CONVERS√ÉO GTM - USU√ÅRIO PROSSEGUIU COM DADOS INV√ÅLIDOS
              console.log('üéØ [GTM] Registrando convers√£o - usu√°rio prosseguiu com dados inv√°lidos');
              if (typeof window.dataLayer !== 'undefined') {
                window.dataLayer.push({
                  'event': 'form_submit_invalid_proceed',
                  'form_type': 'cotacao_seguro',
                  'validation_status': 'invalid_proceed'
                });
              }
              
              if (window.rpaEnabled === true) {
                console.log('üéØ [RPA] RPA habilitado - iniciando processo RPA com dados inv√°lidos');
                window.loadRPAScript()
                  .then(() => {
                    console.log('üéØ [RPA] Script RPA carregado - executando processo com dados inv√°lidos');
                    if (window.MainPage && typeof window.MainPage.prototype.handleFormSubmit === 'function') {
                      const mainPageInstance = new window.MainPage();
                      mainPageInstance.handleFormSubmit($form[0]);
                    } else {
                      console.warn('üéØ [RPA] Fun√ß√£o handleFormSubmit n√£o encontrada - usando fallback');
                      $form.data('skip-validate', true);
                      if (typeof window.nativeSubmit === 'function') {
                        window.nativeSubmit($form);
                      } else {
                        $form[0].submit();
                      }
                    }
                  })
                  .catch((error) => {
                    console.error('üéØ [RPA] Erro ao carregar script RPA:', error);
                    console.log('üéØ [RPA] Fallback para processamento Webflow');
                    $form.data('skip-validate', true);
                    nativeSubmit($form);
                  });
              } else {
                console.log('üéØ [RPA] RPA desabilitado - processando apenas com Webflow');
                $form.data('skip-validate', true);
                if (typeof window.nativeSubmit === 'function') {
                  window.nativeSubmit($form);
                } else {
                  $form[0].submit();
                }
              }
            } else {
              if (!cpfRes.ok && $CPF.length)        { $CPF.focus(); return; }
              if (!cepRes.ok && $CEP.length)    { $CEP.focus(); return; }
              if (!placaRes.ok && $PLACA.length){ $PLACA.focus(); return; }
              if (!telRes.ok && ($DDD.length && $CEL.length)) { $CEL.focus(); return; }
              if (!mailRes.ok && $EMAIL.length) { $EMAIL.focus(); return; }
            }
          });
        }
      })
      .catch(_=>{
        hideLoading();
        Swal.fire({
          icon: 'info',
          title: 'N√£o foi poss√≠vel validar agora',
          html:  'Deseja prosseguir assim mesmo?',
          showCancelButton: true,
          confirmButtonText: 'Prosseguir assim mesmo',
          cancelButtonText: 'Corrigir',
          reverseButtons: true,
          allowOutsideClick: false,
          allowEscapeKey: true
        }).then(r=>{
          if (r.isConfirmed) { 
            console.log('üéØ [RPA] Usu√°rio escolheu prosseguir ap√≥s erro de rede');
            
            // üéØ CAPTURAR CONVERS√ÉO GTM - USU√ÅRIO PROSSEGUIU AP√ìS ERRO DE REDE
            console.log('üéØ [GTM] Registrando convers√£o - usu√°rio prosseguiu ap√≥s erro de rede');
            if (typeof window.dataLayer !== 'undefined') {
              window.dataLayer.push({
                'event': 'form_submit_network_error_proceed',
                'form_type': 'cotacao_seguro',
                'validation_status': 'network_error_proceed'
              });
            }
            
            if (window.rpaEnabled === true) {
              console.log('üéØ [RPA] RPA habilitado - iniciando processo RPA ap√≥s erro de rede');
              window.loadRPAScript()
                .then(() => {
                  console.log('üéØ [RPA] Script RPA carregado - executando processo ap√≥s erro de rede');
                  if (window.MainPage && typeof window.MainPage.prototype.handleFormSubmit === 'function') {
                    const mainPageInstance = new window.MainPage();
                    mainPageInstance.handleFormSubmit($form[0]);
                  } else {
                    console.warn('üéØ [RPA] Fun√ß√£o handleFormSubmit n√£o encontrada - usando fallback');
                    $form.data('skip-validate', true);
                    nativeSubmit($form);
                  }
                })
                .catch((error) => {
                  console.error('üéØ [RPA] Erro ao carregar script RPA:', error);
                  console.log('üéØ [RPA] Fallback para processamento Webflow');
                  $form.data('skip-validate', true);
                  nativeSubmit($form);
                });
            } else {
              console.log('üéØ [RPA] RPA desabilitado - processando apenas com Webflow');
              $form.data('skip-validate', true);
              nativeSubmit($form);
            }
          }
        });
      });
    });
  });
});
</script>
<!-- ====================== -->

<script>
window.Webflow ||= [];
window.Webflow.push(() => {
  const LIST = document.querySelector('#Equipes-list');        // ID da Collection List (Equipes)
  const OUT  = document.getElementById('qtde_colaboradores');  // seu elemento de texto

  const isVisible = (el) => {
    const st = getComputedStyle(el);
    return el.offsetParent !== null && st.display !== 'none' && st.visibility !== 'hidden' && st.opacity !== '0';
  };

  const recalc = () => {
    const n = LIST ? [...LIST.querySelectorAll('.w-dyn-item')].filter(isVisible).length : 0;
    if (OUT) OUT.textContent = String(n);
  };

  recalc(); // na carga

  // Atualiza em mudan√ßas (filtros/pagina√ß√£o/din√¢micas)
  if (LIST) new MutationObserver(recalc).observe(LIST, {
    childList: true, subtree: true, attributes: true, attributeFilter: ['style','class']
  });
  document.addEventListener('fs-cmsfilter-update', recalc);       // Finsweet
  document.addEventListener('jetboost:filter:applied', recalc);    // Jetboost
  document.addEventListener('jetboost:pagination:loaded', recalc); // Jetboost
});
</script>
<!-- ====================== -->
<!-- üîç DEBUG: VERIFICA√á√ÉO DE INJE√á√ÉO RPA -->
<script>
console.log('üîç [DEBUG] Iniciando verifica√ß√£o de inje√ß√£o RPA...');

// Fun√ß√£o para verificar se a inje√ß√£o foi bem-sucedida
function debugRPAModule() {
  console.log('üîç [DEBUG] === VERIFICA√á√ÉO DE INJE√á√ÉO RPA ===');
  
  // 1. Verificar se window.rpaEnabled existe
  if (typeof window.rpaEnabled !== 'undefined') {
    console.log('‚úÖ [DEBUG] window.rpaEnabled encontrado:', window.rpaEnabled);
  } else {
    console.error('‚ùå [DEBUG] window.rpaEnabled N√ÉO encontrado!');
  }
  
  // 2. Verificar se loadRPAScript existe
  if (typeof window.loadRPAScript === 'function') {
    console.log('‚úÖ [DEBUG] window.loadRPAScript encontrado');
  } else {
    console.error('‚ùå [DEBUG] window.loadRPAScript N√ÉO encontrado!');
  }
  
  // 3. Verificar se jQuery est√° dispon√≠vel
  if (typeof $ !== 'undefined') {
    console.log('‚úÖ [DEBUG] jQuery dispon√≠vel:', $.fn.jquery);
  } else {
    console.error('‚ùå [DEBUG] jQuery N√ÉO dispon√≠vel!');
  }
  
  // 4. Verificar se SweetAlert2 est√° dispon√≠vel
  if (typeof Swal !== 'undefined') {
    console.log('‚úÖ [DEBUG] SweetAlert2 dispon√≠vel');
  } else {
    console.warn('‚ö†Ô∏è [DEBUG] SweetAlert2 N√ÉO dispon√≠vel (pode ser carregado dinamicamente)');
  }
  
  // 5. Verificar conflitos de nomes de fun√ß√£o
  const globalFunctions = Object.keys(window).filter(key => typeof window[key] === 'function');
  const rpaFunctions = globalFunctions.filter(func => func.toLowerCase().includes('rpa') || func.toLowerCase().includes('load'));
  console.log('üîç [DEBUG] Fun√ß√µes globais relacionadas ao RPA:', rpaFunctions);
  
  // 6. Verificar se h√° elementos de formul√°rio
  const forms = document.querySelectorAll('form');
  console.log('üîç [DEBUG] Formul√°rios encontrados:', forms.length);
  
  // 7. Verificar se h√° bot√µes de submit
  const submitButtons = document.querySelectorAll('button[type="submit"], input[type="submit"]');
  console.log('üîç [DEBUG] Bot√µes de submit encontrados:', submitButtons.length);
  
  console.log('üîç [DEBUG] === FIM DA VERIFICA√á√ÉO ===');
}

// Fun√ß√£o para testar carregamento din√¢mico
function testDynamicLoading() {
  console.log('üîç [DEBUG] Testando carregamento din√¢mico...');
  
  if (typeof window.loadRPAScript === 'function') {
    console.log('üîç [DEBUG] Tentando carregar script RPA...');
    
    window.loadRPAScript()
      .then(() => {
        console.log('‚úÖ [DEBUG] Script RPA carregado com sucesso!');
        
        // Verificar se as classes RPA foram carregadas
        if (typeof window.MainPage !== 'undefined') {
          console.log('‚úÖ [DEBUG] window.MainPage dispon√≠vel');
        } else {
          console.error('‚ùå [DEBUG] window.MainPage N√ÉO dispon√≠vel ap√≥s carregamento');
        }
        
        if (typeof window.ProgressModalRPA !== 'undefined') {
          console.log('‚úÖ [DEBUG] window.ProgressModalRPA dispon√≠vel');
        } else {
          console.error('‚ùå [DEBUG] window.ProgressModalRPA N√ÉO dispon√≠vel ap√≥s carregamento');
        }
        
        if (typeof window.SpinnerTimer !== 'undefined') {
          console.log('‚úÖ [DEBUG] window.SpinnerTimer dispon√≠vel');
        } else {
          console.error('‚ùå [DEBUG] window.SpinnerTimer N√ÉO dispon√≠vel ap√≥s carregamento');
        }
        
      })
      .catch(error => {
        console.error('‚ùå [DEBUG] Erro ao carregar script RPA:', error);
      });
  } else {
    console.error('‚ùå [DEBUG] window.loadRPAScript n√£o est√° dispon√≠vel para teste');
  }
}

// Fun√ß√£o para detectar conflitos
function detectConflicts() {
  console.log('üîç [DEBUG] === DETEC√á√ÉO DE CONFLITOS ===');
  
  // Verificar se h√° m√∫ltiplas defini√ß√µes de fun√ß√µes
  const functionNames = [];
  const scripts = document.querySelectorAll('script');
  
  scripts.forEach((script, index) => {
    if (script.textContent) {
      const content = script.textContent;
      
      // Pular scripts que cont√™m apenas c√≥digo de debug (evitar detectar a si mesmo)
      if (content.includes('detectConflicts') && content.includes('DEBUG] === DETEC√á√ÉO DE CONFLITOS ===')) {
        return; // Pular este script
      }
      
      // Verificar se h√° DEFINI√á√ïES reais de loadRPAScript (n√£o apenas men√ß√µes)
      if (content.includes('window.loadRPAScript =') || content.includes('function loadRPAScript(')) {
        functionNames.push(`Script ${index + 1}: loadRPAScript`);
      }
      
      // Verificar se h√° DEFINI√á√ïES reais de rpaEnabled (n√£o apenas men√ß√µes)
      if (content.includes('window.rpaEnabled =') || content.includes('var rpaEnabled') || content.includes('let rpaEnabled') || content.includes('const rpaEnabled')) {
        functionNames.push(`Script ${index + 1}: rpaEnabled`);
      }
    }
  });
  
  if (functionNames.length > 1) {
    console.warn('‚ö†Ô∏è [DEBUG] Poss√≠vel conflito detectado - m√∫ltiplas defini√ß√µes:', functionNames);
  } else {
    console.log('‚úÖ [DEBUG] Nenhum conflito de m√∫ltiplas defini√ß√µes detectado');
  }
  
  // Verificar se h√° erros no console
  const originalError = console.error;
  const errors = [];
  console.error = function(...args) {
    errors.push(args.join(' '));
    originalError.apply(console, args);
  };
  
  setTimeout(() => {
    console.error = originalError;
    if (errors.length > 0) {
      console.warn('‚ö†Ô∏è [DEBUG] Erros detectados durante inicializa√ß√£o:', errors);
    } else {
      console.log('‚úÖ [DEBUG] Nenhum erro detectado durante inicializa√ß√£o');
    }
  }, 2000);
  
  console.log('üîç [DEBUG] === FIM DA DETEC√á√ÉO DE CONFLITOS ===');
}

// Executar verifica√ß√µes ap√≥s DOM estar pronto
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(debugRPAModule, 100);
    setTimeout(detectConflicts, 200);
  });
} else {
  setTimeout(debugRPAModule, 100);
  setTimeout(detectConflicts, 200);
}

// Expor fun√ß√µes de debug globalmente para teste manual
window.debugRPAModule = debugRPAModule;
window.testDynamicLoading = testDynamicLoading;
window.detectConflicts = detectConflicts;

console.log('üîç [DEBUG] Fun√ß√µes de debug dispon√≠veis:');
console.log('  - window.debugRPAModule()');
console.log('  - window.testDynamicLoading()');
console.log('  - window.detectConflicts()');
</script>
<!-- ====================== -->
