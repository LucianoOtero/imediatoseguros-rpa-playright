#!/usr/bin/env python3
"""
Investiga√ß√£o Espec√≠fica da Tela 2 - Por que o campo placa n√£o aparece?
Investiga detalhadamente o que est√° na Tela 2 ap√≥s selecionar Carro
"""

import time
import tempfile
import shutil
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def configurar_chrome():
    """Configura o Chrome com op√ß√µes otimizadas"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # Criar diret√≥rio tempor√°rio √∫nico
    temp_dir = tempfile.mkdtemp()
    chrome_options.add_argument(f"--user-data-dir={temp_dir}")
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    return driver, temp_dir

def investigar_tela2_detalhadamente(driver):
    """Investiga a Tela 2 detalhadamente"""
    print("üîç **INVESTIGANDO TELA 2 DETALHADAMENTE...**")
    
    # Navegar at√© Tela 1
    print("ÔøΩÔøΩ Navegando at√© Tela 1...")
    driver.get("https://www.app.tosegurado.com.br/cotacao")
    time.sleep(5)
    
    # Selecionar Carro
    carro_button = WebDriverWait(driver, 20).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Carro')]"))
    )
    print("‚úÖ Bot√£o Carro encontrado")
    
    # Salvar estado antes do clique
    with open("/opt/imediatoseguros-rpa/temp/tela1_antes_carro.html", "w", encoding="utf-8") as f:
        f.write(driver.page_source)
    print("üìÑ HTML da Tela 1 (antes) salvo")
    
    # Clicar no Carro
    carro_button.click()
    print("‚úÖ Carro selecionado")
    time.sleep(10)  # Aguardar mais tempo
    
    # Salvar estado ap√≥s clique
    with open("/opt/imediatoseguros-rpa/temp/tela2_apos_carro.html", "w", encoding="utf-8") as f:
        f.write(driver.page_source)
    print("ÔøΩÔøΩ HTML da Tela 2 (ap√≥s) salvo")
    
    # Salvar screenshot
    driver.save_screenshot("/opt/imediatoseguros-rpa/temp/tela2_apos_carro.png")
    print(" Screenshot da Tela 2 salvo")
    
    # Verificar informa√ß√µes da p√°gina
    print(f"\nÔøΩÔøΩ URL atual: {driver.current_url}")
    print(f"üìÑ T√≠tulo atual: {driver.title}")
    
    # Procurar por elementos relacionados √† placa
    print("\nüîç **PROCURANDO ELEMENTOS RELACIONADOS √Ä PLACA...**")
    
    # Procurar por input com id "placaTelaPlaca"
    try:
        placa_input = driver.find_element(By.ID, "placaTelaPlaca")
        print("‚úÖ Campo de placa encontrado por ID!")
        print(f"   Tag: {placa_input.tag_name}")
        print(f"   Classes: {placa_input.get_attribute('class')}")
        print(f"   Placeholder: {placa_input.get_attribute('placeholder')}")
        print(f"   Vis√≠vel: {placa_input.is_displayed()}")
        print(f"   Habilitado: {placa_input.is_enabled()}")
    except:
        print("‚ùå Campo de placa N√ÉO encontrado por ID")
    
    # Procurar por qualquer input
    try:
        inputs = driver.find_elements(By.TAG_NAME, "input")
        print(f"\nüîç Total de inputs encontrados: {len(inputs)}")
        
        for i, input_elem in enumerate(inputs[:10]):  # Mostrar apenas os 10 primeiros
            try:
                id_attr = input_elem.get_attribute("id")
                name_attr = input_elem.get_attribute("name")
                placeholder = input_elem.get_attribute("placeholder")
                tipo = input_elem.get_attribute("type")
                classes = input_elem.get_attribute("class")
                
                print(f"   Input {i+1}: ID='{id_attr}' Name='{name_attr}' Type='{tipo}'")
                print(f"      Placeholder: {placeholder}")
                print(f"      Classes: {classes}")
                print(f"      Vis√≠vel: {input_elem.is_displayed()}")
            except:
                print(f"   Input {i+1}: Erro ao analisar")
    except:
        print("‚ùå Erro ao procurar inputs")
    
    # Procurar por formul√°rios
    try:
        forms = driver.find_elements(By.TAG_NAME, "form")
        print(f"\nüîç Total de formul√°rios encontrados: {len(forms)}")
        
        for i, form in enumerate(forms):
            try:
                id_attr = form.get_attribute("id")
                action = form.get_attribute("action")
                method = form.get_attribute("method")
                classes = form.get_attribute("class")
                
                print(f"   Form {i+1}: ID='{id_attr}' Action='{action}' Method='{method}'")
                print(f"      Classes: {classes}")
            except:
                print(f"   Form {i+1}: Erro ao analisar")
    except:
        print("‚ùå Erro ao procurar formul√°rios")
    
    # Procurar por bot√µes
    try:
        botoes = driver.find_elements(By.TAG_NAME, "button")
        print(f"\nüîç Total de bot√µes encontrados: {len(botoes)}")
        
        for i, botao in enumerate(botoes[:5]):  # Mostrar apenas os 5 primeiros
            try:
                texto = botao.text
                id_attr = botao.get_attribute("id")
                classes = botao.get_attribute("class")
                
                print(f"   Bot√£o {i+1}: ID='{id_attr}' Texto='{texto[:50]}...'")
                print(f"      Classes: {classes}")
                print(f"      Vis√≠vel: {botao.is_displayed()}")
            except:
                print(f"   Bot√£o {i+1}: Erro ao analisar")
    except:
        print("‚ùå Erro ao procurar bot√µes")
    
    # Procurar por mensagens de erro
    print("\nüîç **PROCURANDO MENSAGENS DE ERRO...**")
    try:
        erros = driver.find_elements(By.XPATH, "//*[contains(text(), 'erro') or contains(text(), 'Erro') or contains(text(), 'ERRO') or contains(text(), 'falha') or contains(text(), 'Falha')]")
        if erros:
            print(f"‚ö†Ô∏è {len(erros)} mensagens de erro encontradas:")
            for i, erro in enumerate(erros[:5], 1):
                print(f"   Erro {i}: {erro.text}")
        else:
            print("‚úÖ Nenhuma mensagem de erro encontrada")
    except:
        print("‚ùå Erro ao procurar mensagens de erro")
    
    # Procurar por texto relacionado √† placa
    print("\nÔøΩÔøΩ **PROCURANDO TEXTO RELACIONADO √Ä PLACA...**")
    try:
        textos_placa = driver.find_elements(By.XPATH, "//*[contains(text(), 'placa') or contains(text(), 'Placa') or contains(text(), 'PLACA')]")
        if textos_placa:
            print(f"‚úÖ {len(textos_placa)} textos relacionados √† placa encontrados:")
            for i, texto in enumerate(textos_placa[:5], 1):
                print(f"   Texto {i}: {texto.text}")
        else:
            print("‚ö†Ô∏è Nenhum texto relacionado √† placa encontrado")
    except:
        print("‚ùå Erro ao procurar textos relacionados √† placa")
    
    # Verificar se h√° iframe
    print("\nüîç **VERIFICANDO IFRAMES...**")
    try:
        iframes = driver.find_elements(By.TAG_NAME, "iframe")
        print(f"‚úÖ Total de iframes: {len(iframes)}")
        
        for i, iframe in enumerate(iframes):
            try:
                src = iframe.get_attribute("src")
                print(f"   Iframe {i+1}: src='{src}'")
            except:
                print(f"   Iframe {i+1}: Erro ao analisar")
    except:
        print("‚ùå Erro ao procurar iframes")
    
    # Verificar console do navegador
    print("\nüîç **VERIFICANDO CONSOLE DO NAVEGADOR...**")
    try:
        logs = driver.get_log("browser")
        if logs:
            print(f"‚úÖ {len(logs)} logs do console encontrados:")
            for log in logs[:5]:
                print(f"   {log['level']}: {log['message']}")
        else:
            print("‚ÑπÔ∏è Nenhum log do console encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao verificar console: {e}")

def main():
    """Fun√ß√£o principal"""
    print("ÔøΩÔøΩ **INVESTIGA√á√ÉO ESPEC√çFICA TELA 2 - T√î SEGURADO**")
    print("=" * 60)
    
    driver = None
    temp_dir = None
    
    try:
        # Configurar Chrome
        driver, temp_dir = configurar_chrome()
        print("‚úÖ Chrome configurado")
        
        # Investigar Tela 2
        investigar_tela2_detalhadamente(driver)
        
        print("\n‚úÖ **INVESTIGA√á√ÉO CONCLU√çDA!**")
        print("üìÅ Verifique os arquivos salvos em /opt/imediatoseguros-rpa/temp/")
        
    except Exception as e:
        print(f"\n‚ùå **ERRO DURANTE EXECU√á√ÉO:** {e}")
        if driver:
            driver.save_screenshot("/opt/imediatoseguros-rpa/temp/erro-investigacao-tela2.png")
            print(" Screenshot do erro salvo")
    
    finally:
        if driver:
            driver.quit()
        if temp_dir:
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è Diret√≥rio tempor√°rio removido: {temp_dir}")

if __name__ == "__main__":
    main()
