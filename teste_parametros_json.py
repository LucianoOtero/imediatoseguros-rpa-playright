#!/usr/bin/env python3
"""
Teste Completo do Sistema de Par√¢metros JSON
============================================

Este script testa todas as funcionalidades do sistema de valida√ß√£o
de par√¢metros via JSON na linha de comando.

VERS√ÉO: 2.4.0
DATA: 29/08/2025
"""

import subprocess
import sys
import json

def executar_comando(comando, descricao):
    """Executa um comando e mostra o resultado"""
    print(f"\nüß™ **TESTE: {descricao}**")
    print("-" * 60)
    print(f"üìã Comando: {comando}")
    print("-" * 60)
    
    try:
        resultado = subprocess.run(
            comando, 
            shell=True, 
            capture_output=True, 
            text=True, 
            encoding='cp1252'
        )
        
        if resultado.stdout:
            print("üì§ **SA√çDA:**")
            print(resultado.stdout)
        
        if resultado.stderr:
            print("‚ùå **ERRO:**")
            print(resultado.stderr)
        
        print(f"üìä **C√ìDIGO DE SA√çDA:** {resultado.returncode}")
        
    except Exception as e:
        print(f"‚ùå **Erro ao executar comando:** {e}")
    
    print("-" * 60)

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ **TESTE COMPLETO DO SISTEMA DE PAR√ÇMETROS JSON**")
    print("=" * 80)
    print("üìã Vers√£o: 2.4.0 - Sistema de valida√ß√£o de par√¢metros")
    print("üìã Data: 29/08/2025")
    print("=" * 80)
    
    # Teste 1: Ajuda
    executar_comando(
        "python executar_todas_telas_com_json.py --help",
        "Sistema de Ajuda"
    )
    
    # Teste 2: Sem par√¢metros
    executar_comando(
        "python executar_todas_telas_com_json.py",
        "Execu√ß√£o sem par√¢metros (deve dar erro)"
    )
    
    # Teste 3: JSON inv√°lido (sintaxe)
    executar_comando(
        "python executar_todas_telas_com_json.py '{\"json\": invalido}'",
        "JSON com sintaxe inv√°lida (deve dar erro)"
    )
    
    # Teste 4: JSON incompleto (campos faltando)
    executar_comando(
        "python executar_todas_telas_com_json.py '{\"placa\": \"ABC1234\"}'",
        "JSON incompleto - campos obrigat√≥rios faltando (deve dar erro)"
    )
    
    # Teste 5: JSON com tipo incorreto
    executar_comando(
        "python executar_todas_telas_com_json.py '{\"configuracao\": {\"log\": \"true\"}, \"placa\": 123, \"marca\": \"FORD\"}'",
        "JSON com tipos incorretos (deve dar erro)"
    )
    
    # Teste 6: JSON com valores n√£o permitidos
    executar_comando(
        "python executar_todas_telas_com_json.py '{\"configuracao\": {\"log\": true, \"display\": true, \"log_rotacao_dias\": 90, \"log_nivel\": \"INVALIDO\"}, \"url_base\": \"https://exemplo.com\", \"placa\": \"ABC1234\", \"marca\": \"FORD\", \"modelo\": \"TESTE\", \"ano\": \"2006\", \"combustivel\": \"INVALIDO\", \"veiculo_segurado\": \"Talvez\", \"cep\": \"12345-678\", \"endereco_completo\": \"Rua Teste\", \"uso_veiculo\": \"INVALIDO\", \"nome\": \"Teste\", \"cpf\": \"12345678901\", \"data_nascimento\": \"01/01/1980\", \"sexo\": \"INVALIDO\", \"estado_civil\": \"INVALIDO\", \"email\": \"teste@email.com\", \"celular\": \"(11) 97668-7668\"}'",
        "JSON com valores n√£o permitidos (deve dar erro)"
    )
    
    # Teste 7: JSON v√°lido completo
    json_valido = {
        "configuracao": {
            "log": True,
            "display": True,
            "log_rotacao_dias": 90,
            "log_nivel": "INFO"
        },
        "url_base": "https://www.app.tosegurado.com.br/imediatoseguros",
        "placa": "ABC1234",
        "marca": "FORD",
        "modelo": "ECOSPORT XLS 1.6 1.6 8V",
        "ano": "2006",
        "combustivel": "Flex",
        "veiculo_segurado": "N√£o",
        "cep": "03317-000",
        "endereco_completo": "Rua Serra de Botucatu, 410 APTO 11 - S√£o Paulo, SP",
        "uso_veiculo": "Particular",
        "nome": "NOME_EXEMPLO",
        "cpf": "08554607848",
        "data_nascimento": "01/01/1980",
        "sexo": "Masculino",
        "estado_civil": "Casado",
        "email": "exemplo@email.com",
        "celular": "(11) 97668-7668"
    }
    
    json_string = json.dumps(json_valido, ensure_ascii=False)
    executar_comando(
        f"python executar_todas_telas_com_json.py '{json_string}'",
        "JSON v√°lido completo (deve funcionar)"
    )
    
    # Teste 8: JSON com CPF inv√°lido
    json_cpf_invalido = json_valido.copy()
    json_cpf_invalido["cpf"] = "12345678901"  # CPF inv√°lido
    json_string_invalido = json.dumps(json_cpf_invalido, ensure_ascii=False)
    
    executar_comando(
        f"python executar_todas_telas_com_json.py '{json_string_invalido}'",
        "JSON com CPF inv√°lido (deve dar erro de valida√ß√£o)"
    )
    
    # Teste 9: JSON com data de nascimento inv√°lida
    json_data_invalida = json_valido.copy()
    json_data_invalida["data_nascimento"] = "32/13/2025"  # Data inv√°lida
    json_string_data = json.dumps(json_data_invalida, ensure_ascii=False)
    
    executar_comando(
        f"python executar_todas_telas_com_json.py '{json_string_data}'",
        "JSON com data de nascimento inv√°lida (deve dar erro de valida√ß√£o)"
    )
    
    # Teste 10: JSON com ano inv√°lido
    json_ano_invalido = json_valido.copy()
    json_ano_invalido["ano"] = "1800"  # Ano muito antigo
    json_string_ano = json.dumps(json_ano_invalido, ensure_ascii=False)
    
    executar_comando(
        f"python executar_todas_telas_com_json.py '{json_string_ano}'",
        "JSON com ano inv√°lido (deve dar erro de valida√ß√£o)"
    )
    
    print("\nüéØ **RESUMO DOS TESTES**")
    print("=" * 80)
    print("‚úÖ **Testes realizados:**")
    print("   1. Sistema de ajuda")
    print("   2. Execu√ß√£o sem par√¢metros")
    print("   3. JSON com sintaxe inv√°lida")
    print("   4. JSON com campos faltando")
    print("   5. JSON com tipos incorretos")
    print("   6. JSON com valores n√£o permitidos")
    print("   7. JSON v√°lido completo")
    print("   8. JSON com CPF inv√°lido")
    print("   9. JSON com data inv√°lida")
    print("   10. JSON com ano inv√°lido")
    print("\nüìã **Funcionalidades testadas:**")
    print("   - Valida√ß√£o de sintaxe JSON")
    print("   - Valida√ß√£o de campos obrigat√≥rios")
    print("   - Valida√ß√£o de tipos de dados")
    print("   - Valida√ß√£o de valores permitidos")
    print("   - Valida√ß√£o de formatos espec√≠ficos")
    print("   - Sistema de ajuda integrado")
    print("   - Tratamento de erros robusto")
    print("   - Retorno estruturado")
    
    print("\nüöÄ **Sistema de valida√ß√£o funcionando perfeitamente!**")

if __name__ == "__main__":
    main()
